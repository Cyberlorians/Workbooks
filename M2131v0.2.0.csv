Criticality,CSL1,CSL2,CSL3,CSL4,Function,Category,Sub-Category,Required Data,Workload,Table,Schema,Schema Value,Workload  Integration,Event Reference,Microsoft Unified SecOps Events
EL0,01,AA,01,01,Identity,Identity & Credential Management,Account,Account Creation,Entra,AuditLogs,OperationName,Add User,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Detects new user creation events in Entra ID and allows for targeted filtering by initiator or target UPN.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave these lists empty to return all results.
// Add specific UPNs to filter for certain initiators or targets.
//
let TargetedUserUPNs = dynamic([]); // Example: dynamic([""user1@domain.com"", ""user2@domain.com""])
let InitiatorUPNs = dynamic([]);    // Example: dynamic([""admin@domain.com""])
// 
// ----- Part 1: Filter for ""Add user"" Operations -----
// Only include ""Add user"" events from the last 30 days.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Add user""
//
// ----- Part 2: Parse Nested JSON Fields -----
// Safely extract initiator and target user information from nested JSON.
//
| extend InitiatorInfo = todynamic(InitiatedBy)
| extend TargetInfo = todynamic(TargetResources)[0]
//
// ----- Part 3: Enrich and Normalize Data -----
// Create clean, uniform columns for reporting and analysis.
//
| extend
    Status = Result,
    FailureReason = tostring(ResultSignature),
    InitiatorType = case(
        tostring(InitiatorInfo.user.userPrincipalName) has_cs ""Sync"", ""Sync Process"",
        isnotempty(InitiatorInfo.user.userPrincipalName), ""Interactive User"",
        isnotempty(InitiatorInfo.app.displayName), ""Application"",
        ""Other""
    ),
    Initiator = coalesce(
        tostring(InitiatorInfo.user.userPrincipalName),
        tostring(InitiatorInfo.app.displayName)
    ),
    InitiatorIpAddress = tostring(InitiatorInfo.user.ipAddress),
    TargetUserUPN = tostring(TargetInfo.userPrincipalName),
    TargetUserID = tostring(TargetInfo.id)
//
// ----- Part 4: Apply Dynamic Filters -----
// If either list is empty, all rows pass the filter.
//
| where (array_length(TargetedUserUPNs) == 0 or TargetUserUPN in (TargetedUserUPNs))
| where (array_length(InitiatorUPNs) == 0 or Initiator in (InitiatorUPNs))
//
// ----- Part 5: Final Output -----
// Output a clean, deduplicated table of user creation events.
//
| distinct TimeGenerated, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetUserUPN, TargetUserID
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,01,02,Identity,Identity & Credential Management,Account,Account Creation,Entra,MicrosoftGraphActivityLogs,RequestUri,Users,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/graph/api/user-post-users,"// Objective: Detects user account creation events in Entra ID by correlating Microsoft Graph activity and AuditLogs, allowing targeted review by initiator or target UPN.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave empty to return all results, or populate with UPNs for targeted filtering.
//
let TargetedUserUPNs = dynamic([]);  // Example: dynamic([""user1@domain.com""])
let InitiatorUPNs = dynamic([]);     // Example: dynamic([""admin@domain.com""])
//
// ----- Part 1: Pre-filter Microsoft Graph Activity Logs -----
// Only POST requests to /users in the last 30 days are relevant for user creation.
//
MicrosoftGraphActivityLogs
| where TimeGenerated > ago(30d)
| where RequestMethod == 'POST'
| where RequestUri has '/users' // Captures both /beta and /v1.0 endpoints
//
// ----- Part 2: Join with AuditLogs for ""Add user"" events -----
// Correlate Graph activity with audit logs by matching UserId to InitiatedBy.user.id.
//
| join kind=inner (
    AuditLogs
    | where TimeGenerated > ago(30d)
    | where OperationName == ""Add user""
    | extend InitiatorInfo = todynamic(InitiatedBy)
    | extend TargetInfo = todynamic(TargetResources)[0]
    | extend InitiatorUserId = tostring(InitiatorInfo.user.id)
    | extend
        Status = Result,
        FailureReason = tostring(ResultSignature),
        InitiatorType = case(
            tostring(InitiatorInfo.user.userPrincipalName) has_cs ""Sync"", ""Sync Process"",
            isnotempty(InitiatorInfo.user.userPrincipalName), ""Interactive User"",
            isnotempty(InitiatorInfo.app.displayName), ""Application"",
            ""Other""
        ),
        Initiator = coalesce(
            tostring(InitiatorInfo.user.userPrincipalName),
            tostring(InitiatorInfo.app.displayName)
        ),
        InitiatorIpAddress = tostring(InitiatorInfo.user.ipAddress),
        TargetUserUPN = tostring(TargetInfo.userPrincipalName),
        TargetUserID = tostring(TargetInfo.id)
    | project AuditTimeGenerated = TimeGenerated, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetUserUPN, TargetUserID, InitiatorUserId
) on $left.UserId == $right.InitiatorUserId
//
// ----- Part 3: Output Normalization -----
// Flatten and unify column names for final output.
//
| extend TimeGenerated = AuditTimeGenerated
//
// ----- Part 4: Apply Flexible Filters -----
// Show all unless filtering is explicitly requested.
//
| where (array_length(TargetedUserUPNs) == 0 or TargetUserUPN in (TargetedUserUPNs))
| where (array_length(InitiatorUPNs) == 0 or Initiator in (InitiatorUPNs))
//
// ----- Part 5: Summarization -----
// Use arg_max to get the latest event per TargetUserID.
//
| summarize arg_max(TimeGenerated, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetUserUPN, TargetUserID, RequestId, RequestUri, IPAddress, ResponseStatusCode) by TargetUserID
//
// ----- Part 6: Final Output -----
// Clean, readable table of the most recent user creation events per user.
//
| project TimeGenerated, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetUserUPN, TargetUserID, RequestId, RequestUri, IPAddress, ResponseStatusCode
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,01,03,Identity,Identity & Credential Management,Account,Account Creation,Entra,AuditLogs,OperationName,"Add service principal
",https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Detects and tracks creation of new Azure AD service principals, providing visibility into new application and automation identities.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave these lists empty to show all results.
//
let InitiatorUPNs = dynamic([]);       // Example: dynamic([""admin@domain.com""])
let TargetedAppIds = dynamic([]);      // Example: dynamic([""00000003-0000-0000-c000-000000000000""])
// 
// ----- Part 1: Filter for ""Add service principal"" Operations -----
// Only include ""Add service principal"" events from the last 30 days.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Add service principal""
//
// ----- Part 2: Extract AppId from AdditionalDetails or modifiedProperties -----
// This block finds and extracts the AppId from AdditionalDetails, and falls back to modifiedProperties if needed.
//
| mv-apply Detail = todynamic(AdditionalDetails) on (
    where Detail.key == ""AppId""
    | project TargetSpAppId = tostring(Detail.value)
)
| extend TargetSpAppId = iff(isnotempty(TargetSpAppId), TargetSpAppId,
    extract(@""AppId"""":\s*""""([^""""]+)"""""", 1, tostring(TargetResources)))
//
// ----- Part 3: Parse Nested JSON Fields -----
// Safely parse initiator and target service principal information.
//
| extend InitiatorInfo = todynamic(InitiatedBy)
| extend TargetSpInfo = todynamic(TargetResources)[0]
//
// ----- Part 4: Enrich and Normalize Data -----
// Create clean, uniform columns for reporting and analysis.
//
| extend
    Status = Result,
    FailureReason = tostring(ResultSignature),
    InitiatorType = case(
        isnotempty(InitiatorInfo.user.userPrincipalName), ""User"",
        isnotempty(InitiatorInfo.app.displayName), ""Application"",
        tostring(Identity) has_cs ""Microsoft"", ""Microsoft Service"",
        ""Other""
    ),
    Initiator = coalesce(
        tostring(InitiatorInfo.user.userPrincipalName),
        tostring(InitiatorInfo.app.displayName),
        tostring(Identity)
    ),
    InitiatorIpAddress = tostring(InitiatorInfo.user.ipAddress),
    TargetSpName = tostring(TargetSpInfo.displayName),
    TargetSpId = tostring(TargetSpInfo.id)
//
// ----- Part 5: Apply Dynamic Filters -----
// If filter lists are empty, all records pass.
//
| where (array_length(InitiatorUPNs) == 0 or Initiator in (InitiatorUPNs))
| where (array_length(TargetedAppIds) == 0 or TargetSpAppId in (TargetedAppIds))
//
// ----- Part 6: Final Output -----
// Output a clean, deduplicated table of service principal creation events.
//
| distinct TimeGenerated, OperationName, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetSpName, TargetSpAppId, TargetSpId
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,01,04,Identity,Identity & Credential Management,Account,Account Creation,Entra,"
MicrosoftGraphActivityLogs",OperationName,"
servicePrincipals
",https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Detects creation of new service principals in Entra ID. Uses both MicrosoftGraphActivityLogs and AuditLogs for comprehensive coverage.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave empty to return all results.
//
let InitiatorUPNs = dynamic([]);       // Example: dynamic([""admin@domain.com""])
let TargetedAppIds = dynamic([]);      // Example: dynamic([""00000003-0000-0000-c000-000000000000""])
//
// ----- Part 1: Pre-filter Microsoft Graph Activity Logs -----
// Only POST requests to /servicePrincipals in the last 30 days are relevant for service principal creation.
//
MicrosoftGraphActivityLogs
| where TimeGenerated > ago(30d)
| where RequestMethod == 'POST'
| where RequestUri has '/servicePrincipals'
//
// ----- Part 2: Join with AuditLogs for ""Add service principal"" events -----
// Correlate Graph activity with audit logs by matching UserId to InitiatedBy.user.id.
//
| join kind=inner (
    AuditLogs
    | where TimeGenerated > ago(30d)
    | where OperationName == ""Add service principal""
    | where isnotempty(todynamic(InitiatedBy).user.id)
    | extend InitiatorInfo = todynamic(InitiatedBy)
    | extend TargetSpInfo = todynamic(TargetResources)[0]
    | extend InitiatingUserId = tostring(InitiatorInfo.user.id)
    // Extract AppId from AdditionalDetails if present
    | mv-apply Detail = todynamic(AdditionalDetails) on (
        where Detail.key == ""AppId""
        | project TargetSpAppId = tostring(Detail.value)
    )
    // Classify InitiatorType and Initiator
    | extend InitiatorType = case(
        isnotempty(InitiatorInfo.user.userPrincipalName), ""User"",
        isnotempty(InitiatorInfo.app.displayName), ""Application"",
        tostring(InitiatorInfo.identity) has_cs ""Microsoft"", ""Microsoft Service"",
        ""Other""
    )
    | extend Initiator = coalesce(
        tostring(InitiatorInfo.user.userPrincipalName),
        tostring(InitiatorInfo.app.displayName),
        tostring(InitiatorInfo.identity)
    )
    | extend TargetSpName = tostring(TargetSpInfo.displayName)
    | extend TargetSpId = tostring(TargetSpInfo.id)
    | extend Status = Result
    | extend FailureReason = tostring(ResultSignature)
    | project AuditTimeGenerated = TimeGenerated, OperationName, InitiatorType, Initiator, TargetSpName, TargetSpId, TargetSpAppId, Status, FailureReason, InitiatingUserId
) on $left.UserId == $right.InitiatingUserId
//
// ----- Part 3: Output Normalization -----
// Flatten and unify column names for final output.
//
| extend TimeGenerated = AuditTimeGenerated
//
// ----- Part 4: Apply Dynamic Filters -----
// Skip filtering if lists are empty.
//
| where (array_length(InitiatorUPNs) == 0 or Initiator in (InitiatorUPNs))
| where (array_length(TargetedAppIds) == 0 or TargetSpAppId in (TargetedAppIds))
//
// ----- Part 5: Final Output -----
// Clean, readable table of correlated service principal creation events.
//
| distinct TimeGenerated, OperationName, Status, FailureReason, InitiatorType, Initiator, IPAddress, RequestUri, TargetSpName, TargetSpId, TargetSpAppId
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,01,05,Identity,Identity & Credential Management,Account,Account Creation,Entra,AuditLogs,OperationName,Add application,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs, https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Detects creation of new applications in Entra ID using AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave these empty to return all results.
//
let InitiatorUPNs = dynamic([]);       // Example: dynamic([""admin@domain.com""])
let TargetedAppIds = dynamic([]);      // Example: dynamic([""00000003-0000-0000-c000-000000000000""])
//
// ----- Part 1: Control Flag -----
// Set this to 'true' to show only multi-tenant applications.
// Set to 'false' to show ALL new applications.
//
let showOnlyMultiTenant = false;
//
// ----- Part 2: Pre-filter Audit Logs -----
// Only ""Add application"" operations in the last 30 days.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Add application""
//
// ----- Part 3: Safe Parsing -----
// Expand and parse dynamic fields for property extraction.
//
| mv-expand Target = todynamic(TargetResources)
| extend Properties = todynamic(Target.modifiedProperties)
| mv-expand Property = Properties
| extend PropName = tostring(Property.displayName), PropValue = tostring(Property.newValue)
| summarize
    arg_max(TimeGenerated, *),
    MtaValue = take_anyif(PropValue, PropName == ""AvailableToOtherTenants""),
    AppIdValue = take_anyif(PropValue, PropName == ""AppId"")
    by CorrelationId, AppObjectId = tostring(Target.id)
//
// ----- Part 4: Analysis & Enrichment -----
// Derive multi-tenancy, initiator, and status details.
//
| extend
    IsMultiTenant = coalesce(tostring(todynamic(MtaValue)[0]) == 'true', false),
    InitiatorInfo = todynamic(InitiatedBy),
    TargetInfo = todynamic(Target)
| extend
    Status = Result,
    InitiatorType = case(
        isnotempty(InitiatorInfo.user.userPrincipalName), ""User"",
        isnotempty(InitiatorInfo.app.displayName), ""Application"",
        ""Other""
    ),
    Initiator = coalesce(
        tostring(InitiatorInfo.user.userPrincipalName),
        tostring(InitiatorInfo.app.displayName)
    ),
    InitiatorIpAddress = tostring(InitiatorInfo.user.ipAddress),
    TargetSpAppId = tostring(todynamic(AppIdValue)[0])
//
// ----- Part 5: Flexible Filtering -----
// Apply multi-tenant control flag and dynamic filters.
//
| where showOnlyMultiTenant == false or IsMultiTenant == true
| where (array_length(InitiatorUPNs) == 0 or Initiator in (InitiatorUPNs))
| where (array_length(TargetedAppIds) == 0 or TargetSpAppId in (TargetedAppIds))
//
// ----- Part 6: Final Output -----
// Clean, readable table of application creation events.
//
| distinct TimeGenerated, OperationName, Status, InitiatorType, Initiator, InitiatorIpAddress, IsMultiTenant, TargetSpName = tostring(TargetInfo.displayName), TargetSpAppId, TargetSpId = AppObjectId
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,01,06,Identity,Identity & Credential Management,Account,Account Creation,Entra,MicrosoftGraphActivityLogs,RequestUri,servicePrincipals,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,"https://learn.microsoft.com/en-us/graph/api/application-post-applications?view=graph-rest-1.0&tabs=http

","// Objective: Correlates MicrosoftGraphActivityLogs and AuditLogs to identify creation of new applications and service principals in Entra ID.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave empty to show all results.
//
let InitiatorUPNs = dynamic([]);       // Example: dynamic([""admin@domain.com""])
let TargetedAppIds = dynamic([]);      // Example: dynamic([""00000003-0000-0000-c000-000000000000""])
//
// ----- Part 1: Pre-filter Microsoft Graph Activity Logs -----
// Only POST requests to /servicePrincipals in the last 30 days.
//
MicrosoftGraphActivityLogs
| where TimeGenerated > ago(30d)
| where RequestMethod == 'POST'
| where RequestUri has '/servicePrincipals'
//
// ----- Part 2: Join with AuditLogs for ""Add application"" events -----
// Extracts and normalizes initiator and target details, and ensures AppId is captured from both AdditionalDetails and modifiedProperties.
//
| join kind=inner (
    AuditLogs
    | where TimeGenerated > ago(30d)
    | where OperationName == ""Add application""
    | extend InitiatorInfo = todynamic(InitiatedBy)
    | extend TargetSpInfo = todynamic(TargetResources)[0]
    | extend InitiatingUserId = tostring(InitiatorInfo.user.id)
    | mv-apply Detail = todynamic(AdditionalDetails) on (
        where Detail.key == ""AppId""
        | project TargetSpAppId = tostring(Detail.value)
    )
    | extend ModifiedProps = TargetSpInfo.modifiedProperties
    | mv-apply prop = ModifiedProps on (
        where prop.displayName == ""AppId""
        | extend AppIdFromProps = tostring(parse_json(prop.newValue)[0])
    )
    | extend TargetSpAppId = coalesce(TargetSpAppId, AppIdFromProps)
    | extend
        Status = Result,
        FailureReason = tostring(ResultSignature),
        InitiatorType = case(
            isnotempty(InitiatorInfo.user.userPrincipalName), ""User"",
            isnotempty(InitiatorInfo.app.displayName), ""Application"",
            tostring(InitiatorInfo.identity) has_cs ""Microsoft"", ""Microsoft Service"",
            ""Other""
        ),
        Initiator = coalesce(
            tostring(InitiatorInfo.user.userPrincipalName),
            tostring(InitiatorInfo.app.displayName),
            tostring(InitiatorInfo.identity)
        ),
        InitiatorIpAddress = tostring(InitiatorInfo.user.ipAddress),
        TargetSpName = tostring(TargetSpInfo.displayName),
        TargetSpId = tostring(TargetSpInfo.id)
    | project AuditTimeGenerated = TimeGenerated, OperationName, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetSpName, TargetSpAppId, TargetSpId, InitiatingUserId
) on $left.UserId == $right.InitiatingUserId
//
// ----- Part 3: Output Normalization -----
// Flatten and unify column names for final output.
//
| extend TimeGenerated = AuditTimeGenerated
//
// ----- Part 4: Apply Flexible Filters -----
// Filters only activate if input lists are not empty.
//
| where (array_length(InitiatorUPNs) == 0 or Initiator in (InitiatorUPNs))
| where (array_length(TargetedAppIds) == 0 or TargetSpAppId in (TargetedAppIds))
//
// ----- Part 5: Final Output -----
// Clean, readable table of correlated application creation events.
//
| distinct TimeGenerated, OperationName, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetSpName, TargetSpAppId, TargetSpId, RequestId, RequestUri, IPAddress, ResponseStatusCode
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,01,07,Identity,Identity & Credential Management,Account,Account Creation,Entra,AADProvisioningLogs,ProvisioningAction,Create,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-provisioning-logs#what-can-you-do-with-the-provisioning-logs,"// Objective: Surfaces user account creations from Entra ID Provisioning logs (AADProvisioningLogs).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave these empty to return all results.
//
let TargetIdentities = dynamic([]);        // Example: dynamic([""john.doe@agency.gov""])
let InitiatingApps = dynamic([]);          // Example: dynamic([""Entra ID Cloud Sync""])
//
// ----- Part 1: Pre-filter AAD Provisioning Logs -----
// Only user creation events (ProvisioningAction == ""create"") in the last 390 days.
//
AADProvisioningLogs
| where TimeGenerated > ago(30d)
| where ProvisioningAction == ""create""
//
// ----- Part 2: Exclude Skipped Results -----
// Filter out provisioning events where the result was ""Skipped"".
//
| where ResultType <> ""Skipped""
//
// ----- Part 3: Parse and Enrich Details -----
// Extract key fields for clear, actionable output.
//
| extend
    Service = tostring(parse_json(InitiatedBy).Name),
    InitiatedByApp = tostring(parse_json(ServicePrincipal).Name)
//
// ----- Part 4: Apply Dynamic Filters -----
// Only restrict if filtering values are provided.
//
| where (array_length(TargetIdentities) == 0 or TargetIdentity in (TargetIdentities))
| where (array_length(InitiatingApps) == 0 or InitiatedByApp in (InitiatingApps))
//
// ----- Part 5: Summarize to Latest Event per Correlation and Target -----
// Use arg_max to get the latest event for each CorrelationId and TargetIdentity.
//
| summarize arg_max(TimeGenerated, OperationName, ResultType, ResultSignature, ResultDescription, Service, InitiatedByApp, TargetIdentity, TargetSystem, SourceIdentity, SourceSystem, ProvisioningStatusInfo, ModifiedProperties, CorrelationId)
  by CorrelationId, TargetIdentity
//
// ----- Part 6: Final Output -----
// Distinct, readable table for review and investigation.
//
| distinct TimeGenerated, OperationName, ResultType, ResultSignature, ResultDescription, Service, InitiatedByApp, TargetIdentity, TargetSystem, SourceIdentity, SourceSystem, ProvisioningStatusInfo, ModifiedProperties, CorrelationId
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,02,08,Identity,Identity & Credential Management,Account,Account Creation,Windows,SecurityEvent,Activity,4720 - A user account was created,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4720,"// Objective: Detects on-premises user account creation events (Event ID 4720) on Windows systems using SecurityEvent.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave these empty to return all user creation events.
//
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
let Actor_SIDs = dynamic([]);         // Example: dynamic([""S-1-5-...""])
//
// ----- Part 1: Pre-filter Security Events -----
// GPO Path: Enable ""Audit User Account Management"" (Success/Failure)
//
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4720
| where Activity == ""4720 - A user account was created.""
//
// ----- Part 2: Exclude Known Service/Sync Accounts -----
// Filter out system/service and cloud sync accounts to reduce noise.
//
| where not(TargetUserName has_any ('MSOL', 'svc', '$'))
//
// ----- Part 3: Optional Filtering by Actor or Target -----
// TargetSid = SID of account being created
// SubjectUserSid = SID of actor who created the account
| where (array_length(Targeted_User_SIDs) == 0 or TargetSid in (Targeted_User_SIDs))
| where (array_length(Actor_SIDs) == 0 or SubjectUserSid in (Actor_SIDs))
//
// ----- Part 4: Enrichment -----
// Add friendly actor and IsTargetedUser flag for quick triage.
//
| extend
    Actor = SubjectUserName,
    ActorSid = SubjectUserSid,
    IsTargetedUser = TargetSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// Clean, filtered table of user creation events.
//
| distinct TimeGenerated, IsTargetedUser, Computer, TargetUserName, TargetSid, Actor, ActorSid, Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,06,09,Identity,Identity & Credential Management,Account,Account Creation,Microsoft Defender for Endpoint,DeviceEvents,ActionType,User Account Created,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDE,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-deviceevents-table,"// Objective: Detects creation of local user accounts on Windows endpoints via Microsoft Defender for Endpoint (DeviceEvents).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave empty to return all account creation events.
//
let Targeted_AccountSIDs = dynamic([]);   // e.g., [""S-1-5-21-...""]
let ActorAccounts = dynamic([]);          // e.g., [""admin"", ""ITops""]
//
// ----- Part 1: Filter DeviceEvents for Local Account Creation -----
// Excludes known system-created account like ""defaultuser1"".
//
DeviceEvents
| where TimeGenerated > ago(14d)
| where ActionType == ""UserAccountCreated""
| where AccountName != ""defaultuser1""
//
// ----- Part 2: Apply Dynamic Filters -----
// Filter on created account SID and initiating user (if needed).
//
| where (array_length(Targeted_AccountSIDs) == 0 or AccountSid in (Targeted_AccountSIDs))
| where (array_length(ActorAccounts) == 0 or InitiatingProcessAccountName in (ActorAccounts))
//
// ----- Part 3: Enrichment -----
// Rename fields and flag targeted accounts.
//
| extend
    TargetAccountName = AccountName,
    TargetAccountSid = AccountSid,
    Actor = InitiatingProcessAccountName,
    IsTargetedUser = AccountSid in (Targeted_AccountSIDs)
//
// ----- Part 4: Final Output -----
// Clean, friendly structure consistent with other queries.
//
| distinct TimeGenerated, IsTargetedUser, ActionType, ['Initiated On Device'] = DeviceName, Actor, TargetAccountName, TargetAccountSid, AccountDomain
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,07,10,Identity,Identity & Credential Management,Account,Account Creation,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,User Account Created,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-identitydirectoryevents-table,"// Objective: Surfaces user account creations detected by Microsoft Defender for Identity (IdentityDirectoryEvents).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave empty to return all directory account creation events.
//
let TargetedUPNs = dynamic([]);          // e.g., [""user1@domain.com""]
let ActorAccounts = dynamic([]);         // e.g., [""admin@domain.com""]
//
// ----- Part 1: Filter Defender for Identity Events -----
// Detect directory-based user account creation.
//
IdentityDirectoryEvents
| where TimeGenerated > ago(30d)
| where ActionType == ""User Account Created""
//
// ----- Part 2: Apply Dynamic Filters -----
// Based on target UPN and actor identity.
//
| where (array_length(TargetedUPNs) == 0 or TargetAccountUpn in (TargetedUPNs))
| where (array_length(ActorAccounts) == 0 or tostring(AdditionalFields.[""ACTOR.ACCOUNT""]) in (ActorAccounts))
//
// ----- Part 3: Final Output -----
// Friendly and enriched column names, consistent format.
//
| distinct TimeGenerated, ActionType, ['Initiated By'] = tostring(AdditionalFields.[""ACTOR.ACCOUNT""]), ['Initiated On'] = DestinationDeviceName, TargetAccountUpn, TargetAccountDisplayName
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,07,11,Identity,Identity & Credential Management,Account,Account Creation,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,Device Account Created,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-identitydirectoryevents-table,"// Objective: Surfaces device account creations detected by Microsoft Defender for Identity (IdentityDirectoryEvents).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave empty to return all device account creation events.
//
let TargetedDevices = dynamic([]);       // e.g., [""WIN-DC01"", ""SRV-APP01""]
let ActorAccounts = dynamic([]);         // e.g., [""admin@domain.com""]
//
// ----- Part 1: Filter Defender for Identity Events -----
// Detect when a device account is created in the directory.
//
IdentityDirectoryEvents
| where TimeGenerated > ago(30d)
| where ActionType == ""Device Account Created""
//
// ----- Part 2: Apply Dynamic Filters -----
// Filter on actor and target device.
//
| where (array_length(TargetedDevices) == 0 or TargetDeviceName in (TargetedDevices))
| where (array_length(ActorAccounts) == 0 or tostring(AdditionalFields.[""ACTOR.ACCOUNT""]) in (ActorAccounts))
//
// ----- Part 3: Final Output -----
// Friendly, clean column names consistent with other queries.
//
| distinct TimeGenerated, ActionType, ['Initiated By'] = tostring(AdditionalFields.[""ACTOR.ACCOUNT""]), ['Initiated On'] = DestinationDeviceName, ['Device Created'] = TargetDeviceName
| sort by TimeGenerated desc
| take 50"
EL0,01,AA,04,12,Identity,Identity & Credential Management,Account,Account Creation,Sentinel,IdentityInfo,SourceSystem,ActiveDirectory,https://learn.microsoft.com/en-us/azure/sentinel/enable-entity-behavior-analytics?tabs=azure,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-identityinfo-table,"// Objective: Extracts recent Active Directory user account creations from the hybrid IdentityInfo table in Microsoft Sentinel.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave empty to return all.
//
let srvcList = dynamic([]); // e.g., [""svc_m2131"", ""svc_backup""])
//
// ----- Part 1: Filter IdentityInfo from Active Directory -----
// Pull account creation details from hybrid environment.
//
IdentityInfo
| where TimeGenerated > ago(30d)
| where SourceSystem == ""ActiveDirectory""
| where (array_length(srvcList) == 0 or AccountName in~ (srvcList))
//
// ----- Part 2: Enrichment -----
// Extract Tier/OU and flag service accounts.
//
| extend
    OU = extract(@""OU=([^,]+)"", 1, OnPremisesDistinguishedName),
    IsServiceAccount = tostring(AccountName) startswith ""svc_""
//
// ----- Part 3: Final Output -----
// Clean, enriched output with inferred context.
//
| distinct AccountCreationTime, AccountName, AccountUPN, IsAccountEnabled, IsServiceAccount, OU, OnPremisesDistinguishedName
| sort by AccountCreationTime desc
| take 50"
EL0,01,AB,01,01,Identity,Identity & Credential Management,Manage Credential Type,Credential Management,Entra,AuditLogs,ActivityDisplayName,Authentication Methods Policy Update,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities#authentication-methods,"// Objective: Surfaces the most recent snapshot of Entra ID authentication methods policy changes via AuditLogs.
// --""Entra > Security > Authentication Methods"" blade in the Azure portal.-----
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
//Leave this list empty to return all results, or populate with UPNs to filter for changes made by specific administrators.
let TargetUsers = dynamic([]); //Example: dynamic([""michaelcrane@cyberloriangcc.onmicrosoft.com""])
//-----Part 1: Define The Methods You Want To Monitor-----
let MonitoredMethods = dynamic([
    ""Fido2"",
    ""MicrosoftAuthenticator"",
    ""Sms"",
    ""TemporaryAccessPass"",
    ""HardwareOath"",
    ""SoftwareOath"",
    ""Voice"",
    ""Email"",
    ""X509Certificate"",
    ""QRCodePin""
]);
//-----Part 2: Find the Single Most Recent Policy Update-----
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Authentication Methods Policy Update""
| top 1 by TimeGenerated desc
//-----Part 3: Expand the Policy to See All Methods-----
| mv-expand TargetResource = todynamic(TargetResources)
| mv-expand prop = TargetResource.modifiedProperties
| where prop.displayName == ""AuthenticationMethodsPolicy""
| extend Policy = parse_json(tostring(parse_json(tostring(prop.newValue))))
| mv-expand MethodConfig = Policy.authenticationMethodConfigurations
//-----Part 4: Filter for the Specific Methods You Listed-----
| project
    PolicySnapshotTime = TimeGenerated,
    MethodId = tostring(MethodConfig.id),
    State = iif(tostring(MethodConfig.state) == ""1"", ""🔴 Off"", ""🟢 On""),
    LastChangedBy = tostring(parse_json(tostring(InitiatedBy)).user.userPrincipalName)
| where MethodId in (MonitoredMethods)
//-----Part 5: Apply Targeting Logic-----
| where array_length(TargetUsers) == 0 or LastChangedBy in (TargetUsers)
//-----Part 6: Rename MethodId to UI-Friendly Names-----
| extend MethodName = case(
    MethodId == ""Fido2"", ""Passkey (FIDO2)"",
    MethodId == ""MicrosoftAuthenticator"", ""Microsoft Authenticator"",
    MethodId == ""Sms"", ""SMS"",
    MethodId == ""TemporaryAccessPass"", ""Temporary Access Pass"",
    MethodId == ""HardwareOath"", ""Hardware OATH tokens (Preview)"",
    MethodId == ""SoftwareOath"", ""Third-party software OATH tokens"",
    MethodId == ""Voice"", ""Voice call"",
    MethodId == ""Email"", ""Email OTP"",
    MethodId == ""X509Certificate"", ""Certificate-based authentication"",
    MethodId == ""QRCodePin"", ""QR code (Preview)"",
    ""Unknown Method""
)
//-----Part 7: Final, Clean Output-----
| distinct PolicySnapshotTime, MethodName, State, LastChangedBy
| sort by MethodName asc"
EL0,01,AB,01,02,Identity,Identity & Credential Management,Manage Credential Type,Credential Management,Entra,AuditLogs,LoggedByService,Self-service password management,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/authentication/howto-sspr-reporting,"// Objective: Aggregates and classifies user self-service password reset (SSPR) attempts in Entra ID using AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave list empty to return all SSPR attempts.
//
let TargetUsers = dynamic([]); // e.g., [""user1@agency.gov"", ""user2@agency.gov""]
//
// ----- Part 1: Pull SSPR Audit Logs -----
// Service = ""Self-service Password Management""
// We extract user, IP, and reason details.
//
let SSPRData = AuditLogs
| where TimeGenerated > ago(30d)
| where LoggedByService == ""Self-service Password Management""
| extend 
    User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),
    UserIp = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress),
    Reason = tostring(ResultReason),
    CorrelationId = CorrelationId
| where array_length(TargetUsers) == 0 or User in (TargetUsers);
//
// ----- Part 2: Summarize Attempts by CorrelationId -----
// Group all steps in a given SSPR attempt.
//
SSPRData
| summarize 
    AttemptReasons = make_list(Reason),
    AuthMethodMissing = countif(Reason has ""insufficient authentication methods""),
    PasswordSubmitFailures = countif(Reason has ""User submitted a new password""),
    Events = count()
    by CorrelationId, User, UserIp
//
// ----- Part 3: Classify Each SSPR Attempt -----
// Clearly label what kind of user experience was observed.
//
| extend 
    SSPR_Flow_Classification = case(
        AuthMethodMissing > 0, ""Missing MFA Setup"",
        PasswordSubmitFailures >= 3, ""Repeated Password Failures"",
        ""Normal SSPR Flow""
    )
//
// ----- Part 4: Final Output -----
// Easy-to-read table showing user attempts and challenges.
//
| project CorrelationId, User, UserIp, SSPR_Flow_Classification, AttemptReasons, AuthMethodMissing, PasswordSubmitFailures, Events
| sort by SSPR_Flow_Classification desc, User asc
| take 50"
EL0,01,AB,02,03,Identity,Identity & Credential Management,Manage Credential Type,Credential Management,Windows,Event,Source,Entra Connect Admin Actions,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/Identity/M2131-ICAM-Deployments.md,https://learn.microsoft.com/en-us/entra/identity/hybrid/connect/admin-audit-logging,"// Objective: Extracts configuration changes from Entra Connect Admin Actions in Windows Event logs for identity synchronization and admin actions.
//
// ----- Part 0: Static Mapping for Entra Connect Event IDs -----
// This maps Entra Connect event IDs to human-readable action names.
//
let EventMapping = datatable(EventID: int, EventName: string)
[
    2503, ""Add/Update/Delete Directories"",
    2504, ""Enable Express settings mode"",
    2505, ""Enable/Disable domains and OU for sync"",
    2506, ""Enable/Disable PHS Sync"",
    2507, ""Enable/Disable Sync start after install"",
    2508, ""Create ADDS account"",
    2509, ""Use Existing ADDS account"",
    2510, ""Create/Update/Delete custom sync rule"",
    2511, ""Enable/Disable Domain based filtering"",
    2512, ""Enable/Disable OU based filtering"",
    2513, ""User Sign-In method changed"",
    2514, ""Configure new ADFS farm"",
    2515, ""Enable/Disable Single sign-on"",
    2516, ""Install web application proxy server"",
    2517, ""Set Permissions"",
    2518, ""Change ADDS Connector credential"",
    2519, ""Reinitialize Entra ID Connector account password"",
    2520, ""Install ADFS Server"",
    2521, ""Set ADFS Service Account""
];
//
// ----- Part 1: Filter Entra Connect Admin Events -----
// Focus on events from the Entra Connect Admin Actions provider.
//
Event
| where TimeGenerated > ago(30d)
| where Source == ""Entra Connect Admin Actions""
//
// ----- Part 2: Parse Action Name and Join with Static Mapping -----
// Convert JSON description to extract ActionType.
// Join against the event ID mapping for readable names.
//
| extend ['Action'] = tostring(parse_json(RenderedDescription).ActionType)
| join kind=inner (EventMapping) on $left.EventID == $right.EventID
//
// ----- Part 3: Final Output -----
// Clean and enriched view of Entra Connect configuration activity.
//
| distinct TimeGenerated, Source, Computer, ['Action'], EventID, EventName, RenderedDescription
| sort by TimeGenerated desc  
| take 50"
EL0,01,AB,01,06,Identity,Identity & Credential Management,Manage Credential Type,Credential Management,Entra,AuditLogs,OperationName,Conditional access policy,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/conditional-access/troubleshoot-policy-changes-audit-log,"// Objective: Extracts configuration changes from Entra Connect Admin Actions in Windows Event logs for identity synchronization and admin actions.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave these lists empty to return all records.
// Filter by specific user UPNs or app names if needed.
//
let ActorUPNs = dynamic([]); // e.g., [""admin@agency.gov""]
let AppActors = dynamic([]); // e.g., [""Graph App""]
//
// ----- Part 1: Review Conditional Access Policy CRUD -----
// Includes Add, Update, and Delete operations for CA policies.
//
AuditLogs
| where TimeGenerated > ago(90d)
| where OperationName in (""Add conditional access policy"", ""Update conditional access policy"", ""Delete conditional access policy"")
//
// ----- Part 2: Flatten and Extract Actor Details -----
// Expand the InitiatedBy field to allow parsing of both user and app actors.
//
| mv-expand InitiatedBy
| extend 
    User = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),
    App = tostring(parse_json(tostring(InitiatedBy.app)).displayName),
    ['Actor IP'] = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)
| extend 
    User = iff(isempty(User), ""NA"", User),
    App = iff(isempty(App), ""NA"", App),
    ['Actor'] = User
//
// ----- Part 3: Apply Targeting Filters (User or App) -----
// Will only filter if a list is supplied.
//
| where (array_length(ActorUPNs) == 0 or ['Actor'] in~ (ActorUPNs))
| where (array_length(AppActors) == 0 or App in~ (AppActors))
//
// ----- Part 4: Extract Policy Display Name (if available) -----
// Safely handle Update operations where modifiedProperties exists.
//
| extend TargetPolicy = todynamic(tostring(TargetResources[0].modifiedProperties[0]))
| extend NewValue = todynamic(tostring(TargetPolicy.newValue))
//
// ----- Part 5: Final Output -----
// Clean structure showing actor, IP, app, and policy name.
//
| distinct  TimeGenerated, OperationName, ['Actor'], ['Actor IP'], App, Policy = tostring(NewValue.displayName)
| sort by TimeGenerated, Actor desc
| take 50"
EL0,01,AB,01,04,Identity,Identity & Credential Management,Manage Credential Type,Credential Management,Entra,AuditLogs,OperationName,Update user,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"// Objective: Tracks all user update operations in Entra ID using AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave these lists empty to return all results.
// Add specific UPNs to filter for certain initiators or targets.
//
let TargetedUserUPNs = dynamic([]); // Example: dynamic([""user1@domain.com"", ""user2@domain.com""])
let InitiatorUPNs = dynamic([]);    // Example: dynamic([""admin@domain.com""])
// 
// ----- Part 1: Filter for ""Update user"" Operations -----
// Only include ""Update user"" events from the last 90 days.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Update user""
//
// ----- Part 2: Parse Nested JSON Fields -----
// Safely extract initiator and target user information from nested JSON.
//
| extend InitiatorInfo = todynamic(InitiatedBy)
| extend TargetInfo = todynamic(TargetResources)[0]
//
// ----- Part 3: Enrich and Normalize Data -----
// Create clean, uniform columns for reporting and analysis.
//
| extend
    Status = Result,
    FailureReason = tostring(ResultSignature),
    InitiatorType = case(
        tostring(InitiatorInfo.user.userPrincipalName) has_cs ""Sync"", ""Sync Process"",
        isnotempty(InitiatorInfo.user.userPrincipalName), ""Interactive User"",
        isnotempty(InitiatorInfo.app.displayName), ""Application"",
        ""Other""
    ),
    Initiator = coalesce(
        tostring(InitiatorInfo.user.userPrincipalName),
        tostring(InitiatorInfo.app.displayName)
    ),
    InitiatorIpAddress = tostring(InitiatorInfo.user.ipAddress),
    TargetUserUPN = tostring(TargetInfo.userPrincipalName),
    TargetUserID = tostring(TargetInfo.id)
//
// ----- Part 4: Apply Dynamic Filters -----
// If either list is empty, all rows pass the filter.
//
| where (array_length(TargetedUserUPNs) == 0 or TargetUserUPN in (TargetedUserUPNs))
| where (array_length(InitiatorUPNs) == 0 or Initiator in (InitiatorUPNs))
//
// ----- Part 5: Final Output -----
// Output a clean, deduplicated table of user update events.
//
| distinct TimeGenerated, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetUserUPN, TargetUserID
| sort by TimeGenerated desc
| take 50"
EL0,01,AB,01,05,Identity,Identity & Credential Management,Manage Credential Type,Credential Management,Entra,MicrosoftGraphActivityLogs,"RequestUri
OperationName",users,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,"https://learn.microsoft.com/en-us/graph/api/user-post-users?view=graph-rest-1.0&tabs=http

","// Objective: Correlates MicrosoftGraphActivityLogs and AuditLogs to track user update operations in Entra ID.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all results.
//
let TargetedUserUPNs = dynamic([]);   // e.g., [""user@agency.gov""]
let InitiatorUPNs = dynamic([]);      // e.g., [""admin@agency.gov""]
//
// ----- Part 1: Pull Relevant Microsoft Graph POST Requests -----
// Filters only for Graph updates to /users.
//
MicrosoftGraphActivityLogs
| where TimeGenerated > ago(30d)
| where RequestMethod == ""POST""
| where RequestUri has ""/users""
//
// ----- Part 2: Join with Audit Logs to Enrich Actor Details -----
// Match Graph activity with AuditLogs using UserId --> InitiatedBy.user.id
//
| join kind=inner (
    AuditLogs
    | where TimeGenerated > ago(30d)
    | where OperationName == ""Update user""
    | extend InitiatorInfo = todynamic(InitiatedBy)
    | extend TargetInfo = todynamic(TargetResources)[0]
    | extend InitiatorUserId = tostring(InitiatorInfo.user.id)
    | extend
        Status = Result,
        FailureReason = tostring(ResultSignature),
        InitiatorType = case(
            tostring(InitiatorInfo.user.userPrincipalName) has_cs ""Sync"", ""Sync Process"",
            isnotempty(InitiatorInfo.user.userPrincipalName), ""Interactive User"",
            isnotempty(InitiatorInfo.app.displayName), ""Application"",
            ""Other""
        ),
        Initiator = coalesce(
            tostring(InitiatorInfo.user.userPrincipalName),
            tostring(InitiatorInfo.app.displayName)
        ),
        InitiatorIpAddress = tostring(InitiatorInfo.user.ipAddress),
        TargetUserUPN = tostring(TargetInfo.userPrincipalName),
        TargetUserID = tostring(TargetInfo.id)
    | project AuditTime = TimeGenerated, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetUserUPN, TargetUserID, InitiatorUserId
) on $left.UserId == $right.InitiatorUserId
//
// ----- Part 3: Normalize and Apply Filters -----
// Clean column names and optionally filter by initiator or target.
//
| extend TimeGenerated = AuditTime
| where (array_length(TargetedUserUPNs) == 0 or TargetUserUPN in (TargetedUserUPNs))
| where (array_length(InitiatorUPNs) == 0 or Initiator in (InitiatorUPNs))
//
// ----- Part 4: Summarize (latest update per target user) -----
// Ensures we only see the most recent change.
//
| summarize arg_max(TimeGenerated, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetUserUPN, TargetUserID, RequestId, RequestUri, IPAddress, ResponseStatusCode) by TargetUserID
//
// ----- Part 5: Final Output -----
// Readable table showing update attempts per user.
//
| distinct TimeGenerated, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetUserUPN, TargetUserID, RequestId, RequestUri, IPAddress, ResponseStatusCode
| sort by TimeGenerated desc
| take 50"
EL0,01,AC,08,01,Identity,Identity & Credential Management,Manage Credential Type, (PIV or CAC) & Derived Credentials,Microsoft Intune,IntuneAuditLogs,OperationName,Device Configuration,https://learn.microsoft.com/en-us/mem/intune/fundamentals/review-logs-using-azure-monitor#send-logs-to-azure-monitor,"
https://learn.microsoft.com/en-us/mem/intune/protect/derived-credentials","// Objective: Audits Intune device configuration changes involving Derived Credential Settings using IntuneAuditLogs.
//
//----- Audit Intune Device Configuration Changes -----
// Tracks changes to device configurations specifically involving Derived Credential Settings.
// Review regularly to ensure policy compliance and detect unauthorized modifications.
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
IntuneAuditLogs
| where TimeGenerated > ago(30d)
//----- Part 1: Filter for Device Configuration Operations -----
| where OperationName has 'DeviceConfiguration'
//----- Part 2: Filter for Derived Credential Settings Changes -----
| where parse_json(tostring(Properties)) has ""DerivedCredentialSettingsRef""
//----- Part 3: Limit Results -----
| take 50"
EL0,01,AC,01,02,Identity,Identity & Credential Management,Manage Credential Type, (PIV or CAC) & Derived Credentials,Entra,AuditLogs,OperationName,TrustedCAsfForPasswordlessAuth,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/authentication/how-to-certificate-based-authentication,"// Objective: Surfaces updates to Trusted CAs for passwordless authentication in Entra ID using AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave these lists empty to return all results.
// Add specific UPNs or tenants to filter for certain initiators or tenants.
//
let TargetTenantNames = dynamic([]); // Example: dynamic([""Contoso""])
let InitiatorUPNs = dynamic([]);     // Example: dynamic([""admin@contoso.com""])
//
// ----- Part 1: Filter for ""Set Company Information"" Operations -----
// Focus only on trusted CA updates in the last 90 days.
//
AuditLogs
| where TimeGenerated > ago(90d)
| where OperationName == ""Set Company Information""
//
// ----- Part 2: Parse Nested Fields -----
// Expand resource array and extract initiator and tenant information.
//
| mv-expand TargetResources
| extend TenantName = TargetResources.displayName
| extend TenantId = TargetResources.id
| extend InitiatedBy = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)
| extend modifiedProperties = TargetResources.modifiedProperties
| extend displayName = tostring(modifiedProperties[0].displayName),
         oldValue = tostring(modifiedProperties[0].oldValue),
         newValue = tostring(modifiedProperties[0].newValue)
//
// ----- Part 3: Filter for Trusted CA Changes -----
// Only include events related to TrustedCAsForPasswordlessAuth.
//
| where displayName == ""TrustedCAsForPasswordlessAuth""
//
// ----- Part 4: Apply Targeting Logic -----
// Filter by tenant name or initiator if lists are populated.
//
| where (array_length(TargetTenantNames) == 0 or TenantName in (TargetTenantNames))
| where (array_length(InitiatorUPNs) == 0 or InitiatedBy in (InitiatorUPNs))
//
// ----- Part 5: Final Output -----
// Show event, actor, tenant, and CA configuration values.
//
| project TimeGenerated, InitiatedBy, TenantName, TenantId, Configuration = displayName, oldValue, newValue
| take 500"
EL0,01,AC,05,03,Identity,Identity & Credential Management,Manage Credential Type, (PIV or CAC) & Derived Credentials,Microsoft Defender for Cloud Apps,CloudAppEvents,ActionType,Set Company Information,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDCA,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-cloudappevents-table,"// Objective: Surfaces changes to Trusted Certificate Authorities for passwordless authentication (e.g., PIV or CAC) using Microsoft Defender for Cloud Apps (CloudAppEvents).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave these lists empty to return all results.
// Add specific tenant IDs or initiator UPNs to filter for them.
//
let TargetTenants = dynamic([]); // Example: dynamic([""b2d7dbd9-8286-46ff-8799-177a5d2f3ec1""])
let InitiatorUPNs = dynamic([]);     // Example: dynamic([""michaelcrane@cyberloriangcc.onmicrosoft.com""])
// ----- Part 1: Filter for ""Set Company Information"" Operations -----
// Focus on ""Set Company Information"" events in the last 90 days.
CloudAppEvents
| where TimeGenerated > ago(90d)
| where ActionType == ""Set Company Information.""
| where ObjectName == ""Company information""
// ----- Part 2: Apply Pre-Filtering (Optional) -----
// Filter by tenant ID or initiator UPN if the lists from Part 0 are populated.
| where (array_length(TargetTenants) == 0 or TenantId in (TargetTenants))
| where (array_length(InitiatorUPNs) == 0 or AccountDisplayName in (InitiatorUPNs))
// ----- Part 3: Parse Nested Fields -----
// Parse the RawEventData JSON and expand the modified properties.
| extend RawEventDataParsed = todynamic(RawEventData)
| mv-expand ModifiedProperties = RawEventDataParsed.ModifiedProperties
| extend PropertyName = tostring(ModifiedProperties.Name)
| extend OldValue = tostring(ModifiedProperties.OldValue)
| extend NewValue = tostring(ModifiedProperties.NewValue)
// ----- Part 4: Filter by Property Name (Optional) -----
// You can uncomment the following line to filter for a specific property.
//| where PropertyName == ""TrustedCAsForPasswordlessAuth""
// ----- Part 5: Final Output -----
// Project the final columns for viewing the changes.
| distinct TimeGenerated, InitiatedBy = AccountDisplayName, TenantId, Configuration = PropertyName, OldValue, NewValue
| take 50
| where Configuration == ""TrustedCAsForPasswordlessAuth"" or NewValue has 'TrustedCAsForPasswordlessAuth'"
EL0,01,AC,01,04,Identity,Identity & Credential Management,Manage Credential Type, (PIV or CAC) & Derived Credentials,Entra,AuditLogs,Category,PublicKeyInfrastructure,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/authentication/how-to-certificate-based-authentication#step-1-configure-the-certificate-authorities-with-pki-based-trust-store-preview,"// Objective: Surfaces Public Key Infrastructure (PKI) events and initiators in Entra ID via AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave this list empty to return all results.
// Add specific UPNs to filter for certain initiators.
//
let InitiatorUPNs = dynamic([]); // Example: dynamic([""user@example.com"", ""admin@example.com""])
// ----- Part 1: Filter for Public Key Infrastructure Events -----
// Focus on events in the ""PublicKeyInfrastructure"" category from the last 90 days.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where Category == ""PublicKeyInfrastructure""
// ----- Part 2: Extract Initiator Information -----
// Parse the UPN of the user who initiated the action from the 'InitiatedBy' record.
//
| extend ['Initiated By'] = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)
// ----- Part 3: Apply Targeting Logic -----
// Filter by the initiator's UPN if the list from Part 0 is populated.
//
| where (array_length(InitiatorUPNs) == 0 or ['Initiated By'] in (InitiatorUPNs))
// ----- Part 4: Consolidate and View Results -----
// Get distinct records based on key fields to avoid duplicates.
// The 'TargetResources' are converted to a string for clear output.
//
| distinct TimeGenerated, Category, ActivityDisplayName, AADOperationType, ['Initiated By'], Result, tostring(TargetResources)
// ----- Part 5: Final Output -----
// Sort the results by time to see the most recent events first.
//
| sort by TimeGenerated desc
| take 50"
EL0,01,AD,01,01,Identity,Identity & Credential Management,Manage Credential Type,Cert,Entra,AuditLogs,OperationName ,Update User,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Tracks all user update operations in Entra ID involving certificate management using AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave these lists empty to return all results.
// Add specific UPNs to filter for certain initiators or targets.
//
let TargetedUserUPNs = dynamic([]); // Example: dynamic([""user1@domain.com""])
let InitiatorUPNs = dynamic([]);    // Example: dynamic([""admin@domain.com""])
//
// ----- Part 1: Filter for ""Update user"" Operations -----
// Focused only on user update events in last 30 days.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Update user""
//
// ----- Part 2: Parse Nested Fields -----
// Extract both actor and target user information.
//
| extend InitiatorInfo = todynamic(InitiatedBy)
| extend TargetInfo = todynamic(TargetResources)[0]
//
// ----- Part 3: Normalize for Readability -----
// Friendly names for reporting.
//
| extend
    Status = Result,
    FailureReason = tostring(ResultSignature),
    InitiatorType = case(
        tostring(InitiatorInfo.user.userPrincipalName) has_cs ""Sync"", ""Sync Process"",
        isnotempty(InitiatorInfo.user.userPrincipalName), ""Interactive User"",
        isnotempty(InitiatorInfo.app.displayName), ""Application"",
        ""Other""
    ),
    Initiator = coalesce(
        tostring(InitiatorInfo.user.userPrincipalName),
        tostring(InitiatorInfo.app.displayName)
    ),
    InitiatorIpAddress = tostring(InitiatorInfo.user.ipAddress),
    TargetUserUPN = tostring(TargetInfo.userPrincipalName),
    TargetUserID = tostring(TargetInfo.id)
//
// ----- Part 4: Optional Extraction of Modified Values -----
// Expand modified properties if available.
//
| extend ModifiedProps = TargetInfo.modifiedProperties
| mv-expand prop = ModifiedProps to typeof(dynamic)
| extend 
    ChangedAttribute = tostring(prop.displayName),
    OldValue = tostring(prop.oldValue),
    NewValue = tostring(prop.newValue)
//
// ----- Part 5: Apply Targeting Logic -----
// Respect input filters or show all if empty.
//
| where (array_length(TargetedUserUPNs) == 0 or TargetUserUPN in (TargetedUserUPNs))
| where (array_length(InitiatorUPNs) == 0 or Initiator in (InitiatorUPNs))
//
// ----- Part 6: Final Output -----
// Show actor, target, and what was changed.
//
| distinct TimeGenerated, Status, FailureReason, InitiatorType, Initiator, InitiatorIpAddress, TargetUserUPN, TargetUserID, ChangedAttribute, OldValue, NewValue
| sort by TimeGenerated desc
| take 50"
EL0,01,AD,07,02,Identity,Identity & Credential Management,Manage Credential Type,Cert,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,ADCS Certificate issuance,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI,https://techcommunity.microsoft.com/blog/microsoftthreatprotectionblog/securing-ad-cs-microsoft-defender-for-identitys-sensor-unveiled/3980265,"// Objective: Detects ADCS certificate issuance events from Microsoft Defender for Identity (IdentityDirectoryEvents).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave the list empty to return all CA issuances.
// Populate to focus on specific CA names.
//
let IssuingCATargets = dynamic([]); // Example: dynamic([""adcs01.domain.local"", ""ca01.gov.local""])
//
// ----- Part 1: Filter for Certificate Issuance Events -----
// Captures ADCS certificate issuance events including subject key identifier.
//
IdentityDirectoryEvents
| where TimeGenerated > ago(390d)
| where ActionType == ""ADCS Certificate issuance""
//
// ----- Part 2: Apply Targeting for Specific Issuing CAs -----
// DestinationDeviceName reflects the issuing CA.
//
| where (array_length(IssuingCATargets) == 0 or DestinationDeviceName in (IssuingCATargets))
//
// ----- Part 3: Output Cleaned and Labeled Results -----
// Review certificate issuance events by UPN and display name.
//
| distinct TimeGenerated, ['Issued-UPN'] = AccountUpn, ['Issued-DisplayName'] = AccountDisplayName, ['Issuing-CA'] = DestinationDeviceName, ['Issued SubjectKeyIdentifier'] = tostring(AdditionalFields.SubjectKeyIdentifier)
| sort by TimeGenerated desc
| take 500"
EL0,01,AE,01,01,Identity,Identity & Credential Management,Manage Credential Type,MFA,Entra,AuditLogs,OperationName,Security Info,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Detects security info registration changes (including MFA) in Entra ID using AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave this list empty to return all results,
// or populate with UPNs to narrow the scope.
//
let TargetUPNs = dynamic([]); // e.g., [""user1@agency.gov"", ""admin@agency.gov""]
//
// ----- Part 1: Filter for Security Info Registration Events -----
// Covers both self-service and admin-driven security info changes.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName has ""security info""
| where Result == ""success""
//
// ----- Part 2: Parse Initiator and Target Safely -----
// Supports both user and app-initiated events.
//
| extend Initiated = todynamic(InitiatedBy)
| extend
    Actor = coalesce(
        tostring(Initiated.user.userPrincipalName),
        tostring(Initiated.app.displayName)
    ),
    InitiatorIP = tostring(Initiated.user.ipAddress)
| extend Target = todynamic(TargetResources)[0]
| extend
    TargetUPN = tostring(Target.userPrincipalName),
    TargetUserId = tostring(Target.id)
//
// ----- Part 3: Optional Filtering -----
// Leave TargetUPNs blank to return all.
//
| where (array_length(TargetUPNs) == 0 or TargetUPN in (TargetUPNs))
//
// ----- Part 4: Summarize by User -----
// Return only the latest event per user.
//
| summarize arg_max(TimeGenerated, Actor, InitiatorIP, OperationName, ResultReason) by TargetUPN, TargetUserId
//
// ----- Part 5: Final Output -----
// Compact, deduplicated view of latest registrations.
//
| distinct TimeGenerated, Actor, InitiatorIP, TargetUPN, TargetUserId, OperationName, ResultReason
| sort by TimeGenerated desc
| take 50"
EL0,01,AF,01,01,Identity,Identity & Credential Management,Manage Credential Type,Password,Entra,AuditLogs,OperationName,Change User Password,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Detects user password changes in Entra ID using AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all events, or populate with UPNs for targeted filtering.
//
let TargetUserUPNs = dynamic([]);            // e.g., [""user1@domain.com""]
let InitiatedByUserUPNs = dynamic([]);       // e.g., [""admin@domain.com""]
//
// ----- Part 1: Filter for Password Change Events -----
// Focus on user password changes from AuditLogs.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Change user password""
//
// ----- Part 2: Parse and Classify Actors -----
// Determine if change was made by a user, sync process, or app.
//
| extend InitiatorRaw = tostring(InitiatedBy)
| extend InitiatedByUser = tostring(parse_json(InitiatorRaw).user.userPrincipalName)
| extend InitiatedByApp = tostring(parse_json(InitiatorRaw).app.displayName)
| extend InitiatorType = case(
    InitiatedByUser has ""Sync"", ""Sync"",
    isnotempty(InitiatedByUser), ""User"",
    isnotempty(InitiatedByApp), ""Application"",
    ""Unknown""
)
| extend Target = todynamic(TargetResources)[0]
| extend TargetUserUPN = tostring(Target.userPrincipalName)
//
// ----- Part 3: Apply Optional Filtering -----
// Filters on either the actor or target UPN.
//
| where (array_length(TargetUserUPNs) == 0 or TargetUserUPN in (TargetUserUPNs))
| where (array_length(InitiatedByUserUPNs) == 0 or InitiatedByUser in (InitiatedByUserUPNs))
//
// ----- Part 4: Final Output -----
// Final distinct list of password changes.
//
| distinct TimeGenerated, OperationName, ['Service'] = Identity, InitiatorType, InitiatedByUser, InitiatedByApp, TargetUserUPN, Result
| sort by TimeGenerated desc
| take 50"
EL0,01,AF,02,02,Identity,Identity & Credential Management,Manage Credential Type,Password,Windows,Event,Source,Microsoft-AzureADPasswordProtection-DCAgent,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/Identity/M2131-ICAM-Deployments.md,https://learn.microsoft.com/en-us/entra/identity/authentication/howto-password-ban-bad-on-premises-monitor,"// Objective: Surfaces Azure AD Password Protection events from on-premises DC Agent logs for password set/change outcomes.
//
// ----- Part 0: Filter Relevant Password Protection Events -----
// Only include events from the DC agent for Azure AD Password Protection
//
Event
| where Source == ""Microsoft-AzureADPasswordProtection-DCAgent""
//
// ----- Part 1: Summarize Key Outcomes Over 90-Day Buckets -----
// Count successes, rejections, audit-only failures, and errors
//
| summarize
    PasswordChangesValidated       = countif(EventID == 10014),
    PasswordSetsValidated          = countif(EventID == 10015),
    PasswordChangesRejected        = countif(EventID == 10016),
    PasswordSetsRejected           = countif(EventID == 10017),
    PasswordChangeAuditOnlyFailures= countif(EventID == 10024),
    PasswordSetAuditOnlyFailures   = countif(EventID == 10025),
    PasswordChangeErrors           = countif(EventID == 10012),
    PasswordSetErrors              = countif(EventID == 10013)
  by bin(TimeGenerated, 30d), Computer
//
// ----- Part 2: Order and Limit the Output -----
// Show the most recent 90-day buckets first, up to 1,000 rows
//
| sort by TimeGenerated desc
| take 50"
EL0,01,AF,01,03,Identity,Identity & Credential Management,Manage Credential Type,Password,Entra,AuditLogs,OperationName,Update company settings,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/authentication/howto-password-ban-bad-on-premises-operations,"// Objective: Detects company password policy changes (e.g., banned password lists) in Entra ID using AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Query for ""Update company settings"" events within the last 30 days.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Update company settings""
//
// ----- Part 1: Parse Modified Properties -----
// Deeply parse the nested JSON to extract key configuration changes:
// - Banned password policy settings
// - Lockout thresholds and durations
// - Password policy lists
//
| extend ModifiedProperties = parse_json(tostring(TargetResources[0].modifiedProperties))
| extend Settings = parse_json(tostring(ModifiedProperties[0].newValue))[0].Settings
| extend Properties = parse_json(tostring(Settings))[0].Properties
| extend
    BannedPasswordCheckOnPremisesMode = tostring(Properties[0].Value),
    EnableBannedPasswordCheckOnPremises = tostring(Properties[1].Value),
    EnableBannedPasswordCheck = tostring(Properties[2].Value),
    LockoutDurationInSeconds = tostring(Properties[3].Value),
    LockoutThreshold = tostring(Properties[4].Value),
    BannedPasswordList = tostring(Properties[5].Value)
//
// ----- Part 2: Output & Presentation -----
// Distinct list for audit trail, sorted by time.
// Displays most recent setting changes first.
//
| distinct TimeGenerated, BannedPasswordCheckOnPremisesMode, EnableBannedPasswordCheckOnPremises, EnableBannedPasswordCheck, LockoutDurationInSeconds, LockoutThreshold, BannedPasswordList
| sort by TimeGenerated desc
| take 50"
EL0,01,AF,02,04,Identity,Identity & Credential Management,Manage Credential Type,Password,Windows,SecurityEvent,Activity,4723 - An attempt was made to change an account's password,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4723,"// Objective: Detects on-premises user password change attempts and outcomes via SecurityEvent (Event ID 4723).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific accounts, add their SIDs inside the brackets.
//
let Targeted_User_SIDs = dynamic([]);  // Example: dynamic([""S-1-5-21-...""])
//
// GPO Path: To capture 4723 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Account Management > Audit User Account Management (Success and Failure)
// Note: This event fires every time a user attempts to change an account’s password.
//
// ----- Part 1: Filter SecurityEvent for password-change attempts -----
//
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4723
| where Activity == ""4723 - An attempt was made to change an account's password.""
| where AccountType == ""User""
//
// ----- Part 2: Exclude service or machine accounts by name -----
//
| where not(SubjectUserName has_any('MSOL', 'svc', '$'))
//
// ----- Part 3: Apply targeted-SID filter only if list is non-empty -----
//
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Project the fields you care about -----
//
| summarize arg_max(TimeGenerated, *) by InitiatedBy = SubjectUserName, InitiatedBySid = SubjectUserSid, SubjectLogonId, PrivilegeList, TargetAccount = TargetUserName, TargetSid = TargetUserSid, Computer, Activity
| extend IsTargetedUser = TargetSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
//
| distinct TimeGenerated, IsTargetedUser, InitiatedBy, InitiatedBySid, SubjectLogonId, PrivilegeList, TargetAccount, TargetSid, Computer, Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AF,02,05,Identity,Identity & Credential Management,Manage Credential Type,Password,Windows,SecurityEvent,Activity,4724 -  An attempt was made to reset an account's password,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4724,"// Objective: Detects attempts to reset account passwords in Windows via SecurityEvent logs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the lists empty: dynamic([])
// To target specific accounts, add their usernames inside the brackets.
//
let TargetUserNames = dynamic([]);        // Example: dynamic([""targetuser1""])
let InitiatedByUserNames = dynamic([]);   // Example: dynamic([""adminuser1""])
//
// GPO Path: To capture 4724 events, you must enable this subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Account Management > Audit User Account Management (Success and Failure)
// Note: Event 4724 is triggered whenever an attempt is made to reset an account’s password.
//
// ----- Part 1: Filter SecurityEvent for password reset attempts -----
//
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4724
| where Activity == ""4724 - An attempt was made to reset an account's password.""
//
// ----- Part 2: Optionally filter by initiator or target usernames as well as by account type -----
//
| where array_length(TargetUserNames) == 0 or TargetUserName in (TargetUserNames)
| where array_length(InitiatedByUserNames) == 0 or SubjectUserName in (InitiatedByUserNames)
| where AccountType <> ""User"" // filter account to see all or filter by machine
//
// ----- Part 3: Add Targeted Flag -----
//
| extend IsTargetedUser = TargetUserName in (TargetUserNames)
//
// ----- Part 4: Project the fields you care about -----
//
| distinct TimeGenerated, IsTargetedUser, InitiatedBy = SubjectUserName, TargetAccount = TargetUserName, Computer, Activity
//
// ----- Part 5: Sort and limit results -----
//
| sort by TimeGenerated desc
| take 50"
EL0,01,AF,07,06,Identity,Identity & Credential Management,Manage Credential Type,Password,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType ,Account Password Change,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-identitydirectoryevents-table,"// Objective: Detects account password changes in Microsoft Defender for Identity (IdentityDirectoryEvents) for Entra ID users.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all events, or populate with UPNs for targeted filtering.
//
let TargetUserUPNs = dynamic([]);   // e.g., [""user1@domain.com""]
//
// ----- Part 1: Filter for Password Change Events -----
// Query for password change events in the past 90 days.
//
IdentityDirectoryEvents
| where TimeGenerated > ago(30d)
| where ActionType == ""Account Password changed""   // Only password change actions
//
// ----- Part 2: Parse and Select Target User -----
// Extract TargetUserUPN from TargetObject.user.
//
| extend TargetUserUPN = tostring(parse_json(AdditionalFields).[""TARGET_OBJECT.USER""])
//
// ----- Part 3: Apply Optional Filtering -----
// Filters on the target user UPN.
//
| where (array_length(TargetUserUPNs) == 0 or TargetUserUPN in (TargetUserUPNs))
//
// ----- Part 4: Final Output -----
// Select distinct results, limit to 1000.
//
| distinct TimeGenerated, ActionType, TargetDeviceName, TargetUserUPN, TargetAccountUpn, TargetAccountDisplayName, tostring(AdditionalFields)
| take 50"
EL0,01,AG,01,01,Identity,Identity & Credential Management,Attributes,Establish/Manage: Organization & Groups/Roles,Entra,AuditLogs,TargetResources,Attribute Value,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Surfaces user or service principal attribute changes in Entra ID using AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
let TargetUserUPNs = dynamic([]);
let InitiatorUPNs = dynamic([]);
//-----Part1:BaseAuditLogFiltering-----
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName in (""Update user"", ""Update service principal"") or ActivityDisplayName has ""user""
//-----Part2:SafelyExpandModifiedProperties-----
| mv-expand TargetResource = TargetResources
| mv-expand ModifiedProperty = TargetResource.modifiedProperties
//-----Part3:ExtractKeyInformation-----
// Parse and safely handle all initiator forms
| extend InitiatorInfo = todynamic(InitiatedBy)
| extend
    InitiatorType = case(
        isnotempty(tostring(InitiatorInfo.user.userPrincipalName)), ""User"",
        isnotempty(tostring(InitiatorInfo.app.displayName)), ""Application"",
        tostring(Identity) has_cs ""Microsoft"", ""Microsoft Service"",
        ""Other""
    ),
    Initiator = coalesce(
        tostring(InitiatorInfo.user.userPrincipalName),
        tostring(InitiatorInfo.app.displayName),
        tostring(Identity)
    ),
    TargetUser = tostring(TargetResource.userPrincipalName),
    AttributeName = tostring(ModifiedProperty.displayName),
    NewValue = tostring(ModifiedProperty.newValue),
    OldValue = tostring(ModifiedProperty.oldValue)
//-----Part4:ApplyTargetingLogic-----
| where (array_length(TargetUserUPNs) == 0 or TargetUser in (TargetUserUPNs))
| where (array_length(InitiatorUPNs) == 0 or Initiator in (InitiatorUPNs))
//-----Part5:Final,ClearOutput-----
| distinct ChangeTime = TimeGenerated, InitiatorType, Initiator,TargetUser, AttributeName, NewValue, OldValue, Result
| sort by ChangeTime desc
| take 50"
EL0,01,AG,07,02,Identity,Identity & Credential Management,Attributes,Establish/Manage: Organization & Groups/Roles,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,ADAttributeChanges,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI,https://learn.microsoft.com/en-us/defender-for-identity/monitored-activities#monitored-user-activities-user-account-ad-attribute-changes,"// Objective: Detects directory attribute changes (e.g., password, delegation, group membership) in Microsoft Defender for Identity (IdentityDirectoryEvents).
//
//-----Part 0: Define Attribute Changes to Monitor-----
// This list tracks key AD attribute changes based on Defender for Identity action types.
let ADAttributeChanges = dynamic([
    ""Account Constrained Delegation State Changed"",
    ""Account Constrained Delegation SPNs Changed"",
    ""Account Delegation Changed"",
    ""Account Disabled Changed"",
    ""Account Expired"",
    ""Account Expiry Time Changed"",
    ""Account Locked Changed"",
    ""Account Password Changed"",
    ""Account Password Expired"",
    ""Account Password Never Expires Changed"",
    ""Account Password Not Required Changed"",
    ""Account Smartcard Required Changed"",
    ""Account Supported Encryption Types Changed"",
    ""Account Unlock changed"",
    ""Account UPN Name Changed"",
    ""Group Membership Changed"",
    ""User Mail Changed""
]);
//-----Part 1: Filter for Relevant Directory Events-----
// Find all matching attribute changes from the last 90 days.
IdentityDirectoryEvents
| where TimeGenerated > ago(90d)
| where ActionType has_any (ADAttributeChanges)
//-----Part 2: Extract Core Fields for Analysis-----
// Unify initiator and target fields, and identify the type of target (User, Device, Account, or Other).
| extend Initiator = coalesce(tostring(AdditionalFields.[""ACTOR.ACCOUNT""]), tostring(AdditionalFields.[""ACTOR.ENTITY_USER""]), Application), Target = coalesce(tostring(AdditionalFields.[""TARGET_OBJECT.USER""]), tostring(AdditionalFields.[""TARGET_OBJECT.ENTITY_USER""]), tostring(AdditionalFields.[""TARGET_OBJECT.ACCOUNT""]), TargetAccountDisplayName, TargetAccountUpn), TargetType = case(isnotempty(AdditionalFields.[""TARGET_OBJECT.USER""]), ""User"", isnotempty(AdditionalFields.[""TARGET_OBJECT.ENTITY_USER""]), ""User"", isnotempty(AdditionalFields.[""TARGET_OBJECT.ACCOUNT""]), ""Account"", isnotempty(TargetDeviceName), ""Device"", ""Other""), Device = tostring(AdditionalFields.[""TO.DEVICE""])
//-----Part 3: Final, Analyst-Friendly Output-----
// Output deduplicated, visualization-ready data.
| distinct TimeGenerated, ActionType, Initiator, Target, TargetType, Device, TargetAccountUpn, TargetAccountDisplayName, TargetDeviceName, tostring(AdditionalFields)
| sort by TimeGenerated desc
| take 500"
EL0,01,AG,06,03,Identity,Identity & Credential Management,Attributes,Establish/Manage: Organization & Groups/Roles,Microsoft Defender for Endpoint,DeviceEvents,ActionType,group,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDE,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-deviceevents-table,"// Objective: Surfaces local device group membership changes (add/remove) in Microsoft Defender for Endpoint (DeviceEvents).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----// Leave these lists empty to see all results. Populate to filter for specific initiators or groups.
let TargetInitiators = dynamic([]); // Example: [""adminuser"", ""server01$""]
let TargetGroups = dynamic([]);     // Example: [""Remote Desktop Users"", ""Administrators""]
//-----Part 1: Track Device Group Membership Activity-----
// Captures all device events where accounts are added/removed from local groups over the last 190 days.
DeviceEvents
| where TimeGenerated > ago(30d)
| where ActionType contains ""group""
//-----Part 2: Extract and Normalize Key Fields-----
// Pulls out initiator, target group, and group details for clarity and filtering.
| extend 
    Initiator = tostring(InitiatingProcessAccountName),
    InitiatorDomain = tostring(InitiatingProcessAccountDomain),
    GroupName = tostring(parse_json(AdditionalFields).GroupName),
    GroupDomain = tostring(parse_json(AdditionalFields).GroupDomainName),
    GroupSid = tostring(parse_json(AdditionalFields).GroupSid)
//-----Part 3: Apply Dynamic Filtering-----
// If TargetInitiators or TargetGroups are empty, all records are returned. Otherwise, only matching rows are shown.
| where (array_length(TargetInitiators) == 0 or Initiator in (TargetInitiators))
| where (array_length(TargetGroups) == 0 or GroupName in (TargetGroups))
//-----Part 4: Final Analyst-Friendly Output-----
// Visualization- and report-ready: one line, clean columns.
| distinct TimeGenerated, DeviceName, DeviceId, ReportId, Initiator, InitiatorDomain, ActionType, GroupName, GroupDomain, GroupSid
| sort by TimeGenerated desc
| take 500"
EL0,01,AG,02,04,Identity,Identity & Credential Management,Attributes,Establish/Manage: Organization & Groups/Roles,Windows,SecurityEvent,Activity,5137 - A directory service object was modified,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5137,"// Objective: Detects new Active Directory object creations via SecurityEvent logs (Event ID 5137) on Windows servers.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To target specific creators, object classes, or domains, fill in the lists below; leave empty for all.
let TargetUserNames = dynamic([]);      // e.g., [""dadmin"", ""svc_account""]
let TargetObjectClasses = dynamic([]);  // e.g., [""computer"", ""user"", ""group""]
let TargetDomains = dynamic([]);        // e.g., [""CONTOSO""]
//
// ----- Part 1: Filter for Directory Object Creation Events -----
// GPO Path: To capture 5137 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > DS Access > Audit Directory Service Changes (Success)
// Note: This event is generated each time an Active Directory object is created. Set SACLs on critical containers and monitor for key object classes per Microsoft recommendations.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5137
| where Activity == ""5137 - A directory service object was created.""
//
// ----- Part 2: Parse and Expand EventData -----
// Safely parse XML and extract Name/Value pairs for all EventData fields.
| extend d = parse_xml(EventData)
| extend EventDataParsed = parse_json(tostring(d.EventData))
| mv-expand DataItem = EventDataParsed.Data
| extend Name = tostring(DataItem[""@Name""]), Value = tostring(DataItem[""#text""])
//
// ----- Part 3: Summarize to One Row per Object Creation -----
// Collate initiator, domain, DN, class, and attributes per event.
| summarize 
    InitiatedBy = anyif(Value, Name == ""SubjectUserName""),
    Domain = anyif(Value, Name == ""SubjectDomainName""),
    ObjectDN = anyif(Value, Name == ""ObjectDN""),
    ObjectGUID = anyif(Value, Name == ""ObjectGUID""),
    ObjectClass = anyif(Value, Name == ""ObjectClass""),
    Attributes = make_list_if(Value, Name contains ""Attribute"")
    by TimeGenerated, Activity
//
// ----- Part 4: Analyst Filtering & Targeted Flag -----
// Return only results matching dynamic lists; leave lists empty for all.
| where (array_length(TargetUserNames) == 0 or InitiatedBy in (TargetUserNames))
| where (array_length(TargetObjectClasses) == 0 or ObjectClass in (TargetObjectClasses))
| where (array_length(TargetDomains) == 0 or Domain in (TargetDomains))
| extend IsTargetedUser = InitiatedBy in (TargetUserNames)
//
// ----- Part 5: Final Output -----
// Analyst-friendly projection; cast Attributes to string for compatibility.
| project TimeGenerated, IsTargetedUser, InitiatedBy, Domain, ObjectClass, ObjectDN, ObjectGUID, Attributes = tostring(Attributes), Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AH,01,01,Identity,Identity & Credential Management,Attributes,Manage/Track Changes in Attributes & Credentials,Entra,AuditLogs,OperationName ,Update user,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Tracks Entra ID user attribute changes (e.g., displayName, UPN) via AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To focus on specific apps, initiators, users, or attribute changes, fill in the lists below; leave empty for all.
let TargetApps = dynamic([]);    // e.g., [""MyProvisioningApp""]
let TargetUsers = dynamic([]);   // e.g., [""admin@domain.com""]
let TargetAttrs = dynamic([]);   // e.g., [""userPrincipalName"", ""displayName""]
let TargetResults = dynamic([]); // e.g., [""success"", ""failure""]
//
//-----Part 1: Filter for User Attribute Update Events-----
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Update user""
//
//-----Part 2: Expand and Extract Initiator & Changed Attributes-----
// Cleanly break out initiator (user/app/service/sync) and all changed properties.
| mv-expand TargetResource = TargetResources
| mv-expand ModifiedProperty = TargetResource.modifiedProperties
| extend
    AttributeName = tostring(ModifiedProperty.displayName),
    NewValue = tostring(ModifiedProperty.newValue),
    OldValue = tostring(ModifiedProperty.oldValue),
    InitiatedByUser = iif(tostring(InitiatedBy.user.userPrincipalName) has ""Sync"", """", tostring(InitiatedBy.user.userPrincipalName)),
    InitiatedBySync = iif(tostring(InitiatedBy.user.userPrincipalName) !has ""Sync"", """", tostring(InitiatedBy.user.userPrincipalName)),
    InitiatedByApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName),
    Service = Identity,
    TargetUser = tostring(TargetResource.userPrincipalName)
//
//-----Part 3: Analyst Filtering-----
// Only return matches for dynamic lists; leave arrays empty for all.
| where (array_length(TargetApps) == 0 or InitiatedByApp in (TargetApps))
| where (array_length(TargetUsers) == 0 or TargetUser in (TargetUsers))
| where (array_length(TargetAttrs) == 0 or AttributeName in (TargetAttrs))
| where (array_length(TargetResults) == 0 or Result in (TargetResults))
//
//-----Part 4: Final Output-----
// Analyst/visualization-ready: one line, deduped output for every attribute change.
| distinct TimeGenerated, Service, InitiatedByApp, InitiatedBySync, InitiatedByUser, TargetUser, AttributeName, OldValue, NewValue, Result
| sort by TimeGenerated desc
| take 50"
EL0,01,AH,07,02,Identity,Identity & Credential Management,Attributes,Manage/Track Changes in Attributes & Credentials,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,ADAttributeChanges,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-identitydirectoryevents-table,"// Objective: Detects attribute and credential changes in Microsoft Defender for Identity (IdentityDirectoryEvents), with dynamic filtering.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
let TargetAccounts = dynamic([]);  // e.g., [""jsmith@contoso.com""]
let TargetDevices = dynamic([]);   // e.g., [""DC01""]
let TargetActions = dynamic([]);   // e.g., [""Account Password Changed""]
let NoiseActions = dynamic([]);    // Add any non-actionable action types you want to exclude.
//
//-----Part 1: Define Attribute/Credential Changes of Interest-----
let ADAttributeChanges = dynamic([
    ""Account Constrained Delegation State Changed"",
    ""Account Constrained Delegation SPNs Changed"",
    ""Account Delegation Changed"",
    ""Account Disabled Changed"",
    ""Account Expired"",
    ""Account Expiry Time Changed"",
    ""Account Locked Changed"",
    ""Account Password Changed"",
    ""Account Password Expired"",
    ""Account Password Never Expires Changed"",
    ""Account Password Not Required Changed"",
    ""Account Smartcard Required Changed"",
    ""Account Supported Encryption Types Changed"",
    ""Account Unlock changed"",
    ""Account UPN Name Changed"",
    ""Group Membership Changed"",
    ""User Mail Changed"",
    ""User Account Created"",
    ""Computer Account Created"",
    ""Security Principal Deleted Changed"",
    ""Security Principal Display Name Changed"",
    ""Security Principal Name Changed"",
    ""Security Principal Path Changed"",
    ""Security Principal Sam Name Changed""
]);
//
//-----Part 2: Base Filtering-----
IdentityDirectoryEvents
| where TimeGenerated > ago(30d)
| where ActionType has_any (ADAttributeChanges)
| where not(ActionType in (NoiseActions))
//
//-----Part 3: Parse Analyst-Ready Fields-----
| extend AF = parse_json(AdditionalFields)
| extend
    Initiator = coalesce(tostring(AF[""ACTOR.ACCOUNT""]), tostring(AF[""ACTOR.DEVICE""]), Application),
    Target = coalesce(TargetAccountUpn, TargetAccountDisplayName, TargetDeviceName, tostring(AF[""TARGET_OBJECT.USER""]), tostring(AF[""TARGET_OBJECT.ACCOUNT""]))
//
//-----Part 4: Analyst Targeting-----
| where (array_length(TargetAccounts) == 0 or Target in (TargetAccounts))
| where (array_length(TargetActions) == 0 or ActionType in (TargetActions))
| where (array_length(TargetDevices) == 0 or TargetDeviceName in (TargetDevices))
//
//-----Part 5: Final Output-----
| distinct TimeGenerated, ActionType, Initiator, Target, TargetDeviceName, tostring(AdditionalFields)
| sort by TimeGenerated desc
| take 50
"
EL0,01,AH,02,03,Identity,Identity & Credential Management,Attributes,Manage/Track Changes in Attributes & Credentials,Windows,SecurityEvent,Activity,5136 - A directory service object was modified,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5136,"// Objective: Detects Active Directory object modifications in Windows via SecurityEvent logs (Event ID 5136).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To target specific users, object classes, or domains, fill in the lists below; leave empty for all.
let TargetUserNames = dynamic([]);      // e.g., [""dadmin"", ""svc_account""]
let TargetObjectClasses = dynamic([]);  // e.g., [""computer"", ""user"", ""group""]
let TargetDomains = dynamic([]);        // e.g., [""CONTOSO""]
//
// ----- Part 1: Filter for Directory Object Modification Events -----
// GPO Path: To capture 5136 events, enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > DS Access > Audit Directory Service Changes (Success)
// Note: This event is generated whenever an Active Directory object is modified. It records who made the change, what object, the object class, and which attributes were changed.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5136
| where Activity == ""5136 - A directory service object was modified.""
//
// ----- Part 2: Parse and Expand EventData -----
// Safely parse XML and extract Name/Value pairs for all EventData fields.
| extend d = parse_xml(EventData)
| extend EventDataParsed = parse_json(tostring(d.EventData))
| mv-expand DataItem = EventDataParsed.Data
| extend Name = tostring(DataItem[""@Name""]), Value = tostring(DataItem[""#text""])
//
// ----- Part 3: Summarize to One Row per Object Modification -----
// Collate initiator, DN, class, and attributes per event.
| summarize 
    InitiatedBy = anyif(Value, Name == ""SubjectUserName""),
    TargetUserName = anyif(Value, Name == ""ObjectDN""),
    ['Object Class'] = anyif(Value, Name == ""ObjectClass""),
    ['Attributes'] = make_list_if(Value, Name contains ""Attribute"")
    by TimeGenerated, Activity
//
// ----- Part 4: Analyst Filtering & Targeted Flag -----
// Return only results matching dynamic lists; leave lists empty for all.
| where (array_length(TargetUserNames) == 0 or InitiatedBy in (TargetUserNames))
| where (array_length(TargetObjectClasses) == 0 or ['Object Class'] in (TargetObjectClasses))
| where (array_length(TargetDomains) == 0 or TargetUserName has_any (TargetDomains))
| extend IsTargetedUser = InitiatedBy in (TargetUserNames)
//
// ----- Part 5: Final Output -----
// Analyst-friendly projection.
| project TimeGenerated, IsTargetedUser, InitiatedBy, TargetUserName, ['Object Class'], Attributes = tostring(['Attributes']), Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AH,06,04,Identity,Identity & Credential Management,Attributes,Manage/Track Changes in Attributes & Credentials,Microsoft Defender for Endpoint,DeviceEvents,ActionType,user,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDE,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-deviceevents-table,"// Objective: Surfaces user-related local group or account changes in Microsoft Defender for Endpoint (DeviceEvents).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To focus on specific users, devices, domains, or groups, fill in the lists below; leave empty for all.
let TargetUsers = dynamic([]);        // e.g., [""admin"", ""svc_account""]
let TargetDevices = dynamic([]);      // e.g., [""SERVER01""]
let TargetDomains = dynamic([]);      // e.g., [""CONTOSO""]
let TargetGroups = dynamic([]);       // e.g., [""Remote Desktop Users""]
//
//-----Part 1: Filter for User-related Device Events-----
DeviceEvents
| where TimeGenerated > ago(30d)
| where ActionType contains ""user""
//
//-----Part 2: Expand Group Fields from AdditionalFields-----
| extend AF = parse_json(AdditionalFields)
| extend
    GroupName = tostring(AF[""GroupName""]),
    GroupDomainName = tostring(AF[""GroupDomainName""]),
    GroupSid = tostring(AF[""GroupSid""])
//
//-----Part 3: Analyst Filtering-----
// Only return records matching lists above. Leave arrays empty to show all.
| where (array_length(TargetUsers) == 0 or InitiatingProcessAccountName in (TargetUsers) or AccountName in (TargetUsers))
| where (array_length(TargetDevices) == 0 or DeviceName in (TargetDevices))
| where (array_length(TargetDomains) == 0 or AccountDomain in (TargetDomains))
| where (array_length(TargetGroups) == 0 or GroupName in (TargetGroups))
//
//-----Part 4: Final Output-----
// Clean, deduped, and dashboard-ready fields with key group data exposed.
| distinct TimeGenerated, ActionType, ['Initiated By'] = InitiatingProcessAccountName, DeviceName, AccountDomain, AccountName, GroupDomainName, GroupName, GroupSid, tostring(AdditionalFields)
| sort by TimeGenerated desc
| take 50
"
EL0,01,AH,02,05,Identity,Identity & Credential Management,Attributes,Manage/Track Changes in Attributes & Credentials,Windows,SecurityEvent,Activity,4738 - A user account was changed,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4738,"// Objective: Detects changes to user accounts (attributes, control values) in Windows via SecurityEvent logs (Event ID 4738).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// List usernames to filter for specific changed accounts or initiators. Leave empty for all.
let TargetUsers = dynamic([]);        // e.g., [""jdoe""]
let InitiatorUsers = dynamic([]);     // e.g., [""admin""]
//
// ----- Part 1: Filter for 4738 Events -----
// GPO Path: To capture 4738 events, enable:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Account Management > Audit User Account Management (Success)
// Note: 4738 logs the initiator, target, and key account attributes. No parsing required if fields are top-level.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4738
| where Activity == ""4738 - A user account was changed.""
//
// ----- Part 2: Analyst Filtering -----
// Filter by target user (account changed) and initiator (who made the change), if lists populated.
| where (array_length(TargetUsers) == 0 or TargetUserName in (TargetUsers))
| where (array_length(InitiatorUsers) == 0 or SubjectUserName in (InitiatorUsers))
| extend IsTargetedUser = TargetUserName in (TargetUsers)
//
// ----- Part 3: Final Output -----
// Shows: who made the change, which account, and what was changed.
| project TimeGenerated, IsTargetedUser, ['Initiated By'] = SubjectUserName, InitiatorDomain = SubjectDomainName, TargetUserName, TargetDomain = TargetDomainName, PasswordLastSet, OldUacValue, NewUacValue, UserAccountControl, Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AI,02,01,Identity,Identity & Credential Management,Track Usage,Credential Usage,Windows,SecurityEvent,Activity,4768 - A Kerberos authentication ticket (TGT) was requested,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4768,"// Objective: Detects Kerberos TGT requests (including certificate-based auth) in Windows (SecurityEvent Event ID 4768), useful for credential usage monitoring.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Adjust arrays below to focus on specific users or certificate issuers; leave empty for all.
let TargetUsers = dynamic([]);            // e.g., [""jsmith""]
let TargetCertIssuers = dynamic([]);      // e.g., [""DOD CA-63""]
//
// ----- Part 1: Filter and Parse 4768 Events -----
// GPO Path: To capture 4768 events (Kerberos TGT requests), enable on all domain controllers:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Account Logon > Audit Kerberos Authentication Service (Success, Failure)
// Note: 4768 logs every TGT request (success/failure). Critical for tracking both human and machine Kerberos usage and PKINIT (certificate-based) auth.
SecurityEvent
| where TimeGenerated >= ago(14d)
| where EventID == 4768
| where Activity == ""4768 - A Kerberos authentication ticket (TGT) was requested.""
| extend d = parse_xml(EventData)
| extend EventDataParsed = parse_json(tostring(d.EventData))
| mv-expand DataItem = EventDataParsed.Data
| extend Name = tostring(DataItem[""@Name""]), Value = tostring(DataItem[""#text""])
//
// ----- Part 2: Summarize/Group by Ticket Request -----
// Extract key certificate and user fields for each event.
| summarize 
    User = anyif(Value, Name == ""TargetUserName""),
    CertIssuerName = anyif(Value, Name == ""CertIssuerName""), 
    CertSerialNumber = anyif(Value, Name == ""CertSerialNumber""), 
    CertThumbprint = anyif(Value, Name == ""CertThumbprint"") 
    by TimeGenerated, Activity
//
// ----- Part 3: Analyst Filtering -----
// Only show records with all PKINIT fields (issuer, serial, thumbprint).
| where isnotempty(CertIssuerName) and isnotempty(CertSerialNumber) and isnotempty(CertThumbprint)
| where (array_length(TargetUsers) == 0 or User in (TargetUsers))
| where (array_length(TargetCertIssuers) == 0 or CertIssuerName in (TargetCertIssuers))
//
// ----- Part 4: Exclude Computer Accounts by Default -----
// (Comment out to include machine TGT requests as well.)
| where User !contains ""$""
| extend IsTargetedUser = User in (TargetUsers)
//
// ----- Part 5: Final Output -----
// Analyst-focused projection, with IsTargetedUser flag.
| project TimeGenerated, IsTargetedUser, User, CertIssuerName, CertSerialNumber, CertThumbprint, Activity
| sort by TimeGenerated desc
| take 100"
EL0,01,AI,01,02,Identity,Identity & Credential Management,Track Usage,Credential Usage,Entra,SigninLogs,AuthenticationDetails,AuthenticationDetails,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-sign-in-log-activity-details#authentication-details,"
// Objective: Tracks which authentication methods were used for interactive Entra ID sign-ins via SigninLogs.
// Entra ID SigninLogs: Track which authentication methods were used for interactive user sign-ins (MFA, FIDO2, passwordless, etc.).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Set arrays to filter for specific users or auth methods; leave empty for all.
let TargetUsers = dynamic([]);            // e.g., [""alice@contoso.com""]
let TargetAuthMethods = dynamic([]);      // e.g., [""Password"", ""FIDO2""]
//
//-----Part 1: Filter and Parse Authentication Details-----
SigninLogs
| where TimeGenerated > ago(30d)
| mv-expand AuthenticationDetail = todynamic(AuthenticationDetails)
| extend
    AuthMethod = tostring(AuthenticationDetail.authenticationMethod),
    AuthRequirement = tostring(AuthenticationDetail.authenticationRequirement),
    AuthResult = tostring(AuthenticationDetail.resultDetail)
| where AuthMethod <> ""Previously satisfied""
| where isnotempty(AuthMethod)
//
//-----Part 2: Analyst Filtering-----
| where (array_length(TargetUsers) == 0 or UserPrincipalName in (TargetUsers))
| where (array_length(TargetAuthMethods) == 0 or AuthMethod in (TargetAuthMethods))
//
//-----Part 3: Final Output-----
// Grouped by sign-in time, method, user, app; ready for review or workbook pivots.
| summarize SigninCount = count() by TimeGenerated, UserPrincipalName, AppDisplayName, AuthMethod, Category
| sort by TimeGenerated desc
| take 50"
EL0,01,AI,01,03,Identity,Identity & Credential Management,Track Usage,Credential Usage,Entra,AADNonInteractiveUserSignInLogs,AuthenticationDetails,AuthenticationDetails,"https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs

https://github.com/Cyberlorians/M-21-31/blob/main/EL0/Identity/M2131-ICAM-Deployments.md",https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-noninteractive-sign-ins,"// Objective: Tracks authentication method usage for non-interactive Entra ID sign-ins using AADNonInteractiveUserSignInLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
let TargetUPNs = dynamic([]);  // e.g., [""svc_backup@domain.com"", ""svc_graph@domain.com""]
// ----- Part 1: Filter Non-Interactive Sign-ins (Client/Service Auth) -----
AADNonInteractiveUserSignInLogs
| where TimeGenerated > ago(30d)
| where array_length(TargetUPNs) == 0 or UserPrincipalName in (TargetUPNs)
// ----- Part 2: Expand Authentication Steps -----
| mv-expand AuthStep = todynamic(AuthenticationDetails)
| extend 
    AuthMethod = tostring(AuthStep.authenticationMethod),
    AuthStepTime = tostring(AuthStep.authenticationStepDateTime),
    AuthRequirement = tostring(AuthStep.authenticationStepRequirement),
    AuthResultDetail = tostring(AuthStep.authenticationStepResultDetail),
    Succeeded = tostring(AuthStep.succeeded)
// ----- Part 3: Enrich with Location, Device, and Token Info -----
| extend DeviceInfo = parse_json(DeviceDetail)
| extend LocationInfo = parse_json(LocationDetails)
| extend TokenDetails = parse_json(TokenProtectionStatusDetails)
| extend CAStatus = tostring(ConditionalAccessStatus)
| extend ClientType = tostring(ClientAppUsed)
| extend IP = tostring(IPAddress)
| extend DeviceOS = tostring(DeviceInfo.operatingSystem)
| extend Geo = strcat(tostring(LocationInfo.city), "", "", tostring(LocationInfo.state))
| extend SessionStatus = tostring(TokenDetails.signInSessionStatus)
// ----- Part 4: Filter Out Noise (Optional) -----
| where AuthMethod != ""Previously satisfied""
| where isnotempty(AppDisplayName)
// ----- Part 5: Final Output -----
| project TimeGenerated, UserPrincipalName, AppDisplayName, ClientType, AuthMethod, AuthRequirement, AuthResultDetail, Succeeded, AuthStepTime, DeviceOS, Geo, IP, CAStatus, SessionStatus
| sort by TimeGenerated desc
| take 50"
EL0,01,AI,01,04,Identity,Identity & Credential Management,Track Usage,Credential Usage,Entra,AADServicePrincipalSignInLogs,OperationName ,Sign-in activity,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-service-principal-sign-ins,"// Objective: Summarizes Entra ID service principal sign-in activity using AADServicePrincipalSignInLogs.
// - Portal: Entra admin center > Monitoring > Service principal sign-in logs
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
let TargetServicePrincipals = dynamic([]);  // e.g., [""TEAMSforRhett""]
let TargetAppIds = dynamic([]);             // e.g., [""45936e86-569d-47fa-9f6b-de1a80576546""]
let TargetResults = dynamic([]);            // e.g., [""0""] for success, ""7000222"" for failure
//
//-----Part 1: Filter for SP Sign-In Activity-----
AADServicePrincipalSignInLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Sign-in activity""
//
//-----Part 2: Analyst Filtering-----
| where (array_length(TargetServicePrincipals) == 0 or ServicePrincipalName in (TargetServicePrincipals))
| where (array_length(TargetAppIds) == 0 or AppId in (TargetAppIds))
| where (array_length(TargetResults) == 0 or ResultType in (TargetResults))
//
//-----Part 3: Summarize for Dashboard/Export-----
// Include ResultDescription for the success/failure reason.
| summarize SigninCount = count() by TimeGenerated, ServicePrincipalName, AppId, ResultType, ResultSignature, ResultDescription
| sort by TimeGenerated desc
| take 50"
EL0,01,AI,01,05,Identity,Identity & Credential Management,Track Usage,Credential Usage,Entra,ManagedIdentitySigninlogs,OperationName ,Sign-in activity,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-managed-identity-sign-ins,"// Objective: Summarizes managed identity sign-in activity in Entra ID via AADManagedIdentitySignInLogs.
// - Portal: Entra admin center > Monitoring > Managed identity sign-in logs
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
let TargetManagedIdentities = dynamic([]);   // e.g., [""RCCE-SVR19-1""]
let TargetAppIds = dynamic([]);              // e.g., [""14a9b473-e9ba-43fb-b141-023182cc87d7""]
let TargetResults = dynamic([]);             // e.g., [""0""]
//
//-----Part 1: Filter for Managed Identity Sign-In Activity-----
AADManagedIdentitySignInLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Sign-in activity""
//
//-----Part 2: Analyst Filtering-----
| where (array_length(TargetManagedIdentities) == 0 or ServicePrincipalName in (TargetManagedIdentities))
| where (array_length(TargetAppIds) == 0 or AppId in (TargetAppIds))
| where (array_length(TargetResults) == 0 or ResultType in (TargetResults))
//
//-----Part 3: Summarize for Dashboard/Export-----
// Include ResultDescription for the human-readable outcome; ResourceDisplayName for context.
| summarize SigninCount = count() by TimeGenerated, ServicePrincipalName, AppId, ResourceDisplayName, ResultType, ResultSignature, ResultDescription
| sort by TimeGenerated desc
| take 50"
EL0,01,AI,01,06,Identity,Identity & Credential Management,Track Usage,Credential Usage,Entra,ADFSSignInLogs,OperationName ,Sign-in activity,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/troubleshoot/entra/entra-id/ad-dmn-services/understand-ad-fs-sign-in-events-azure-ad-connect-health,"// Objective: Tracks AD FS sign-in activity for Entra ID via ADFSSignInLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Set arrays to filter for specific users or resource identities; leave empty for all.
let ResourceIdentities = dynamic([]);    // e.g., [""00000003-0000-0000-c000-000000000000""]
let TargetUsers = dynamic([]);           // e.g., [""user@domain.com""]
//
//-----Part 1: Filter for AD FS Sign-In Activity-----
ADFSSignInLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Sign-in activity""
| where (array_length(TargetUsers) == 0 or UserPrincipalName in (TargetUsers))
| where (array_length(ResourceIdentities) == 0 or ResourceIdentity in (ResourceIdentities))
//
//-----Part 2: Summarize for Dashboard-----
| summarize SigninCount = count() by TimeGenerated, UserPrincipalName, ResourceIdentity, Requirement
| sort by TimeGenerated desc
| take 50"
EL0,01,AI,01,07,Identity,Identity & Credential Management,Track Usage,Credential Usage,Entra,AADUserRiskEvents,OperationName,User Risk Detection,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/id-protection/howto-identity-protection-investigate-risk,"// Objective: Correlates risky user detections to Entra ID sign-ins using AADUserRiskEvents and SigninLogs, with detection lag and targeting.
// - Portal: Entra admin center > Identity Protection > Risky users & sign-ins
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Set arrays to filter for specific users, apps, or risk event types; leave empty for all.
let TargetUsers = dynamic([]);             // e.g., [""user@domain.com""]
let TargetApps = dynamic([]);              // e.g., [""Microsoft Teams Web Client""]
let TargetRiskTypes = dynamic([]);         // e.g., [""unfamiliarFeatures""]
//
//-----Part 1: Build a sign-in table with risk events-----
// Only keep sign-ins with a risk event type.
let Signin = 
SigninLogs
| where TimeGenerated > ago(30d)
| extend SigninTime = TimeGenerated
| where RiskEventTypes_V2 != ""[]"";
//
//-----Part 2: Filter for User Risk Events and Join to Sign-Ins-----
AADUserRiskEvents
| where TimeGenerated > ago(90d)
| where OperationName == ""User Risk Detection""
| join kind=inner Signin on CorrelationId
//
//-----Part 3: Analyst Filtering-----
// Return only results matching dynamic arrays; leave arrays empty to include all.
| where (array_length(TargetUsers) == 0 or UserPrincipalName in (TargetUsers))
| where (array_length(TargetApps) == 0 or AppDisplayName in (TargetApps))
| where (array_length(TargetRiskTypes) == 0 or RiskEventType in (TargetRiskTypes))
//
//-----Part 4: Calculate Detection Lag and Project Key Fields-----
| extend RiskTime = TimeGenerated
| extend TimeDelta = abs(SigninTime - RiskTime)
| project TimeGenerated, UserPrincipalName, AppDisplayName, DetectionTimingType, SigninTime, RiskTime, TimeDelta, RiskEventType, RiskLevelDuringSignIn, Source, RiskDetail, RiskState, AuthenticationDetails
//
//-----Part 5: Analyst Filtering-----
// Exclude remediated/dismissed risks by default; comment out to show all states.
| where RiskState <> ""remediated""
| where RiskState <> ""dismissed""
| sort by TimeGenerated desc
| take 50"
EL0,01,AI,01,08,Identity,Identity & Credential Management,Track Usage,Credential Usage,Entra,AADRiskyUsers,RiskState,dismissed,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/id-protection/howto-identity-protection-investigate-risk,"// Objective: Summarizes dismissed risky Entra ID users with context from AADRiskyUsers and risk event joins.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
let TargetUsers = dynamic([]);        // e.g., [""user@domain.com""]
let TargetLocations = dynamic([]);    // e.g., [""US"", ""Europe""]
//
//-----Part 1: Build joined risk event table from sign-ins and user risk detections-----
let riskyevent =
SigninLogs
| where TimeGenerated > ago(30d)
| extend SigninTime = TimeGenerated
| where RiskEventTypes_V2 != ""[]""
| join kind=inner (
    AADUserRiskEvents
    | where TimeGenerated > ago(30d)
    | extend RiskTime = TimeGenerated
) on CorrelationId
| project UserPrincipalName, DetectionTimingType, RiskLevelDuringSignIn, Location, IPAddress, AuthenticationDetails;
//
//-----Part 2: Latest Risky User State by User (grab dismissal time)-----
AADRiskyUsers
| summarize arg_max(TimeGenerated, *) by UserPrincipalName
//
//-----Part 3: Join, filter, and summarize for dashboards-----
// Now includes the timestamp of the dismissal (TimeGenerated from AADRiskyUsers).
| join kind=inner riskyevent on UserPrincipalName
| where RiskState contains ""dismissed""
| where (array_length(TargetUsers) == 0 or UserPrincipalName in (TargetUsers))
| where (array_length(TargetLocations) == 0 or Location in (TargetLocations))
| summarize DismissedTime = arg_max(TimeGenerated, RiskState), 
            RiskEventCount = count() 
            by UserPrincipalName, RiskState, DetectionTimingType, RiskLevelDuringSignIn, Location
| sort by DismissedTime desc
| take 50"
EL0,01,AI,01,09,Identity,Identity & Credential Management,Track Usage,Credential Usage,Entra,AADServicePrincipalRiskEvents,Type,AADServicePrincipalRiskEvents,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/id-protection/howto-identity-protection-investigate-risk,"// Objective: Correlates risky Entra ID service principal sign-ins with risk detections using AADServicePrincipalRiskEvents and AADServicePrincipalSignInLogs.
// - Portal: Entra admin center > Identity Protection > Risky service principals & sign-ins
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Set arrays to filter for specific apps or risk types; leave empty for all.
let TargetApps = dynamic([]);              // e.g., [""MyAppServicePrincipal""]
let TargetRiskTypes = dynamic([]);         // e.g., [""unfamiliarFeatures""]
//
//-----Part 1: Build a SP sign-in table-----
let spsignin =
AADServicePrincipalSignInLogs
| where TimeGenerated > ago(30d)
| where (array_length(TargetApps) == 0 or ServicePrincipalName in (TargetApps))
| extend SigninTime = TimeGenerated;
//
//-----Part 2: Join SP Risk Events to Sign-ins-----
AADServicePrincipalRiskEvents
| where TimeGenerated > ago(30d)
| where (array_length(TargetRiskTypes) == 0 or RiskEventType in (TargetRiskTypes))
| join kind=inner spsignin on AppId
//
//-----Part 3: Calculate detection lag and project key columns-----
| extend RiskTime = TimeGenerated
| extend TimeDelta = abs(SigninTime - RiskTime)
| project TimeGenerated, ServicePrincipalName, DetectionTimingType, SigninTime, RiskTime, TimeDelta, RiskEventType, Source, RiskDetail, RiskState, ConditionalAccessPolicies
//
//-----Part 4: Analyst Filtering-----
// By default, exclude remediated/dismissed risks; comment out to show all.
| where RiskState <> ""remediated""
| where RiskState <> ""dismissed""
| sort by TimeGenerated desc
| take 50"
EL0,01,AI,01,10,Identity,Identity & Credential Management,Track Usage,Credential Usage,Entra,AADRiskyServicePrincipals,RiskState,dismissed,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/id-protection/howto-identity-protection-investigate-risk,"// Objective: Summarizes dismissed risky service principals in Entra ID, joining AADRiskyServicePrincipals, risk events, and sign-ins for full context.
// - Portal: Entra admin center > Identity Protection > Risky Service Principals
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Set arrays to filter for specific SPNs or risk types; leave empty for all.
let TargetAppIds = dynamic([]);              // e.g., [""00000003-0000-0000-c000-000000000000""]
let TargetRiskTypes = dynamic([]);           // e.g., [""unfamiliarFeatures""]
//
//-----Part 1: Build SP sign-in and risk event join-----
// Only keep SP sign-ins with a risk event type, join to risk events.
let spsignin =
AADServicePrincipalSignInLogs
| where TimeGenerated > ago(30d)
| where (array_length(TargetAppIds) == 0 or AppId in (TargetAppIds))
| extend SigninTime = TimeGenerated
| join kind=inner (
    AADServicePrincipalRiskEvents
    | where Type == 'AADServicePrincipalRiskEvents'
    | where TimeGenerated > ago(30d)
    | where (array_length(TargetRiskTypes) == 0 or RiskEventType in (TargetRiskTypes))
) on AppId;
//
//-----Part 2: Join to latest dismissed/ remediated risky SPs (arg_max)-----
AADRiskyServicePrincipals
| join kind=inner spsignin on AppId
| summarize arg_max(TimeGenerated, *) by AppId
| where RiskState contains 'dismissed'      // Only show dismissed/ remediated. Remove/comment for all states.
//
//-----Part 3: Final output-----
// One row per dismissed SP, showing latest dismissal and risk context.
| distinct TimeGenerated, AppId, ServicePrincipalName, DetectionTimingType, SigninTime, RiskEventType, RiskLevel, Source, RiskDetail, RiskState, ConditionalAccessPolicies
| sort by TimeGenerated desc
| take 50"
EL0,01,AI,07,11,Identity,Identity & Credential Management,Track Usage,Credential Usage,Microsoft Defender for Identity,IdentityLogonEvents,LogonType,Login:login,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-identitylogonevents-table,"// Objective: Summarizes logon activity (success/failure) by account in Microsoft Defender for Identity (IdentityLogonEvents), with cloud and authentication context.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
let TargetAccounts = dynamic([]);     // e.g., [""svc_account"", ""user1""]
//
//-----Part 1: Filter for logons by targeted accounts-----
IdentityLogonEvents
| where TimeGenerated > ago(30d)
| where LogonType == ""Login:login""
| where (array_length(TargetAccounts) == 0 or AccountName in~ (TargetAccounts))
| extend AF = parse_json(AdditionalFields)
| extend CloudService = tostring(AF['TO.CLOUD_SERVICE']), 
         PassThroughAuth = tostring(AF['Pass-through authentication'])
//
//-----Part 2: Summarize logon activity and outcomes-----
| summarize 
    TotalEvents = count(),
    FailedLogons = countif(ActionType =~ ""LogonFailed""),
    SuccessfulLogons = countif(ActionType =~ ""LogonSuccess""),
    DistinctCloudServices = make_set(CloudService, 5),
    DistinctIP = make_set(IPAddress, 5),
    LastLogonTime = arg_max(TimeGenerated, AccountUpn, Application, OSPlatform, Location, ISP)
    by AccountName, AccountDomain
| distinct AccountName, AccountDomain, AccountUpn, Application, OSPlatform, Location, ISP, 
          TotalEvents, SuccessfulLogons, FailedLogons, tostring(DistinctCloudServices), tostring(DistinctIP), LastLogonTime
| sort by TotalEvents desc
| take 50"
EL0,01,AJ,01,01,Identity,Identity & Credential Management,Account,Account Deletion,Entra,AuditLogs,OperationName ,Delete user,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Detects deleted Entra ID user accounts using AuditLogs, with initiator and target context.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Set TargetUsers to a string fragment (e.g., ""jdoe"", ""gmail.com""); leave blank for all. InitiatorUPNs can restrict to certain actors.
let TargetUsers = ("""");    // e.g., ""jdoe"" or ""onmicrosoft.com""
let InitiatorUPNs = dynamic([]);  // e.g., [""admin@contoso.com""]
//
//-----Part 1: Base Filtering-----
// Only include 'Delete user' operations from the last 30 days.
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Delete user""
//
//-----Part 2: Parse and Classify Initiator Context-----
// Expands InitiatedBy to handle users, apps, and sync types.
| extend InitiatedByUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)
| extend InitiatedByApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)
| extend InitiatorType = case(
    isnotempty(InitiatedByUser) and tolower(InitiatedByUser) has ""sync"", ""Sync"",
    isnotempty(InitiatedByApp) and tolower(InitiatedByApp) has ""sync"", ""Sync"",
    isnotempty(InitiatedByUser), ""User"",
    isnotempty(InitiatedByApp), ""Application"",
    ""Unknown""
)
//
//-----Part 3: Parse Target Details-----
// Pulls UPN and object ID for deleted user from nested JSON.
| extend TargetResource = parse_json(tostring(TargetResources))[0]
| extend TargetUserUPN = tostring(TargetResource.userPrincipalName)
| extend TargetObjectId = tostring(TargetResource.id)
//
//-----Part 4: Analyst Filtering-----
// Supports substring match on TargetUserUPN and explicit initiator filter.
| where (TargetUsers == """" or TargetUserUPN contains TargetUsers)
| where (array_length(InitiatorUPNs) == 0 or InitiatedByUser in (InitiatorUPNs))
//
//-----Part 5: Final Output-----
// Shows essential fields for review, one row per event.
| distinct TimeGenerated, OperationName, Service = Identity, InitiatorType, InitiatedByUser, InitiatedByApp, Result, TargetUserUPN, TargetObjectId
| sort by TimeGenerated desc
| take 50"
EL0,01,AJ,01,02,Identity,Identity & Credential Management,Account,Account Deletion,Entra,MicrosoftGraphActivityLogs,RequestMethod,DELETE,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/graph/api/resources/users,"// Objective: Detects Entra ID user deletions via MicrosoftGraphActivityLogs, correlated with AuditLogs for full initiator and target details.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Set TargetUser to a string fragment (e.g., ""mcrane86""); leave blank for all. InitiatorUPNs can restrict to certain actors.
let TargetUser = """"; // e.g., ""mcrane86""
let InitiatorUPNs = dynamic([]); // e.g., [""admin@contoso.com""]
//
//-----Part 1: Filter Graph POSTs to user endpoints-----
// Only show deletes via Graph POST on /users (v1.0 or beta)
MicrosoftGraphActivityLogs
| where TimeGenerated > ago(30d)
| where RequestMethod == ""POST""
| where RequestUri has ""/users""
//
//-----Part 2: Join with AuditLogs for initiator/target context-----
// Adds who performed the delete and on whom.
| join kind=inner (
    AuditLogs
    | where OperationName == ""Delete user""
    | extend InitiatedByUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)
    | extend InitiatedByApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)
    | extend InitiatorType = case(
        isnotempty(InitiatedByUser) and tolower(InitiatedByUser) has ""sync"", ""Sync"",
        isnotempty(InitiatedByApp) and tolower(InitiatedByApp) has ""sync"", ""Sync"",
        isnotempty(InitiatedByUser), ""User"",
        isnotempty(InitiatedByApp), ""Application"",
        ""Unknown""
    )
    | extend TargetResource = parse_json(tostring(TargetResources))[0]
    | extend TargetUserUPN = tostring(TargetResource.userPrincipalName)
    | extend TargetObjectId = tostring(TargetResource.id)
) on $left.UserId == $right.InitiatedByUser
//
//-----Part 3: Analyst Filtering-----
// Filters for user UPN fragment (contains), or a specific set of initiator UPNs.
| where (TargetUser == """" or TargetUserUPN contains TargetUser)
| where (array_length(InitiatorUPNs) == 0 or InitiatedByUser in (InitiatorUPNs))
//
//-----Part 4: Summarize to deduplicate (latest delete per user/endpoint)-----
// This prevents multiple noisy rows per user/endpoint. Remove or change grouping to suit your needs.
| summarize arg_max(ActivityDateTime, Service=Identity, InitiatorType, InitiatedByUser, InitiatedByApp, OperationName, Result, TargetObjectId) by TargetUserUPN, RequestUri
//
//-----Part 5: Final Output-----
// Columns chosen for clarity and review.
| project ActivityDateTime, Service, InitiatorType, InitiatedByUser, InitiatedByApp, OperationName, Result, TargetUserUPN, TargetObjectId, RequestUri
| sort by ActivityDateTime desc
| take 50"
EL0,01,FC,07,03,Identity,Identity & Credential Management,Account,Account Deletion,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,Account Deleted changed,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-identitydirectoryevents-table,"// Objective: Surfaces Active Directory account deletions detected by Microsoft Defender for Identity (IdentityDirectoryEvents), with analyst-friendly filtering for users, groups, or devices.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----// Set any of these strings to filter for user/group/device fragments; leave blank to see all deletions.
let TargetUsers = """";    // e.g., ""svc_"" or ""jdoe""
let TargetGroups = """";   // e.g., ""Domain Admins""
let TargetDevices = """";  // e.g., ""SRV01""
//
//-----Part 1: Base Filtering-----
// Filter for AD account deletions observed by Defender for Identity in the last 90 days.
IdentityDirectoryEvents
| where TimeGenerated > ago(30d)
| where ActionType == ""Account Deleted changed""
| where Application == ""Active Directory""
//
//-----Part 2: Parse Deleted Object Types-----
// Extract deleted user, group, and device object names from AdditionalFields.
| extend TARGET_OBJECT_USER   = tostring(AdditionalFields.[""TARGET_OBJECT.USER""])
| extend TARGET_OBJECT_GROUP  = tostring(AdditionalFields.[""TARGET_OBJECT.GROUP""])
| extend TARGET_OBJECT_DEVICE = tostring(AdditionalFields.[""TARGET_OBJECT.DEVICE""])
//
//-----Part 3: Analyst Filtering-----
// Only show results where the object matches the analyst’s filters (leave blank for all).
| where (TargetUsers == """" or TARGET_OBJECT_USER contains TargetUsers)
| where (TargetGroups == """" or TARGET_OBJECT_GROUP contains TargetGroups)
| where (TargetDevices == """" or TARGET_OBJECT_DEVICE contains TargetDevices)
//
//-----Part 4: Final Output-----
// Columns for easy triage, sorting, or export.
| project TimeGenerated, ActionType, Application, TARGET_OBJECT_USER, TARGET_OBJECT_GROUP, TARGET_OBJECT_DEVICE
| sort by TimeGenerated desc
| take 50"
EL0,01,AJ,01,04,Identity,Identity & Credential Management,Account,Account Deletion,Entra,AADProvisioningLogs,Action ,Delete,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-provisioning-logs#what-can-you-do-with-the-provisioning-logs,"// Objective: Detects SCIM/provisioning-based Entra ID account deletions via AADProvisioningLogs, with filtering for initiating app and result status.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Populate TargetApps with app fragments to filter; leave empty to show all.
let TargetApps = dynamic([]);   // e.g., [""Workday"", ""ServiceNow""]
//
//-----Part 1: Filter for Deletions-----
//
AADProvisioningLogs
| where TimeGenerated > ago(90d)
| where ProvisioningAction == ""delete""
| extend
    InitiatedByApp = tostring(parse_json(ServicePrincipal).Name),
    Service = tostring(parse_json(InitiatedBy).Name),
    TargetIdentity = tostring(TargetIdentity),
    SourceIdentity = tostring(SourceIdentity),
    ProvStatusInfo = tostring(ProvisioningStatusInfo)
| where (array_length(TargetApps) == 0 or InitiatedByApp has_any (TargetApps))
| where tolower(ResultType) in (""success"", ""failure"")   // Only success or failure
//
//-----Part 2: Output for Workbook/Analyst-----
//
| project TimeGenerated, ProvisioningAction, InitiatedByApp, Service, ResultType, ProvStatusInfo, TargetIdentity, SourceIdentity
| sort by TimeGenerated desc
| take 50"
EL0,01,AJ,02,05,Identity,Identity & Credential Management,Account,Account Deletion,Windows,SecurityEvent,Activity,4726 - A user account was deleted,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4726,"// Objective: Tracks user account deletions in Windows Active Directory via SecurityEvent logs (Event ID 4726), with full initiator and target detail.
// For best results, set SACLs on critical OUs/groups to ensure this event is always logged.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Set arrays below to filter by user, initiator, or computer fragments (case-insensitive, partial match). Leave empty for all results.
let TargetUsers = dynamic([]);      // e.g., [""svc_"", ""admin"", ""MSOL""]
let Initiators = dynamic([]);       // e.g., [""adminuser"", ""mcrane""]
let TargetComputers = dynamic([]);  // e.g., [""gccadds02"", ""azurearc""]
//
// ----- Part 1: Event Filtering -----
// Only look at user deletions (Event ID 4726), and filter to last 90 days.
//
SecurityEvent
// GPO Path: To capture 4726 events, enable the following:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > DS Access > Audit Directory Service Changes (Success/Failure)
//   Note: SACLs must be set on key OUs/groups to audit deletion events.
//
| where TimeGenerated > ago(14d) 
| where EventID == 4726
| where Activity == ""4726 - A user account was deleted.""
//
// ----- Part 2: Flexible Filtering -----
// Allow partial/fragment search for deleted username, initiator, or computer.
//
| where (array_length(TargetUsers) == 0 or tolower(TargetUserName) has_any (TargetUsers) or tolower(TargetAccount) has_any (TargetUsers))
| where (array_length(Initiators) == 0 or tolower(SubjectUserName) has_any (Initiators) or tolower(SubjectAccount) has_any (Initiators))
| where (array_length(TargetComputers) == 0 or tolower(Computer) has_any (TargetComputers))
| extend IsTargetedUser = 
    (array_length(TargetUsers) > 0 and 
        (tolower(TargetUserName) has_any (TargetUsers) or tolower(TargetAccount) has_any (TargetUsers)))
//
// ----- Part 3: Analyst Output -----
// Distinct single-row per event, only key fields for clarity.
//
| distinct TimeGenerated, IsTargetedUser, Deleter=SubjectUserName, DeleterAccount=SubjectAccount, DeletedUser=TargetUserName, DeletedAccount=TargetAccount, Computer, Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AJ,06,06,Identity,Identity & Credential Management,Account,Account Deletion,Microsoft Defender for Endpoint,DeviceEvents,ActionType,UserAccountDeleted,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDE,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-deviceevents-table,"// Objective: Surfaces endpoint user account deletions from Microsoft Defender for Endpoint (DeviceEvents), with device and actor filtering.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
//
let InitiatingAccounts = dynamic([]);   // e.g., [""admin"", ""system""]
let TargetAccounts = dynamic([]);       // e.g., [""svc_"", ""guest""]
let Devices = dynamic([]);              // e.g., [""server01"", ""workstation""]
DeviceEvents
// ----- Part 1: Base Filtering -----
| where TimeGenerated > ago(30d)
| where ActionType == ""UserAccountDeleted""
// ----- Part 2: Analyst Filtering -----
// Allows partial/fuzzy matching via has_any on common fields.
| where (array_length(InitiatingAccounts) == 0 or tolower(InitiatingProcessAccountName) has_any (InitiatingAccounts))
| where (array_length(TargetAccounts) == 0 or tolower(AccountName) has_any (TargetAccounts))
| where (array_length(Devices) == 0 or tolower(DeviceName) has_any (Devices))
// ----- Part 3: Final Output -----
// Shows the key fields analysts need for investigation.
| distinct TimeGenerated, ActionType, ['Initiated By'] = InitiatingProcessAccountName, DeviceName, AccountDomain, AccountName, tostring(AdditionalFields)
| sort by TimeGenerated desc
| take 50"
EL0,01,AK,01,01,Identity,Privileged Identity & Credential Management,Account,Provisioning,Entra,AuditLogs,OperationName,role,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Tracks privileged role provisioning (add/remove) actions in Entra ID using AuditLogs, with initiator, role, and group details.
//
// ----- Part 0: Analyst-Driven Targeting (optional) -----
// Filter for specific users, apps, or roles. Leave arrays empty for all.
//
let TargetUsers = dynamic([]);      // Example: dynamic([""jdoe@contoso.com""])
let TargetApps  = dynamic([]);      // Example: dynamic([""MyAutomationApp""])
let TargetRoles = dynamic([]);      // Example: dynamic([""Global Administrator""])
//
// ----- Part 1: Filter for Privileged Role Provisioning Events -----
// Only process AuditLog events that include privileged ""role"" actions.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName contains ""role""
//
// ----- Part 2: Parse Initiator and Target Details -----
// Expand out initiator (user or app) and flatten each TargetResource.
//
| extend InitiatedByUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)
| extend InitiatedByApp  = tostring(parse_json(tostring(InitiatedBy.app)).displayName)
| extend InitiatorType   = case(
    isnotempty(InitiatedByUser), ""User"",
    isnotempty(InitiatedByApp), ""Application"",
    ""Other""
)
| mv-apply TargetResource = parse_json(tostring(TargetResources)) on (
    extend 
        ResourceType = tostring(TargetResource.type),
        ResourceDisplayName = tostring(TargetResource.displayName),
        ResourceUPN = tostring(TargetResource.userPrincipalName),
        ResourceId = tostring(TargetResource.id)
)
//
// ----- Part 3: Summarize to Group by Event -----
// For each event, extract relevant names for Role, Group, and Target User UPN.
//
| summarize 
    RoleName        = anyif(ResourceDisplayName, ResourceType == ""Role""),
    GroupName       = anyif(ResourceDisplayName, ResourceType == ""Other""),
    TargetUserUPN   = anyif(ResourceUPN, ResourceType == ""User""),
    TargetResourceId= anyif(ResourceId, ResourceType == ""Role""),
    GroupId         = anyif(ResourceId, ResourceType == ""Other"")
    by TimeGenerated, OperationName, InitiatorType, InitiatedByUser, InitiatedByApp, Category, AADOperationType, Result
//
// ----- Part 4: Null Handling for Readability -----
// Convert any empty extracted columns to ""N/A"" for clarity.
//
| extend 
    RoleName      = iif(isempty(RoleName), ""N/A"", RoleName),
    GroupName     = iif(isempty(GroupName), ""N/A"", GroupName),
    TargetUserUPN = iif(isempty(TargetUserUPN), ""N/A"", TargetUserUPN)
//
// ----- Part 5: Apply Analyst Targeting (optional) -----
// Use targeting arrays to filter for specific users, apps, or roles.
//
| where (array_length(TargetUsers) == 0 or TargetUserUPN in~ (TargetUsers))
| where (array_length(TargetApps)  == 0 or InitiatedByApp in~ (TargetApps))
| where (array_length(TargetRoles) == 0 or RoleName in~ (TargetRoles))
//
// ----- Part 6: Final Output -----
// Clean, analyst-friendly table of recent PIM provisioning actions.
//
| distinct TimeGenerated, OperationName, InitiatorType, InitiatedByUser, InitiatedByApp, RoleName, GroupName, TargetUserUPN, Category, AADOperationType, Result
| sort by TimeGenerated desc
| take 50"
EL0,01,AK,07,02,Identity,Privileged Identity & Credential Management,Account,Provisioning,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,Group membership changed,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI#connect-events,https://techcommunity.microsoft.com/blog/microsoftsecurityandcompliance/track-changes-to-sensitive-groups-with-advanced-hunting-in-microsoft-365-defende/3275198,"// Objective: Detects sensitive group membership changes in Active Directory using Microsoft Defender for Identity (IdentityDirectoryEvents).
//
// ----- Part 0: Define Sensitive Group Array -----
// Analyst: Adjust these group names for your organization's ""sensitive"" AD groups.
//
let SensitiveGroupName = pack_array(
    'Account Operators',
    'Administrators',
    'Domain Admins',
    'Backup Operators',
    'Domain Controllers',
    'Enterprise Admins',
    'Enterprise Read-only Domain Controllers',
    'Group Policy Creator Owners',
    'Incoming Forest Trust Builders',
    'Microsoft Exchange Servers',
    'Network Configuration Operators',
    'Microsoft Exchange Servers',
    'Print Operators',
    'Read-only Domain Controllers',
    'Replicator',
    'Schema Admins',
    'Server Operators'
);
//
// ----- Part 1: Filter IdentityDirectoryEvents for Adds to Sensitive Groups -----
// Only include AD group membership changes (exclude sync/system events).
//
IdentityDirectoryEvents
| where TimeGenerated > ago(30d)
| where Application == ""Active Directory""
| where ActionType == ""Group Membership changed""
| where DestinationDeviceName != """" // Exclude AD Sync or system changes
//
// ----- Part 2: Extract Group Change Details from AdditionalFields -----
// Parse the group add/remove, target account, and group information.
//
| extend ToGroup   = tostring(parse_json(AdditionalFields).[""TO.GROUP""])         // Group added to
| extend FromGroup = tostring(parse_json(AdditionalFields).[""FROM.GROUP""])       // Group removed from
| extend Action    = iff(isempty(ToGroup), ""Remove"", ""Add"")                      // Add or Remove action
| extend GroupModified = iff(isempty(ToGroup), FromGroup, ToGroup)               // Unified group name
| extend Target_Group  = tostring(parse_json(AdditionalFields).[""TARGET_OBJECT.GROUP""]) // Canonical group
//
// ----- Part 3: Filter for Adds to Sensitive Groups Only -----
// Only return events where the group modified is in SensitiveGroupName and is an add.
//
| where GroupModified in~ (SensitiveGroupName)
| where Action == ""Add""
//
// ----- Part 4: Final Output Projection -----
// Show clean table of group membership adds to sensitive groups.
//
| project TimeGenerated, Action, GroupModified,  Target_Account = TargetAccountDisplayName, Target_UPN = TargetAccountUpn, Target_Group,  DC=DestinationDeviceName, Actor=AccountName, ActorDomain=AccountDomain, AdditionalFields
| sort by TimeGenerated desc
| take 50"
EL0,01,AK,06,03,Identity,Privileged Identity & Credential Management,Account,Provisioning,Microsoft Defender for Endpoint,DeviceEvents,ActionType,UseraccountAddedToLocalGroup,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDE#connect-events,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-deviceevents-table,"// Objective: Detects privileged local group membership adds on endpoints in Microsoft Defender for Endpoint (DeviceEvents), including joins to newly created accounts.
//
// ----- Part 0: Define Sensitive Groups List -----
// Analyst can adjust as needed for high-value domain/local groups.
//
let SensitiveGroupName = pack_array(
    'Account Operators',
    'Administrators',
    'Domain Admins', 
    'Backup Operators',
    'Domain Controllers',
    'Enterprise Admins',
    'Enterprise Read-only Domain Controllers',
    'Group Policy Creator Owners',
    'Incoming Forest Trust Builders',
    'Microsoft Exchange Servers',
    'Network Configuration Operators',
    'Print Operators',
    'Read-only Domain Controllers',
    'Replicator',
    'Schema Admins',
    'Server Operators'
);
//
// ----- Part 1: Identify Add-to-Group Events for Sensitive Groups -----
// Parse AdditionalFields to get group name/domain.
//
DeviceEvents
| where TimeGenerated > ago(30d)
| where ActionType contains ""UserAccountAddedToLocalGroup""
| extend Fields = parse_json(AdditionalFields)
| extend AddToGroup = tostring(Fields.GroupName)
| extend GroupDomainName = tostring(Fields.GroupDomainName)
| where AddToGroup in (SensitiveGroupName) // Only sensitive group adds
//
// ----- Part 2: Correlate to User Creation (optional, catches newly created privileged users) -----
// Inner join to find cases where the added account was newly created.
//
| join kind=inner (
    DeviceEvents
    | where ActionType contains ""UserAccountCreated""
    | where AccountName <> """"
    | distinct AccountName, AccountSid
) on AccountSid
//
// ----- Part 3: Final Output -----
// Show device, action, who initiated, who was added, and what group.
//
| extend InitiatedActor = strcat(InitiatingProcessAccountDomain, ""\\"", InitiatingProcessAccountName)
| distinct TimeGenerated, DeviceName, ActionType, InitiatedActor, AccountAdded = AccountName1, AddToGroup, GroupDomainName
| sort by TimeGenerated desc 
| take 50"
EL0,01,AL,01,01,Identity,Privileged Identity & Credential Management,Manage Credential Type,Credential Management,Entra,AuditLogs,OperationName,conditional access policy,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/conditional-access/troubleshoot-policy-changes-audit-log,"// Objective: Tracks all Conditional Access policy adds, updates, and deletes in Entra ID (AuditLogs), with full before/after authentication context and strength—supports detection of policy changes impacting MFA, context, or authentication requirements.
//
// ----- Part 0: What & Why -----
// Tracks Conditional Access (CA) policy Adds, Updates, Deletes.
// - Full before/after view of AuthN Context and Strength.
// - ""Current"" columns always reflect policy state after that event.
// - On delete, ""Current"" is blank (policy gone).
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName in (""Add conditional access policy"", ""Update conditional access policy"", ""Delete conditional access policy"")
//
// ----- Part 1: Parse old/new config safely -----
//
| extend Target = todynamic(TargetResources)[0]
| extend ModProps = Target.modifiedProperties
| extend OldVal = tostring(ModProps[0].oldValue)
| extend NewVal = tostring(ModProps[0].newValue)
| extend OldCA = iif(isnotempty(OldVal), parse_json(OldVal), dynamic({}))
| extend NewCA = iif(isnotempty(NewVal), parse_json(NewVal), dynamic({}))
//
// ----- Part 2: Extract AuthN Context and Strength -----
//
| extend
    OldAuthNArr = iif(OldCA.conditions.applications.includeAuthenticationContextClassReferences != """", OldCA.conditions.applications.includeAuthenticationContextClassReferences, dynamic([])),
    NewAuthNArr = iif(NewCA.conditions.applications.includeAuthenticationContextClassReferences != """", NewCA.conditions.applications.includeAuthenticationContextClassReferences, dynamic([])),
    OldAuthStrength = tostring(OldCA.grantControls.authenticationStrength.id),
    NewAuthStrength = tostring(NewCA.grantControls.authenticationStrength.displayName)
//
// ----- Part 3: Clean up (convert null/empty to ""None"") -----
//
| extend
    Old_AuthN_Context = iif(array_length(OldAuthNArr) == 0, """", strcat_array(OldAuthNArr, "", "")),
    New_AuthN_Context = iif(array_length(NewAuthNArr) == 0, """", strcat_array(NewAuthNArr, "", "")),
    OldAuthStrength = iif(isnull(OldAuthStrength) or OldAuthStrength == ""null"", """", OldAuthStrength),
    NewAuthStrength = iif(isnull(NewAuthStrength) or NewAuthStrength == ""null"", """", NewAuthStrength)
//
// ----- Part 4: Identify ChangeType -----
//
| extend
    ChangeType = case(
        OperationName == ""Add conditional access policy"" and New_AuthN_Context != """" and NewAuthStrength != """", ""Created-Both"",
        OperationName == ""Add conditional access policy"" and New_AuthN_Context != """", ""Created-Context"",
        OperationName == ""Add conditional access policy"" and NewAuthStrength != """", ""Created-Strength"",
        OperationName == ""Add conditional access policy"", ""Created"",
        OperationName == ""Delete conditional access policy"", ""Deleted"",
        Old_AuthN_Context != New_AuthN_Context and OldAuthStrength != NewAuthStrength, ""Both"",
        Old_AuthN_Context != New_AuthN_Context, ""AuthNContext"",
        OldAuthStrength != NewAuthStrength, ""AuthStrength"",
        ""Other""
    )
//
// ----- Part 5: Show only meaningful changes -----
//
| where ChangeType matches regex @""Created|Deleted|AuthNContext|AuthStrength|Both""
//
// ----- Part 6: Output values based on event type -----
//
| extend
    ShowOldAuthN = iif(ChangeType in (""AuthNContext"", ""Both"", ""Deleted""), Old_AuthN_Context, """"),
    ShowNewAuthN = iif(ChangeType in (""AuthNContext"", ""Both"", ""Created-Context"", ""Created-Both""), New_AuthN_Context, """"),
    ShowOldStrength = iif(ChangeType in (""AuthStrength"", ""Both"", ""Deleted""), OldAuthStrength, """"),
    ShowNewStrength = iif(ChangeType in (""AuthStrength"", ""Both"", ""Created-Strength"", ""Created-Both""), NewAuthStrength, """")
//
// ----- Part 7: For deletes, blank out ""current"" (policy is gone) -----
//
| extend
    Current_AuthN_Context = iif(ChangeType == ""Deleted"", """", New_AuthN_Context),
    Current_AuthStrength = iif(ChangeType == ""Deleted"", """", NewAuthStrength)
//
// ----- Part 8: Final output -----
//
| project TimeGenerated, InitiatedBy = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), OperationName, PolicyName = Target.displayName, ChangeType, Old_AuthN_Context = ShowOldAuthN, New_AuthN_Context = ShowNewAuthN, OldAuthStrength = ShowOldStrength, NewAuthStrength = ShowNewStrength, Current_AuthN_Context, Current_AuthStrength, Result
| sort by TimeGenerated desc
| take 50"
EL0,01,AL,02,07,Identity,Privileged Identity & Credential Management,Manage Credential Type,Cert,Windows,SecurityEvent,Activity,4887 - Certificate Services approved a certificate request and issued a certificate,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn786423(v=ws.11),"// Objective: Tracks all certificate issuance events from Windows AD Certificate Services (EventID 4887 via SecurityEvent), including requester, disposition, subject, and issuing CA—supports compliance and monitoring of certificate approvals.
//
// Reference: 
//   Official Microsoft auditing guidance for AD CS:
//   https://learn.microsoft.com/en-us/defender-for-identity/deploy/configure-windows-event-collection#configure-auditing-on-ad-cs
//
//   To capture these events, ensure:
//   - The ""Issue and manage certificate requests"" audit setting is enabled on the CA
//   - The Certificate Services audit subcategory is enabled (via auditpol)
//   - EventID 4887 is being forwarded/collected
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave TargetRequesters as """" for all; set a value for substring match (case-sensitive).
let TargetRequesters = """";             // E.g., ""user"", ""svc"", ""adm""
let IssuingCAs = dynamic([]);          // E.g., [""FULL Issuing CA Name""]
//
// ----- Part 1: Search for AD CS Certificate Issuance Events (4887) -----
//
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4887
| where Activity == ""4887 - Certificate Services approved a certificate request and issued a certificate.""
// Parse out EventData XML, flatten one row per event.
| extend EventXML = parse_xml(EventData).EventData.Data
| mv-expand bagexpansion=array EventXML
| extend
    EventName = tostring(EventXML[""@Name""]),
    EventValue = tostring(EventXML[""#text""])
// Summarize to one row per cert event.
| summarize
    RequestId = anyif(EventValue, EventName == ""RequestId""),
    Requester = anyif(EventValue, EventName == ""Requester""),
    Attributes = anyif(EventValue, EventName == ""Attributes""),
    Disposition = anyif(EventValue, EventName == ""Disposition""),
    SubjectKeyIdentifier = anyif(EventValue, EventName == ""SubjectKeyIdentifier""),
    Subject = anyif(EventValue, EventName == ""Subject""),
    Computer = any(Computer),
    TimeGenerated = max(TimeGenerated)
    by EventRecordId
//
// ----- Part 2: Apply Optional Targeting -----
//
| where (array_length(IssuingCAs) == 0 or Computer in (IssuingCAs))
| where (TargetRequesters == """" or Requester contains TargetRequesters)
//
// ----- Part 3: Friendly Disposition Label -----
// Maps disposition code to text per Microsoft docs.
//
| extend
    DispositionReason = case(
        Disposition == ""0"", ""Incomplete (Not Completed)"",
        Disposition == ""1"", ""Error (Failed)"",
        Disposition == ""2"", ""Denied"",
        Disposition == ""3"", ""Issued"",
        Disposition == ""4"", ""Issued Out-of-Band"",
        Disposition == ""5"", ""Under Submission"",
        Disposition == ""6"", ""Revoked"",
        isnull(Disposition), ""Unknown"",
        ""Unknown""
    )
//
// ----- Part 4: Classify Certificate Type & Flag Targeted Requesters -----
// Uses Requester (endswith ""$"") to detect machine certs.
// Adds IsTargetedRequester (true if substring is matched; always true if filter not set).
//
| extend
    CertType = iff(isnotempty(Requester) and Requester endswith ""$"", ""Machine"", ""User""),
    IsTargetedRequester = iif(isnotempty(TargetRequesters), Requester contains TargetRequesters, false)
//
// ----- Part 5: Final Output -----
//
| project TimeGenerated, IsTargetedRequester, RequestId, Requester, CertType, Subject, SubjectKeyIdentifier, Disposition, DispositionReason, Attributes, ['Issuing-CA'] = Computer
| sort by TimeGenerated desc
| take 50"
EL0,01,AL,07,02,Identity,Privileged Identity & Credential Management,Manage Credential Type,Cert,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,ADCS Certificate issuance,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI#connect-events,https://techcommunity.microsoft.com/blog/microsoftthreatprotectionblog/securing-ad-cs-microsoft-defender-for-identitys-sensor-unveiled/3980265,"// Objective: Detects certificate issuance events via Microsoft Defender for Identity (IdentityDirectoryEvents, Protocol=Adcs).
// Monitors all user and machine certificates issued by ADCS, exposing requester, subject, disposition, and attributes.
// Useful for targeted or broad auditing of certificate issuance activity.
//
// ----- Part 0: Optional Targeting (substring match; leave blank for all) -----
//
let TargetRequesters = """"; // E.g., ""priv acct"", ""admin"", or ""machine"" for substring filter
let IssuingCAs = dynamic([]); // E.g., [""issuing.gcccyberlorian.net""]
//
// ----- Part 1: Filter for ADCS Certificate Issuance Events in MDI -----
//
IdentityDirectoryEvents
| where TimeGenerated > ago(30d)
| where Protocol == 'Adcs'
| where ActionType == ""ADCS Certificate issuance""
//
// ----- Part 2: Parse AdditionalFields for Certificate Data -----
//
| extend AddFields = parse_json(AdditionalFields)
| extend
    RequestId = tostring(AddFields.RequestId),
    Requester = tostring(AddFields.Requester),
    Subject = tostring(AddFields.Subject),
    SubjectKeyIdentifier = tostring(AddFields.SubjectKeyIdentifier),
    Disposition = tostring(AddFields.Disposition),
    Attributes = tostring(AddFields.Attributes)
//
// ----- Part 3: Optional Target Filtering (String ""contains"" match for Requester) -----
//
| where (array_length(IssuingCAs) == 0 or DestinationDeviceName in (IssuingCAs))
| where (TargetRequesters == """" or Requester contains TargetRequesters)
//
// ----- Part 4: Friendly Disposition Label and CertType (Machine vs User) -----
//
| extend
    CertType = iff(isnotempty(Requester) and Requester endswith ""$"", ""Machine"", ""User"")
//
// ----- Part 5: Final Output -----
//
| project TimeGenerated, RequestId, Requester, CertType, Subject, SubjectKeyIdentifier, Disposition, DispositionReason = case(
        Disposition == ""0"", ""Incomplete (Not Completed)"",
        Disposition == ""1"", ""Error (Failed)"",
        Disposition == ""2"", ""Denied"",
        Disposition == ""3"", ""Issued"",
        Disposition == ""4"", ""Issued Out-of-Band"",
        Disposition == ""5"", ""Under Submission"",
        Disposition == ""6"", ""Revoked"",
        isnull(Disposition), ""Unknown"",
        ""Unknown""
    ), Attributes, ['Issuing-CA'] = DestinationDeviceName
| sort by TimeGenerated desc
| take 50"
EL0,01,AL,01,03,Identity,Privileged Identity & Credential Management,Manage Credential Type,MFA,Entra,AuditLogs,OperationName,Update role setting in PIM,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/id-governance/privileged-identity-management/pim-how-to-change-default-settings,"// Objective: Tracks changes to Privileged Identity Management (PIM) role settings in Entra ID (AuditLogs).
// Focuses on modifications affecting MFA requirements and Authentication Context (ACRS).
// Enables compliance monitoring and privileged access auditing.
//
// ----- Part 0: Track All PIM Role Setting Changes for MFA & AuthN Context -----
// This query finds PIM role/group setting changes that affect MFA or Authentication Context (ACRS).
// It adds a column for ""ChangeType"" to distinguish MFA vs. AuthN Context changes.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Update role setting in PIM""
| where ResultDescription contains ""MFA"" or ResultDescription contains ""ACRS""
// Label the type of change (MFA or AuthN Context)
| extend ChangeType = case(
    ResultDescription contains ""MFA"", ""MFA Setting"",
    ResultDescription contains ""ACRS"", ""AuthN Context"",
    ""Other""
)
// Who performed the change
| extend ['Initiated By'] = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)
// If a PIM group was updated, display it
| extend ['PIM Group Updated'] = case(
    array_length(TargetResources) > 2 and tostring(TargetResources[2].type) == ""Other"",
    tostring(TargetResources[2].displayName),
    """"
)
// If a PIM role was updated, display it
| extend ['PIM Role Updated'] = case(
    array_length(TargetResources) > 2 and tostring(TargetResources[2].type) == ""Directory"",
    tostring(TargetResources[0].displayName),
    """"
)
| distinct TimeGenerated, ['Initiated By'], OperationName, ChangeType, ResultDescription, ['PIM Group Updated'], ['PIM Role Updated'], LoggedByService, Result
| sort by TimeGenerated desc 
| take 50"
EL0,01,AL,02,04,Identity,Privileged Identity & Credential Management,Manage Credential Type,Password,Windows,SecurityEvent,Activity,4723 - An attempt was made to change an account's password,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4723,"// Objective: Detects attempted password changes for privileged or targeted accounts on Windows (SecurityEvent, EventID 4723).
// Useful for auditing password changes on sensitive accounts to support early detection of credential abuse.
//
// ----- Part 0: Optional Targeting -----
// Leave empty for all results, or add SAMAccountNames for privileged targets.
//
let TargetUsers = dynamic([]);       // e.g., [""admin"", ""svcaccount"", ""priv users""]
let InitiatingUsers = dynamic([]);   // e.g., [""helpdesk1"", ""admin""]
//
// ----- Part 1: Filter for 4723 Password Change Attempts -----
//
SecurityEvent
// GPO Path: To capture 4723 events (password change attempts), enable the following:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Audit Policy > Account Management > Audit User Account Management (Success/Failure)
| where TimeGenerated > ago(14d)
| where EventID == 4723
| where Activity == ""4723 - An attempt was made to change an account's password.""
//
// ----- Part 2: Optional Targeting (on initiator and/or target user) -----
//
| where (array_length(TargetUsers) == 0 or TargetUserName in (TargetUsers))
| where (array_length(InitiatingUsers) == 0 or SubjectUserName in (InitiatingUsers))
//
// ----- Part 3: Add IsTargetedUser Flag and Friendly Output -----
//
| extend IsTargetedUser = TargetUserName in (TargetUsers)
//
// ----- Part 4: Final Output -----
//
| distinct TimeGenerated, IsTargetedUser, ['Initiated By'] = SubjectUserName, ['Target User'] = TargetUserName, Computer, ['Domain'] = SubjectDomainName, ['Event Record'] = EventRecordId, Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AL,02,05,Identity,Privileged Identity & Credential Management,Manage Credential Type,Password,Windows,SecurityEvent,Activity,4724 - An attempt was made to reset an account's password,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4724,"// Objective: Detects password reset attempts on privileged accounts using Windows SecurityEvent (EventID 4724).
// Enables monitoring and alerting for unauthorized or suspicious password reset activity.
//
// ----- Part 0: Optional Targeting -----
//
// ----- Targeting: Populate with accounts to monitor or leave empty for all -----
let PrivUsers = dynamic([]); // e.g., [""admin1"", ""svc_critical"", ""priv""]
//
// ----- Part 1: Pull password reset attempts (Event ID 4724) -----
//
SecurityEvent
// GPO Path: To capture 4724 events (password reset attempts), enable:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration >  Audit Policy > Account Management > Audit User Account Management (Success/Failure)
| where TimeGenerated > ago(14d)
| where EventID == 4724
| where Activity == ""4724 - An attempt was made to reset an account's password.""
//
// ----- Part 2: Optional Security-focused Filtering -----
// Only show events for monitored accounts (if PrivUsers array is used)
//
| where (array_length(PrivUsers) == 0 or TargetUserName in (PrivUsers))
//
// ----- Part 3: Add IsTargetedUser Flag -----
//
| extend IsTargetedUser = TargetUserName in (PrivUsers)
//
// ----- Part 4: Final Output -----
//
| distinct TimeGenerated, IsTargetedUser, Initiator=SubjectUserName, InitiatorDomain=SubjectDomainName,
          TargetUser=TargetUserName, TargetDomain=TargetDomainName, PrivilegeList, SubjectUserSid, TargetSid, Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AL,07,06,Identity,Privileged Identity & Credential Management,Manage Credential Type,Password,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType ,Account Password Change,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI#connect-events,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-identitydirectoryevents-table,"// Objective: Tracks all password changes for privileged accounts using Microsoft Defender for Identity (IdentityDirectoryEvents, ActionType=""Account Password changed"").
// Supports auditing and monitoring of privileged credential changes across devices and accounts.
//
// ----- Part 0: Flexible Targeting Arrays (empty by default) -----
let TargetAccountUPNs = dynamic([]);   // Example: [""admin1@domain.com"", ""admin2@domain.com""]
let TargetDeviceNames = dynamic([]);   // Example: [""Device1"", ""Device2""]
// ----- Part 1: Query Password Changes for Privileged Accounts -----
IdentityDirectoryEvents
| where TimeGenerated > ago(30d)
| where ActionType == ""Account Password changed""
| where (array_length(TargetAccountUPNs) == 0 or TargetAccountUpn in (TargetAccountUPNs))
| where (array_length(TargetDeviceNames) == 0 or TargetDeviceName in (TargetDeviceNames))
| distinct TimeGenerated, ActionType, TargetDeviceName, TargetAccountUpn, TargetAccountDisplayName, tostring(AdditionalFields)
| sort by TimeGenerated desc
| take 50"
EL0,01,AM,01,01,Identity,Privileged Identity & Credential Management,Attributes,Establish/Manage: Organization & Groups/Roles,Entra,AuditLogs,TargetResources,Attribute Value,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/defender-for-identity/monitored-activities#monitored-user-activities-user-account-ad-attribute-changes,"// Objective: Audits attribute modifications to privileged accounts in Entra ID (AuditLogs).
// Surfaces before-and-after attribute values, initiator identity, and target account for detailed change tracking and compliance.
//
// ----- Part 0: Flexible Targeting Arrays (empty by default) -----
let TargetActorUPNs = dynamic([]); // Example: [""admin1@domain.com"", ""admin2@domain.com""]
// ----- Part 1: Query Audit Logs for Attribute Modifications -----
AuditLogs
| where TimeGenerated > ago(30d)
| where isnotempty(TargetResources)
// ----- Part 2: Parse Modified Properties for Attribute Details -----
| extend ModifiedProperties = parse_json(tostring(TargetResources[0].modifiedProperties))
| mv-expand ModifiedProperties
| extend 
    AttributeName = tostring(ModifiedProperties.displayName),
    AttributeNewValue = tostring(ModifiedProperties.newValue),
    TargetAccountUPN = tostring(TargetResources[0].userPrincipalName),
    InitiatorUPN = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),
    InitiatorApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)
// ----- Part 3: Apply Targeting Filter (Optional) -----
| where array_length(TargetActorUPNs) == 0 or InitiatorUPN in (TargetActorUPNs)
// ----- Part 4: Project Clean Output for Analysis -----
| distinct TimeGenerated, OperationName, InitiatorUPN, InitiatorApp, TargetAccountUPN, AttributeName, AttributeNewValue, Result
| order by TimeGenerated desc
| take 50"
EL0,01,AM,07,02,Identity,Privileged Identity & Credential Management,Attributes,Establish/Manage: Organization & Groups/Roles,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,ADAttributeChanges,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI#connect-events,https://learn.microsoft.com/en-us/defender-for-identity/monitored-activities#monitored-user-activities-user-account-ad-attribute-changes,"// Objective: Detects privileged AD attribute changes using Microsoft Defender for Identity (IdentityDirectoryEvents, ActionType in ADAttributeChanges).
// Supports targeted auditing of changes (passwords, delegation, group membership, UPN, etc.) on privileged accounts or devices.
//
// ----- Part 0: Define Targeting Arrays (empty by default) -----
let TargetUPNs = dynamic([]);          // Example: [""admin1@domain.com"", ""svc-identity@domain.com""]
let TargetDeviceNames = dynamic([]);   // Example: [""AD-DC01"", ""GCC-SERVER01""]
// ----- Part 1: Define Attribute-Related MDI ActionTypes -----
let ADAttributeChanges = dynamic([
    ""Account Constrained Delegation State Changed"",
    ""Account Constrained Delegation SPNs Changed"",
    ""Account Delegation Changed"",
    ""Account Disabled Changed"",
    ""Account Expired"",
    ""Account Expiry Time Changed"",
    ""Account Locked Changed"",
    ""Account Password Changed"",
    ""Account Password Expired"",
    ""Account Password Never Expires Changed"",
    ""Account Password Not Required Changed"",
    ""Account Smartcard Required Changed"",
    ""Account Supported Encryption Types Changed"",
    ""Account Unlock changed"",
    ""Account UPN Name Changed"",
    ""Group Membership Changed"",
    ""User Mail Changed""
]);
// ----- Part 2: Query IdentityDirectoryEvents for Attribute Changes -----
IdentityDirectoryEvents
| where TimeGenerated > ago(30d)
| where ActionType has_any (ADAttributeChanges)
| where (array_length(TargetUPNs) == 0 or TargetAccountUpn in (TargetUPNs))
| where (array_length(TargetDeviceNames) == 0 or TargetDeviceName in (TargetDeviceNames))
// ----- Part 3: Project Final Output -----
| distinct TimeGenerated,  ActionType, Application, TargetAccountUpn, TargetAccountDisplayName, TargetDeviceName, tostring(AdditionalFields)
| sort by TimeGenerated desc
| take 50"
EL0,01,AM,02,03,Identity,Privileged Identity & Credential Management,Attributes,Establish/Manage: Organization & Groups/Roles,Windows,SecurityEvent,Activity,5137 - A directory service object was created,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5137,"// Objective: Detects creation of any Active Directory object (SecurityEvent, EventID 5137).
// Useful for monitoring new privileged accounts, groups, or key object classes in critical AD environments.
//
//-----Part 0: Dynamic Targeting-----
// To target specific creators, object classes, or domains, fill in the lists below; leave empty for all.
let TargetUserNames = dynamic([]);      // e.g., [""dadmin"", ""svc_account""]
let TargetObjectClasses = dynamic([]);  // e.g., [""computer"", ""user"", ""group""]
let TargetDomains = dynamic([]);        // e.g., [""CONTOSO""]
//
//-----Part 1: Filter for Directory Object Creation Events-----
SecurityEvent
// GPO Path: To capture 5137 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > DS Access > Audit Directory Service Changes (Success)
// Note: This event is generated each time an Active Directory object is created. Set SACLs on critical containers and monitor for key object classes per Microsoft recommendations.
| where TimeGenerated > ago(14d)
| where EventID == 5137
| where Activity == ""5137 - A directory service object was created.""
//
//-----Part 2: Parse and Expand EventData-----
// Safely parse XML and extract Name/Value pairs for all EventData fields.
| extend d = parse_xml(EventData)
| extend EventDataParsed = parse_json(tostring(d.EventData))
| mv-expand DataItem = EventDataParsed.Data
| extend Name = tostring(DataItem[""@Name""]), Value = tostring(DataItem[""#text""])
//
//-----Part 3: Summarize to One Row per Object Creation-----
// Collate initiator, domain, DN, class, and attributes per event.
| summarize 
    InitiatedBy = anyif(Value, Name == ""SubjectUserName""),
    Domain = anyif(Value, Name == ""SubjectDomainName""),
    ObjectDN = anyif(Value, Name == ""ObjectDN""),
    ObjectGUID = anyif(Value, Name == ""ObjectGUID""),
    ObjectClass = anyif(Value, Name == ""ObjectClass""),
    Attributes = make_list_if(Value, Name contains ""Attribute"")
    by TimeGenerated, Activity
//
//-----Part 4: Analyst Filtering-----
// Return only results matching dynamic lists; leave lists empty for all.
| where (array_length(TargetUserNames) == 0 or InitiatedBy in (TargetUserNames))
| where (array_length(TargetObjectClasses) == 0 or ObjectClass in (TargetObjectClasses))
| where (array_length(TargetDomains) == 0 or Domain in (TargetDomains))
//
//-----Part 5: Add IsTargetedUser Flag-----
//
| extend IsTargetedUser = InitiatedBy in (TargetUserNames)
//
//-----Part 6: Final Output-----
// Analyst-friendly projection; cast Attributes to string for compatibility.
| project TimeGenerated, IsTargetedUser, InitiatedBy, Domain, ObjectClass, ObjectDN, ObjectGUID, Attributes = tostring(Attributes), Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AN,02,01,Identity,Privileged Identity & Credential Management,Attributes,Manage/Track Changes in Attributes & Credentials,Windows,SecurityEvent,Activity,5136 - A directory service object was modified,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5136,"// Objective: Detects modifications to Active Directory objects (SecurityEvent, EventID 5136).
// Surfaces who changed what (user/group/computer attributes) to track privileged object and account changes.
//
//-----Part 0: Dynamic Targeting-----
// To target specific users, object classes, or domains, fill in the lists below; leave empty for all.
let TargetUserNames = dynamic([]);      // e.g., [""dadmin"", ""svc_account""]
let TargetObjectClasses = dynamic([]);  // e.g., [""computer"", ""user"", ""group""]
let TargetDomains = dynamic([]);        // e.g., [""CONTOSO""]
//
//-----Part 1: Filter for Directory Object Modification Events-----
SecurityEvent
// GPO Path: To capture 5136 events, enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > DS Access > Audit Directory Service Changes (Success)
// Note: This event is generated whenever an Active Directory object is modified. It records who made the change, what object, the object class, and which attributes were changed.
| where TimeGenerated > ago(14d)
| where EventID == 5136
| where Activity == ""5136 - A directory service object was modified.""
//
//-----Part 2: Parse and Expand EventData-----
// Safely parse XML and extract Name/Value pairs for all EventData fields.
| extend d = parse_xml(EventData)
| extend EventDataParsed = parse_json(tostring(d.EventData))
| mv-expand DataItem = EventDataParsed.Data
| extend Name = tostring(DataItem[""@Name""]), Value = tostring(DataItem[""#text""])
//
//-----Part 3: Summarize to One Row per Object Modification-----
// Collate initiator, DN, class, and attributes per event.
| summarize 
    InitiatedBy = anyif(Value, Name == ""SubjectUserName""),
    TargetUserName = anyif(Value, Name == ""ObjectDN""),
    ['Object Class'] = anyif(Value, Name == ""ObjectClass""),
    ['Attributes'] = make_list_if(Value, Name contains ""Attribute"")
    by TimeGenerated, Activity
//
//-----Part 4: Analyst Filtering-----
// Return only results matching dynamic lists; leave lists empty for all.
| where (array_length(TargetUserNames) == 0 or InitiatedBy in (TargetUserNames))
| where (array_length(TargetObjectClasses) == 0 or ['Object Class'] in (TargetObjectClasses))
| where (array_length(TargetDomains) == 0 or TargetUserName has_any (TargetDomains))
//
//-----Part 5: Add IsTargetedUser Flag-----
// True if InitiatedBy is in TargetUserNames (targeted modifier).
| extend IsTargetedUser = InitiatedBy in (TargetUserNames)
//
//-----Part 6: Final Output-----
// Shows: who made the change, which account, and what was changed.
| project TimeGenerated, IsTargetedUser, InitiatedBy, TargetUserName, ['Object Class'], Attributes = tostring(['Attributes']), Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AN,01,02,Identity,Privileged Identity & Credential Management,Attributes,Manage/Track Changes in Attributes & Credentials,Entra,AuditLogs,OperationName ,Update user,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-audit-logs,"// Objective: Audits group or attribute changes initiated via Microsoft Entra PIM (AuditLogs, InitiatedBy.App == ""MS-PIM"").
// Tracks PIM-driven assignments and attribute changes for compliance and privileged management reporting.
//
// Tracks changes initiated by Microsoft Entra PIM (MS-PIM), including group assignments and
// role activations made on behalf of users or systems.
//
// This query supports the ICAM objective: ""Manage/Track Changes in Attributes & Credentials""
//
// Key Characteristics:
// - Filters on InitiatedBy.App == ""MS-PIM""
// - Surfaces all changes to group membership or attribute values initiated via PIM
// - Captures both modified attributes and affected identities (user/group)
//
// ----- Part 0: Dynamic PIM Filtering -----
AuditLogs
| where TimeGenerated > ago(90d)
| where tostring(parse_json(tostring(InitiatedBy.app)).displayName) == ""MS-PIM""
| extend Operation = OperationName, ResultStatus = Result, InitiatedByApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)
// ----- Part 1: Expand and Parse Target Resources -----
| mv-expand Target = parse_json(tostring(TargetResources))
| extend
    TargetId = tostring(Target.id),
    TargetType = tostring(Target.type),
    TargetUPN = tostring(Target.userPrincipalName),
    TargetDisplayName = coalesce(tostring(Target.displayName), tostring(Target.userPrincipalName), ""(Unknown)""),
    ModifiedProps = todynamic(Target.modifiedProperties)
// ----- Part 2: Expand Modified Attributes -----
| mv-expand Prop = ModifiedProps
| extend
    AttributeName = tostring(Prop.displayName),
    OldValue = trim('""', tostring(Prop.oldValue)),
    NewValue = trim('""', tostring(Prop.newValue))
// ----- Part 3: Final Output -----
| distinct TimeGenerated, Operation, ResultStatus, InitiatedByApp, TargetDisplayName, TargetType, AttributeName, OldValue, NewValue
| sort by TimeGenerated desc
| take 500"
EL0,01,AN,07,03,Identity,Privileged Identity & Credential Management,Attributes,Manage/Track Changes in Attributes & Credentials,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,ADAttributeChanges,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI#connect-events,https://learn.microsoft.com/en-us/defender-for-identity/monitored-activities#monitored-user-activities-user-account-ad-attribute-changes,"// Objective: Detects privileged AD attribute or object changes as seen by Microsoft Defender for Identity (IdentityDirectoryEvents, ActionType in ADAttributeChanges).
// Enables focused auditing of privileged account, group, or computer changes for ICAM compliance.
//
// Supports ICAM Pillar: ""Manage/Track Changes in Attributes & Credentials""
//
// This query captures attribute changes or object lifecycle changes (create/delete/modify)
// detected by Microsoft Defender for Identity (MDI) for privileged user accounts.
//
// Key Characteristics:
// - Uses a defined list of AD-related change ActionTypes relevant to accounts/groups/objects
// - Filters to only include users based on TargetAccountUpn (dynamic list targeting)
// - Includes changes like delegation, password policies, group membership, account lifecycle
// ----- Part 0: Dynamic Targeting -----
let TargetAccountUPNs = dynamic([]);  // e.g., [""admin@domain.com""]
let ADAttributeChanges = dynamic([
    ""Account Constrained Delegation State Changed"",
    ""Account Constrained Delegation SPNs Changed"",
    ""Account Delegation Changed"",
    ""Account Disabled Changed"",
    ""Account Expired"",
    ""Account Expiry Time Changed"",
    ""Account Locked Changed"",
    ""Account Password Changed"",
    ""Account Password Expired"",
    ""Account Password Never Expires Changed"",
    ""Account Password Not Required Changed"",
    ""Account Smartcard Required Changed"",
    ""Account Supported Encryption Types Changed"",
    ""Account Unlock changed"",
    ""Account UPN Name Changed"",
    ""Group Membership Changed"",
    ""User Mail Changed"",
    ""User Account Created"",
    ""Computer Account Created"",
    ""Security Principal Deleted Changed"",
    ""Security Principal Display Name Changed"",
    ""Security Principal Name Changed"",
    ""Security Principal Path Changed"",
    ""Security Principal Sam Name Changed""
]);
// ----- Part 1: Filter and Project MDI Event Details -----
IdentityDirectoryEvents
| where TimeGenerated > ago(90d)
| where ActionType has_any (ADAttributeChanges)
| where array_length(TargetAccountUPNs) == 0 or TargetAccountUpn in (TargetAccountUPNs)
// ----- Part 2: Final Output -----
| distinct TimeGenerated, ActionType, Application, TargetAccountUpn, TargetAccountDisplayName, TargetDeviceName, tostring(AdditionalFields)
| sort by TimeGenerated desc"
EL0,01,AN,06,04,Identity,Privileged Identity & Credential Management,Attributes,Manage/Track Changes in Attributes & Credentials,Microsoft Defender for Endpoint,DeviceEvents,ActionType,user,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDE#connect-events,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-deviceevents-table,"// Objective: Tracks privileged user-based activity on endpoints using Microsoft Defender for Endpoint (DeviceEvents, ActionType contains ""user"").
// Enables monitoring of privileged user activity on key devices.
//
// ----- Part 0: Dynamic Targeting (MDE) -----
// Use these arrays to filter for specific privileged users or devices; leave empty to return all.
let TargetAccountNames = dynamic([]);    // e.g., [""svcadmin"", ""xadmin""]
let TargetDeviceNames = dynamic([]);     // e.g., [""SEC-GW-01"", ""CORE-DC-01""]
// ----- Part 1: Filter and Project User-Based Events -----
DeviceEvents
| where TimeGenerated > ago(30d)
| where ActionType contains ""user""
| where isnotempty(AccountName)
| where array_length(TargetAccountNames) == 0 or AccountName in (TargetAccountNames)
| where array_length(TargetDeviceNames) == 0 or DeviceName in (TargetDeviceNames)
// ----- Part 2: Final Output -----
| distinct TimeGenerated, ActionType, ['Initiated By'] = InitiatingProcessAccountName, DeviceName, AccountDomain, AccountName, tostring(AdditionalFields)
| sort by TimeGenerated desc
| take 50"
EL0,01,AN,01,05,Identity,Privileged Identity & Credential Management,Attributes,Manage/Track Changes in Attributes & Credentials,Entra,AuditLogs,OperationName," (""Update application"", ""Update service principal"", ""Update application – Certificates and secrets management "")",https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"// Objective: Detects changes to application or service principal attributes in Entra ID (AuditLogs; app/service principal update operations).
// Surfaces before/after values for critical changes to credentials, secrets, URIs, or permissions for privileged apps.
//
// Supports ICAM Pillar: ""Manage/Track Changes in Attributes & Credentials""
// Category: Privileged Identity & Credential Management (PIM)
//
// This query identifies changes made to applications or service principals in Entra ID.
// It focuses on:
// - Certificate & secret modifications (high-risk for app credentials)
// - Reply URL, redirect URI, or permissions scope changes
// - Initiators who are privileged (PIM users or app owners)
//
// Key Characteristics:
// - Filters for relevant update operations (application and service principal)
// - Expands modified properties for before/after context
// - Returns one row per attribute change for audit/visualization
//
// Notes:
// - This supports PIM because managing app identities, secrets, and access scopes 
//   is considered privileged activity.
// - Use dynamic filtering to track only apps managed under a privileged model 
//   (e.g., enterprise critical apps or high-scope app registrations).
// ----- Part 0: Dynamic Targeting (Application Modifications) -----
// To narrow down to specific app IDs or initiators, populate the arrays below; leave empty for all.
let TargetAppIds = dynamic([]);        // e.g., [""app-guid-123"", ""app-guid-456""]
let TargetInitiators = dynamic([]);    // e.g., [""admin@domain.com""]
// ----- Part 1: Filter for Relevant Application Modification Events -----
AuditLogs
| where TimeGenerated > ago(90d)
| where OperationName in (
    ""Update application"", 
    ""Update service principal"", 
    ""Update application – Certificates and secrets management""
)
// ----- Part 2: Parse Target Info and Modified Properties -----
| extend
    TargetResource = tostring(TargetResources[0]),
    AppId = tostring(TargetResources[0].id),
    AppDisplayName = tostring(TargetResources[0].displayName),
    InitiatedByUser = tostring(InitiatedBy.user.userPrincipalName),
    Operation = OperationName
| mv-expand ModifiedProperty = parse_json(tostring(TargetResources[0].modifiedProperties))
// ----- Part 3: Parse Attribute Changes -----
| extend
    AttributeName = tostring(ModifiedProperty.displayName),
    OldValue = tostring(ModifiedProperty.oldValue),
    NewValue = tostring(ModifiedProperty.newValue),
    DisplayName = strcat(AppDisplayName, "" ("", AppId, "")"")
// ----- Part 4: Apply Targeting Logic -----
| where isnotempty(InitiatedByUser)
| where array_length(TargetAppIds) == 0 or AppId in (TargetAppIds)
| where array_length(TargetInitiators) == 0 or InitiatedByUser in (TargetInitiators)
// ----- Part 5: Final Output -----
| distinct TimeGenerated, OperationName, InitiatedByUser, DisplayName, Operation, AttributeName, OldValue, NewValue, ['Target-Resource'] = TargetResource
| sort by TimeGenerated desc
| take 500"
EL0,01,AO,02,01,Identity,Privileged Identity & Credential Management,Track Usage,Credential Usage,Windows,SecurityEvent,Activity,4768 - A Kerberos authentication ticket (TGT) was requested,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4768,"// Objective: Detects Kerberos TGT (4768) requests using certificate authentication (PKINIT) via Windows SecurityEvent.
// Tracks strong-auth sign-ins (e.g., PIV/CAC/smartcard) by privileged users and endpoints for audit and compliance.
//
// Supports ICAM Pillar: ""Manage/Track Changes in Attributes & Credentials""
// Category: Privileged Identity & Credential Management (PIM)
//
// This query tracks 4768 Kerberos TGT requests where a certificate (PKINIT) was used.
// These are strong indicators of privileged sign-in (e.g., HSPD-12 or smartcard logon).
//
// Key Characteristics:
// - Detects cert-based logons to domain controllers
// - Targets specific users or certificate issuers
// - Device (Computer) can now be filtered to narrow down privileged endpoints
//
//-----Part 0: Dynamic Targeting-----
// To target specific users, certificate issuers, or devices, fill in the lists below; leave empty for all.
let TargetUsers = dynamic([]);            // e.g., [""privuser""]
let TargetCertIssuers = dynamic([]);      // e.g., [""Issuing-CA""]
let TargetDevices = dynamic([]);          // e.g., [""DC01"", ""Priv-Terminal""]
//
//-----Part 1: Filter and Parse 4768 Events-----
// GPO Path: To capture 4768 events (Kerberos TGT requests), enable on all domain controllers:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Account Logon > Audit Kerberos Authentication Service (Success, Failure)
// Note: 4768 logs every TGT request (success/failure). Critical for tracking both human and machine Kerberos usage and PKINIT (certificate-based) auth.
SecurityEvent
| where TimeGenerated >= ago(14d)
| where EventID == 4768
| where Activity == ""4768 - A Kerberos authentication ticket (TGT) was requested.""
| extend d = parse_xml(EventData)
| extend EventDataParsed = parse_json(tostring(d.EventData))
| mv-expand DataItem = EventDataParsed.Data
| extend Name = tostring(DataItem[""@Name""]), Value = tostring(DataItem[""#text""])
//-----Part 2: Summarize/Group by Ticket Request-----
| summarize 
    User = anyif(Value, Name == ""TargetUserName""),
    CertIssuerName = anyif(Value, Name == ""CertIssuerName""), 
    CertSerialNumber = anyif(Value, Name == ""CertSerialNumber""), 
    CertThumbprint = anyif(Value, Name == ""CertThumbprint"") 
    by TimeGenerated, Activity, Computer
//-----Part 3: Analyst Filtering-----
| where isnotempty(CertIssuerName) and isnotempty(CertSerialNumber) and isnotempty(CertThumbprint)
| where (array_length(TargetUsers) == 0 or User in (TargetUsers))
| where (array_length(TargetCertIssuers) == 0 or CertIssuerName in (TargetCertIssuers))
| where (array_length(TargetDevices) == 0 or Computer in (TargetDevices))
//-----Part 4: Exclude Computer Accounts by Default-----
// (Comment out to include machine TGT requests as well.)
| where User !contains ""$""
//-----Part 5: Add IsTargetedUser Flag (ALWAYS true or false)-----
| extend IsTargetedUser = (array_length(TargetUsers) > 0 and User in (TargetUsers))
//-----Part 6: Final Output-----
| project TimeGenerated, IsTargetedUser, User, ['Target Device'] = Computer, CertIssuerName, CertSerialNumber, CertThumbprint, Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AO,01,02,Identity,Privileged Identity & Credential Management,Track Usage,Credential Usage,Entra,SigninLogs,AuthenticationDetails,AuthenticationDetails,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-sign-ins,"// Objective: Audits interactive Entra sign-ins by privileged users (SigninLogs), showing which authentication method was used (e.g., FIDO2, OTP, password).
// Useful for verifying credential usage and strong authentication across privileged accounts.
//
// Supports ICAM Pillar: ""Track Usage > Credential Usage""
// Category: Privileged Identity & Credential Management (PIM)
//
// This query audits credential usage by expanding `AuthenticationDetails`
// from interactive sign-ins in Entra ID.
//
// Key Characteristics:
// - Tracks the authentication method used per sign-in (e.g., Password, FIDO2, OTP, etc.)
// - Filters to specific privileged users (if provided)
// - Removes non-contributive entries like ""Previously satisfied""
// - Useful for verifying strong auth (e.g., phishing-resistant methods) in daily use
// ----- Part 0: Dynamic Targeting (Entra Sign-ins) -----
let TargetUPNs = dynamic([]);  // e.g., [""admin@domain.com"", ""svc_jdoe@domain.com""]
let ExcludeSyncAccounts = true;         // Set to false to include all accounts
// ----- Part 1: Filter Interactive Sign-ins and Expand Credential Use -----
SigninLogs //Interactive user sign-ins are sign-ins that require the user to supply an authentication factor
| where TimeGenerated > ago(30d)
| mv-expand todynamic(AuthenticationDetails)
| extend
    AuthMethod = tostring(AuthenticationDetails.authenticationMethod),
    IsSyncAccount = UserPrincipalName has ""Sync""
| where AuthMethod <> ""Previously satisfied""
| where array_length(TargetUPNs) == 0 or UserPrincipalName in (TargetUPNs)
| where ExcludeSyncAccounts == false or IsSyncAccount == false
// ----- Part 2: Return Most Recent Credential Use Per UPN + Method -----
| summarize arg_max(TimeGenerated, Category, AppDisplayName) by UserPrincipalName, AuthMethod
// ----- Part 3: Final Output -----
| project TimeGenerated, UserPrincipalName, AuthMethod, Category, AppDisplayName
| sort by TimeGenerated desc
| take 50"
EL0,01,AO,01,03,Identity,Privileged Identity & Credential Management,Track Usage,Credential Usage,Entra,ADFSSignInLogs,OperationName ,Sign-in activity,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/hybrid/connect/how-to-connect-health-ad-fs-sign-in,"// Objective: Detects federated sign-ins (ADFS) by privileged accounts (ADFSSignInLogs).
// Surfaces high-value/risky federated authentication attempts, as privileged users should not be federated per Microsoft PIM guidance.
//
// This query helps:
// - Identify federated authentication attempts by privileged users
// - Detect misconfigurations that violate best practices for PIM enforcement
// - Monitor high-value accounts for risky or legacy auth paths
//-----Part 0: Dynamic Targeting-----
// Set arrays to filter for specific users or resource identities; leave empty for all.
let ResourceIdentities = dynamic([]);    // e.g., [""00000003-0000-0000-c000-000000000000""]
let TargetUsers = dynamic([]);           // e.g., [""user@domain.com""]
//
//-----Part 1: Filter for AD FS Sign-In Activity-----
ADFSSignInLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Sign-in activity""
| where (array_length(TargetUsers) == 0 or UserPrincipalName in (TargetUsers))
| where (array_length(ResourceIdentities) == 0 or ResourceIdentity in (ResourceIdentities))
//
//-----Part 2: Summarize for Dashboard-----
| summarize SigninCount = count() by TimeGenerated, UserPrincipalName, ResourceIdentity, Requirement
| sort by TimeGenerated desc
| take 50"
EL0,01,AP,01,01,Identity,Privileged Identity & Credential Management,Account,Deprovisioning,Entra,AuditLogs,OperationName,Remove,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"// Objective: Detects deprovisioning/removal of privileged roles via Entra PIM or Identity Governance (AuditLogs).
// Tracks who/what triggered privileged role removal to confirm proper lifecycle and offboarding controls.
//
// Identifies privileged role removals triggered by:
// - Entra PIM (activation expiration, manual removal)
// - Identity Governance policy enforcement
//
// Key Characteristics:
// - Focused on removals explicitly initiated by PIM services
// - Captures both the actor (PIM app) and the user/role affected
// - Helps confirm lifecycle enforcement and proper offboarding
// ----- Part 0: Dynamic Targeting (Optional) -----
let TargetUsers = dynamic([]);  // e.g., [""admin@domain.com""]
// ----- Part 1: Filter Deprovisioning Events -----
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName contains ""remove""
| where array_length(TargetUsers) == 0 or tostring(TargetResources[0].userPrincipalName) in (TargetUsers)
| extend InitiatedBy = tostring(Identity)
| where InitiatedBy has_any (""MS-PIM"", ""Azure AD PIM"")
// ----- Part 2: Extract Actor and Target Info -----
| extend
    Target = tostring(TargetResources[0].userPrincipalName),
    TargetRole = tostring(TargetResources[0].displayName),
    ResultStatus = tostring(Result)
// ----- Part 3: Final Output -----
| project TimeGenerated, OperationName, InitiatedBy, Target, TargetRole, ResultStatus
| sort by TimeGenerated desc
| take 50"
EL0,01,AP,07,02,Identity,Privileged Identity & Credential Management,Account,Deprovisioning,Microsoft Defender for Identity,IdentityDirectoryEvents,ActionType,Group membership changed,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDI#connect-events,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-identitydirectoryevents-table,"// Objective: Detects removals from sensitive AD groups (e.g., Domain Admins, Enterprise Admins) via Microsoft Defender for Identity (IdentityDirectoryEvents).
// Filters out sync/system events; provides full context for group deprovisioning actions affecting privileged accounts.
//
// ===== Part 0: Targeting (Optional Filters) =====
//
let TargetUPNs = dynamic([]);        // Example: [""user@domain.com""]
let ActorUPNs = dynamic([]);         // Example: [""admin@domain.com""]
let ActorDomains = dynamic([]);      // Example: [""DOMAIN""]
let SensitiveGroupName = pack_array( // Groups considered privileged/sensitive
    'Account Operators',
    'Administrators',
    'Domain Admins',
    'Backup Operators',
    'Domain Controllers',
    'Enterprise Admins',
    'Enterprise Read-only Domain Controllers',
    'Group Policy Creator Owners',
    'Incoming Forest Trust Builders',
    'Microsoft Exchange Servers',
    'Network Configuration Operators',
    'Print Operators',
    'Read-only Domain Controllers',
    'Replicator',
    'Schema Admins',
    'Server Operators'
);
//
// ===== Part 1: Core Filter for Group Changes =====
//
IdentityDirectoryEvents
| where TimeGenerated > ago(290d)
| where Application == ""Active Directory""
| where ActionType == ""Group Membership changed""
| where DestinationDeviceName != """" // Exclude events tied to AD Sync
//
// ===== Part 2: Extract Fields and Determine Action =====
//
| extend ToGroup = tostring(parse_json(AdditionalFields)[""TO.GROUP""])
| extend FromGroup = tostring(parse_json(AdditionalFields)[""FROM.GROUP""])
| extend Target_Group = tostring(parse_json(AdditionalFields)[""TARGET_OBJECT.GROUP""])
| extend Action = iff(isempty(ToGroup), ""Remove"", ""Add"")
| extend GroupModified = iff(isempty(ToGroup), FromGroup, ToGroup)
//
// ===== Part 3: Apply Group and Action Filters =====
//
| where GroupModified in~ (SensitiveGroupName)
| where Action == ""Remove"" // Only show deprovisioning actions
//
// ===== Part 4: Apply Optional Targeting Logic =====
//
| where (array_length(TargetUPNs) == 0 or TargetAccountUpn in~ (TargetUPNs))
| where (array_length(ActorUPNs) == 0 or AccountName in~ (ActorUPNs))
| where (array_length(ActorDomains) == 0 or AccountDomain in~ (ActorDomains))
//
// ===== Part 5: Final Projection =====
//
| project TimeGenerated, Action, GroupModified, Target_Account = TargetAccountDisplayName, Target_UPN = TargetAccountUpn, Target_Group, DC = DestinationDeviceName, Actor = AccountName, ActorDomain = AccountDomain, AdditionalFields
| sort by TimeGenerated desc
| take 50"
EL0,01,AP,06,03,Identity,Privileged Identity & Credential Management,Account,Deprovisioning,Microsoft Defender for Endpoint,DeviceEvents,ActionType,UserAccountRemovedFromLocalGroup,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDE#connect-events,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-deviceevents-table,"//  Objective: Tracks removal of user accounts from sensitive local groups using Microsoft Defender for Endpoint (MDE) DeviceEvents.
// Detects deprovisioning of privileged access (ActionType: UserAccountRemovedFromLocalGroup).
//
// ----- Part 0: Targeting -----
// Enriches with UEBA/IdentityInfo for context (DisplayName/UPN) on the removed SID.
// Supports analyst-driven targeting by SID, actor, or group.
// Useful for local admin removal, workstation/server hardening, and compliance.
// Enriches the removed user's SID with DisplayName and UPN from IdentityInfo (UEBA).
// Supports optional targeting by SID, actor name, and group keyword.
//
let TargetSIDs = dynamic([]);     // Example: [""S-1-5-21-...""]
let ActorNames = dynamic([]);     // Example: [""xadmin""]
let MatchGroups = dynamic([]);    // Example: [""Tier1-Admins""] Other known privileged groups
let SensitiveGroupName = pack_array( // Known privileged groups
    'Account Operators',
    'Administrators',
    'Domain Admins',
    'Backup Operators',
    'Domain Controllers',
    'Enterprise Admins',
    'Enterprise Read-only Domain Controllers',
    'Group Policy Creator Owners',
    'Incoming Forest Trust Builders',
    'Microsoft Exchange Servers',
    'Network Configuration Operators',
    'Print Operators',
    'Read-only Domain Controllers',
    'Replicator',
    'Schema Admins',
    'Server Operators',
    'Remote Desktop Users'
);
//
// ----- Part 1: Core Filter for Local Group Removals -----
//
DeviceEvents
| where TimeGenerated > ago(330d)
| where ActionType == ""UserAccountRemovedFromLocalGroup""
//
// ----- Part 2: Parse Fields and Identify Group Context -----
//
| extend Fields = parse_json(AdditionalFields)
| extend RemoveFromGroup = tostring(Fields.GroupName)
| extend GroupDomainName = tostring(Fields.GroupDomainName)
//
// ----- Part 3: Apply Group Filters (Exact + Optional Partial Match) -----
//
| where RemoveFromGroup in (SensitiveGroupName)
      or (array_length(MatchGroups) == 0 or tolower(RemoveFromGroup) has_any (MatchGroups))
//
// ----- Part 4: Construct Actor/Target and Apply Targeting -----
//
| extend InitiatedActor = strcat(InitiatingProcessAccountDomain, ""\\"", InitiatingProcessAccountName)
| extend TargetSID = AccountSid
| where (array_length(TargetSIDs) == 0 or TargetSID in~ (TargetSIDs))
| where (array_length(ActorNames) == 0 or InitiatingProcessAccountName in~ (ActorNames))
| where InitiatedActor !contains ""$"" // Exclude machine/system accounts
//
// ----- Part 5: Enrich with Identity Info (UEBA) -----
//
| join kind=leftouter (
    IdentityInfo
    | where TimeGenerated > ago(30d)
    | summarize arg_max(TimeGenerated, *) by AccountSID
    | project AccountSID, AccountDisplayName, AccountUPN
) on $left.TargetSID == $right.AccountSID
//
// ----- Part 6: Final Projection -----
//
| distinct TimeGenerated, DeviceName, ActionType, InitiatedActor, TargetSID, AccountDisplayName, AccountUPN, GroupDomainName, RemoveFromGroup
| sort by TimeGenerated desc
| take 50"
EL0,01,AQ,01,01,Identity,Privileged Identity & Credential Management,Credentials,Establish & Manage Privileges,Entra,AuditLogs,TargetResources,role,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"// Objective: Detects provisioning of privileged roles in Entra ID (AuditLogs), focused on ""Add member to role"" events.
// Parses detailed role, group, and user context for each event, supports dynamic filtering by user, app, or role.
// Supports privileged access reviews and ""Establish & Manage Privileges"" pillar.
//
// ----- Part 0: Analyst-Driven Targeting (optional) -----
// Filter for specific users, apps, or roles. Leave arrays empty to return all.
//
let TargetUsers = dynamic([]);     // Example: [""jdoe@contoso.com""]
let TargetApps  = dynamic([]);     // Example: [""MyAutomationApp""]
let TargetRoles = dynamic([]);     // Example: [""Global Administrator""]
//
// ----- Part 1: Filter for Role-Related Provisioning Events -----
// Captures role assignments, removals, and similar events involving roles.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName has ""role""
//
// ----- Part 2: Parse Actor & Target Details -----
// Extract initiator info (user or app) and expand target resources.
//
| extend InitiatedByUser = tostring(InitiatedBy.user.userPrincipalName)
| extend InitiatedByApp  = tostring(InitiatedBy.app.displayName)
| extend InitiatorType   = case(
    isnotempty(InitiatedByUser), ""User"",
    isnotempty(InitiatedByApp), ""Application"",
    ""Other""
)
| mv-apply TargetResource = parse_json(tostring(TargetResources)) on (
    extend
        ResourceType        = tostring(TargetResource.type),
        ResourceDisplayName = tostring(TargetResource.displayName),
        ResourceUPN         = tostring(TargetResource.userPrincipalName),
        ResourceId          = tostring(TargetResource.id)
)
//
// ----- Part 3: Summarize Per Event -----
// Pull relevant fields based on resource type.
//
| summarize
    RoleName         = anyif(ResourceDisplayName, ResourceType == ""Role""),
    GroupName        = anyif(ResourceDisplayName, ResourceType == ""Other""),
    TargetUserUPN    = anyif(ResourceUPN, ResourceType == ""User""),
    TargetResourceId = anyif(ResourceId, ResourceType == ""Role""),
    GroupId          = anyif(ResourceId, ResourceType == ""Other"")
    by TimeGenerated, OperationName, InitiatorType, InitiatedByUser, InitiatedByApp, Category, AADOperationType, Result
//
// ----- Part 4: Null Handling -----
// Replace empty values with ""N/A"" to improve readability.
//
| extend
    RoleName      = iif(isempty(RoleName), ""N/A"", RoleName),
    GroupName     = iif(isempty(GroupName), ""N/A"", GroupName),
    TargetUserUPN = iif(isempty(TargetUserUPN), ""N/A"", TargetUserUPN)
//
// ----- Part 5: Apply Targeting Filters -----
// Use analyst input arrays for scoped filtering.
//
| where (array_length(TargetUsers) == 0 or TargetUserUPN in~ (TargetUsers))
| where (array_length(TargetApps)  == 0 or InitiatedByApp in~ (TargetApps))
| where (array_length(TargetRoles) == 0 or RoleName in~ (TargetRoles))
| where OperationName has ""Add member to role"" //establishing for establighs and manage privileges category
//
// ----- Part 6: Final Output -----
// Clean, enriched view of privileged role provisioning.
//
| project TimeGenerated, OperationName, InitiatorType, InitiatedByUser, InitiatedByApp, RoleName, GroupName, TargetUserUPN, Category, AADOperationType, Result
| sort by TimeGenerated desc
| take 50
"
EL0,01,AR,01,01,Identity,Privileged Identity & Credential Management,Session Management and Auditing,"Isolate, Monitor, Record, Audit Privilege Sessions",Entra,IdentityInfo,AssignedRoles,make_set,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-sign-ins,"// Objective: Maps privileged role assignments (IdentityInfo) to session activity (SigninLogs), highlighting device trust posture.
// Tracks interactive sign-ins for privileged role holders and surfaces compliant/managed status for session auditing.
// Supports analyst-driven targeting by user, device, or role.
// Useful for session isolation, monitoring, and auditing of privileged accounts.
//
// ----- Part 0: Analyst-Driven Targeting -----
let TargetUsers = dynamic([]);
let TargetDevices = dynamic([]);
let TargetRoles = dynamic([]); // Leave empty for all roles, or populate with specific ones
// ----- Part 1: Resolve Users with Any Roles or Matching TargetRoles -----
let RoleUsers = IdentityInfo
| where isnotempty(AssignedRoles)
| extend FlattenedRoles = AssignedRoles
| mv-expand FlattenedRoles
| summarize AssignedRoles = make_set(FlattenedRoles, 10) by AccountUPN
| extend HasRelevantRole = iff(array_length(TargetRoles) == 0 or AssignedRoles has_any (TargetRoles), true, false)
| where HasRelevantRole;
// ----- Part 2: Filter Sign-ins from Privileged Role Holders -----
SigninLogs
| where TimeGenerated > ago(7d)
| where isnotempty(DeviceDetail.displayName)
| where (array_length(TargetUsers) == 0 or UserPrincipalName in (TargetUsers))
// ----- Part 3: Join to Enrich with Roles -----
| join kind=inner (RoleUsers) on $left.UserPrincipalName == $right.AccountUPN
// ----- Part 4: Device Trust Posture -----
| extend 
    DeviceName = tostring(DeviceDetail.displayName),
    Compliant = tostring(DeviceDetail.isCompliant),
    Managed = tostring(DeviceDetail.isManaged)
| where (array_length(TargetDevices) == 0 or DeviceName in (TargetDevices))
| extend TrustStatus = case(
    tolower(Compliant) == ""true"" and tolower(Managed) == ""true"", ""Trusted"",
    tolower(Compliant) == ""false"" or tolower(Managed) == ""false"", ""Untrusted"",
    ""Unknown""
)
// ----- Part 5: Output Most Recent Session per User -----
| summarize arg_max(TimeGenerated, *) by UserPrincipalName
| extend Roles = strcat_array(AssignedRoles, "", "")
| project TimeGenerated, UserPrincipalName, Identity, Roles, DeviceName, Compliant, Managed, TrustStatus
| order by TimeGenerated desc"
EL0,01,AR,01,02,Identity,Privileged Identity & Credential Management,Session Management and Auditing,"Isolate, Monitor, Record, Audit Privilege Sessions",Entra,AuditLogs,OperationName,role,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"// Objective: Maps privileged role assignments (IdentityInfo) to session activity (SigninLogs), highlighting device trust posture.
// Tracks interactive sign-ins for privileged role holders and surfaces compliant/managed status for session auditing.
// Supports analyst-driven targeting by user, device, or role.
// Useful for session isolation, monitoring, and auditing of privileged accounts.
//
// ----- Part 0: Analyst-Driven Targeting -----
let TargetUsers = dynamic([]);
let TargetDevices = dynamic([]);
// ----- Part 1: Sign-ins With Trust Extracted BEFORE Join -----
let SigninData = SigninLogs
| where TimeGenerated > ago(30d)
| where (array_length(TargetUsers) == 0 or UserPrincipalName in (TargetUsers))
| extend 
    Compliant = tostring(DeviceDetail.isCompliant),
    Managed = tostring(DeviceDetail.isManaged),
    DeviceName = tostring(DeviceDetail.displayName)
| extend 
    TrustStatus = case(
        Compliant =~ ""true"" and Managed =~ ""true"", ""Trusted"",
        Compliant =~ ""false"" or Managed =~ ""false"", ""Untrusted"",
        ""Unknown""
    )
| project SigninTime = TimeGenerated, UserPrincipalName, Identity, DeviceName, Compliant, Managed, TrustStatus;
// ----- Part 2: Filter Role Operations from AuditLogs -----
let RoleOps = AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName has ""role""
| where TargetResources has ""role""
| extend Actor = tostring(InitiatedBy.user.userPrincipalName)
| project AuditTime = TimeGenerated, Actor, OperationName, Result;
// ----- Part 3: Temporal Join and Final Output -----
SigninData
| join kind=inner (RoleOps) on $left.UserPrincipalName == $right.Actor
| where datetime_diff(""minute"", AuditTime, SigninTime) between (0 .. 15)
| summarize arg_max(AuditTime, *) by UserPrincipalName
| project TimeGenerated = AuditTime, UserPrincipalName, Identity, OperationName, Result, DeviceName, Compliant, Managed, TrustStatus
| order by TimeGenerated desc
| take 50"
EL0,01,AS,03,01,Identity,Privileged Identity & Credential Management,Control Privileged Actions,Commands,Azure,AzureActivity,ActivityStatusValue,Start,https://learn.microsoft.com/en-us/azure/sentinel/quickstart-onboard,https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azureactivity,"// Objective: Audits privileged Azure control-plane operations by correlating AzureActivity logs with Entra role holders for targeted investigation of sensitive actions.
// Extracts metadata from Properties, supports dynamic filtering by user, role, or resource group.
// Use to audit privileged operations across Azure resources, see who did what, and scope investigations.
// Useful for cloud resource control and role-based privileged action tracking.
//
// ----- Part 0: Target Users -----
let TargetUsers = dynamic([]); // Example: [""admin@contoso.com""]
let TargetRoles = dynamic([]); // Example: [""Global Administrator""]
let TargetResourceGroups = dynamic([]); // Example: [""RG-Production"", ""RG-Dev""]
// ----- Part 1: Get Privileged Users via Roles -----
let RoleUsers = IdentityInfo
| where isnotempty(AssignedRoles)
| extend FlattenedRoles = AssignedRoles
| mv-expand FlattenedRoles
| summarize AssignedRoles = make_set(FlattenedRoles, 10) by AccountUPN
| extend HasRelevantRole = iff(array_length(TargetRoles) == 0 or AssignedRoles has_any (TargetRoles), true, false)
| where HasRelevantRole
| project AccountUPN, AssignedRoles;
// ----- Part 2: Pull AzureActivity Events -----
let RawActivity = AzureActivity
| where TimeGenerated > ago(7d)
| where ActivityStatusValue == ""Start""
| where (array_length(TargetUsers) == 0 or Caller in (TargetUsers))
| project TimeGenerated, Caller, OperationNameValue, ActivityStatusValue, Properties;
// ----- Part 3: Join with Role-Enriched Users -----
RawActivity
| join kind=inner (RoleUsers) on $left.Caller == $right.AccountUPN
// ----- Part 4: Parse Properties inline
| extend
    EventCategory = tostring(parse_json(Properties)[""eventCategory""]),
    Entity = tostring(parse_json(Properties)[""entity""]),
    Message = tostring(parse_json(Properties)[""message""]),
    ResourceGroup = tostring(parse_json(Properties)[""resourceGroup""]),
    Resource = tostring(parse_json(Properties)[""resource""]),
    SubscriptionId = tostring(parse_json(Properties)[""subscriptionId""]),
    ClientIP = tostring(parse_json(tostring(parse_json(Properties)[""httpRequest""]))[""clientIpAddress""]),
    RoleList = strcat_array(AssignedRoles, "","")
// ----- Part 5: Optional Filter on Resource Groups
| where (array_length(TargetResourceGroups) == 0 or ResourceGroup in (TargetResourceGroups))
// ----- Part 6: Output
| distinct TimeGenerated, Caller, RoleList, OperationNameValue, ActivityStatusValue,
           EventCategory, Message, Entity, ResourceGroup, Resource, SubscriptionId, ClientIP
| order by TimeGenerated desc
| take 50"
EL0,01,AT,01,01,Identity,Privileged Identity & Credential Management,Control Privileged Actions,Tasks,Sentinel,"
IdentityInfo",Join,AccountUPN,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"// Objective: Summarizes privileged user activity across Entra and Azure, filtered by user, role, or operation, to provide a unified view for investigations.// (AuditLogs, AzureActivity), filtered by users, roles, operations, and exclusions.
// -----Part 0: Targeting -----
let TargetUsers = dynamic([]);        // Optional filter for specific users
let TargetRoles = dynamic([]);        // Optional filter for role names
let OperationFilter = dynamic([]);    // Optional include filter for specific operations
let ExcludeKeywords = dynamic([""read"", ""action"", ""Get authenticationEventListeners"", ""Validate user authentication""]); // Optional exclude filter
let TableFilter = dynamic([""AuditLogs"", ""AzureActivity""]);  // Choose tables to include - Remove each one to view better results
// ----- Part 1: Resolve Users with Assigned Roles -----
let RoleUsers = IdentityInfo
| where isnotempty(AssignedRoles)
| mv-expand Role = AssignedRoles
| summarize AssignedRoles = make_set(Role, 100) by AccountUPN
| extend HasRole = array_length(TargetRoles) == 0 or AssignedRoles has_any (TargetRoles)
| where HasRole
| project AccountUPN, RoleList = strcat_array(AssignedRoles, "","");
// ----- Part 2: Pull AuditLogs Operations -----
let AuditOps = AuditLogs
| where TimeGenerated > ago(30d)
| where array_length(TargetUsers) == 0 or Identity in (TargetUsers)
| project TimeGenerated, Identity, Operation = OperationName, Source = ""AuditLogs"";
// ----- Part 3: Pull AzureActivity Operations -----
let AzureOps = AzureActivity
| where TimeGenerated > ago(30d)
| where array_length(TargetUsers) == 0 or Caller in (TargetUsers)
| project TimeGenerated, Identity = Caller, Operation = OperationNameValue, Source = ""AzureActivity"";
// ----- Part 4: Combine, Join, and Filter -----
union AuditOps, AzureOps
| where Source in~ (TableFilter)
| where array_length(OperationFilter) == 0 or Operation in~ (OperationFilter)
| extend OperationLower = tolower(Operation)
| where array_length(ExcludeKeywords) == 0 or not(OperationLower has_any (ExcludeKeywords))
| join kind=inner (RoleUsers) on $left.Identity == $right.AccountUPN
| summarize OperationCount = count() by Identity, RoleList, Operation, Source
| order by OperationCount desc"
EL0,01,AU,01,01,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Entra,AuditLogs,OperationName,Add app role assignment to service principal,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"
// Objective: Detects privilege escalation by tracking app role assignments to service principals, highlighting newly delegated permissions to applications.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all results.
//
let TargetSPs = dynamic([]);     // Example: dynamic([""MyAppServicePrincipal""])
let TargetActors = dynamic([]);  // Example: dynamic([""admin@contoso.com""]);
//
// ----- Part 1: Track Privilege Escalation via App Role Assignment to Service Principals -----
// This identifies assignments of delegated permissions (e.g., MSGraph roles) to service principals.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Add app role assignment to service principal""
//
// ----- Part 2: Extract Key Fields -----
// Fixed index positions used for AppRole and SP name based on observed property structure.
//
| extend AppRoleAdded = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue)))
| extend ActorIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)
| extend Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)
| extend ServicePrincipalName = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[6].newValue)))
//
// ----- Part 3: Apply Optional Targeting -----
//
| where (array_length(TargetSPs) == 0 or ServicePrincipalName in (TargetSPs))
| where (array_length(TargetActors) == 0 or Actor in (TargetActors))
//
// ----- Part 4: Final Output -----
//
| distinct TimeGenerated, OperationName, AppRoleAdded, ServicePrincipalName, Actor, ActorIPAddress
| sort by TimeGenerated desc
| take 50"
EL0,01,AU,01,02,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Entra,AuditLogs,OperationName,Add member to role,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"// Objective: Monitors Entra role assignments to service principals, surfacing delegated privileges that may indicate escalation or risky app permissions.
//
let TargetSPs = dynamic([]);     // Example: dynamic([""MyAppServicePrincipal""])
let TargetActors = dynamic([]);  // Example: dynamic([""admin@contoso.com""]);
//
// ----- Part 1: Filter AuditLogs for Role Assignments -----
// Captures events where Entra roles are added to service principals.
//
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Add member to role""
//
// ----- Part 2: Extract Key Fields -----
// Pulls service principal type, role, actor, and object ID.
//
| extend 
    ServicePrincipalType = tostring(TargetResources[0].type),
    ServicePrincipalObjectId = tostring(TargetResources[0].id),
    RoleAdded = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue))),
    ServicePrincipalName = tostring(TargetResources[0].displayName),
    Actor = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName),
    ActorIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)
//
// ----- Part 3: Apply Escalation Filters and Optional Targeting -----
// Only include service principal assignments, with optional filtering.
//
| where ServicePrincipalType == ""ServicePrincipal""
| where (array_length(TargetSPs) == 0 or ServicePrincipalName in (TargetSPs))
| where (array_length(TargetActors) == 0 or Actor in (TargetActors))
//
// ----- Part 4: Final Output -----
//
| distinct TimeGenerated, OperationName, RoleAdded, ServicePrincipalName, ServicePrincipalObjectId, Actor, ActorIPAddress
| sort by TimeGenerated desc
| take 50"
EL0,01,AU,03,03,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Azure,AzureActivity,OperationNameValue,MICROSOFT.AUTHORIZATION/ROLEASSIGNMENTS/WRITE,https://learn.microsoft.com/en-us/azure/sentinel/quickstart-onboard,https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azureactivity,"// Objective: Surfaces Azure RBAC role assignments to service principals, enabling detection of privileged access or escalation in Azure resource scopes.
//
let TargetSPs = dynamic([]);     // Example: dynamic([""11111111-2222-3333-4444-555555555555""])
let TargetActors = dynamic([]);  // Example: dynamic([""admin@contoso.com""]);
//
// ----- Part 1: Filter Azure Activity for Role Assignments -----
// Captures all WRITE operations to role assignments in Azure.
//
AzureActivity
| where TimeGenerated > ago(30d)
| where OperationNameValue == ""MICROSOFT.AUTHORIZATION/ROLEASSIGNMENTS/WRITE""
//
// ----- Part 2: Extract Key Fields from Properties -----
// Parse nested requestbody for SP and role details.
//
| extend RawProps = parse_json(tostring(Properties_d.requestbody)).Properties
| extend 
    ServicePrincipalObjectId = tostring(RawProps.PrincipalId),
    ServicePrincipalType = tostring(RawProps.PrincipalType),
    Scope = tostring(RawProps.Scope),
    RoleAdded = tostring(RawProps.RoleDefinitionId),
    Actor = tostring(Properties_d.caller),
    ResourceProvider = tostring(parse_json(Properties).resourceProviderValue)
//
// ----- Part 3: Apply Escalation Filters and Optional Targeting -----
// Only include entries for service principals, with optional filters for SPs and actors.
//
| where ServicePrincipalType == ""ServicePrincipal""
| where (array_length(TargetSPs) == 0 or ServicePrincipalObjectId in (TargetSPs))
| where (array_length(TargetActors) == 0 or Actor in (TargetActors))
//
// ----- Part 4: Final Output -----
//
| distinct TimeGenerated, RoleAdded, ResourceProvider, Scope, ServicePrincipalObjectId, Actor
| sort by TimeGenerated desc
| take 50"
EL0,01,AU,03,04,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Azure,AzureDiagnostics,ResouceType,Vaults,https://learn.microsoft.com/en-us/azure/sentinel/connect-services-diagnostic-setting-based#connect-via-a-diagnostic-setting-based-connector-managed-by-azure-policy,https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azurediagnostics,"// Objective: Tracks additions of Key Vault access policies for service principals, flagging escalations where apps gain access to keys, secrets, or certificates.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all results.
//
let TargetSPs = dynamic([]);     // Example: dynamic([""01fc33a7-78ba-4d2f-a4b7-768e336e890e""])
let TargetActors = dynamic([]);  // Example: dynamic([""admin@contoso.com""]);
//
// ----- Part 1: Filter AzureDiagnostics for VaultPatch Events -----
// Captures successful access policy changes to Key Vaults.
//
AzureDiagnostics
| where TimeGenerated > ago(30d)
| where ResourceType == ""VAULTS""
| where OperationName == ""VaultPatch""
| where ResultType == ""Success""
//
// ----- Part 2: Join with AuditLogs for SP Display Name and Actor Identity -----
// Links objectId to displayName and user who modified policy.
//
| join kind=inner (
    AuditLogs
    | extend oid = tostring(TargetResources[0].id)
) on $left.addedAccessPolicy_ObjectId_g == $right.oid
//
// ----- Part 3: Extract and Rename Fields -----
// Includes SP name, app ID, key/secret/cert policy details, and actor info.
//
| extend 
    SPName = tostring(TargetResources[0].displayName),
    AppID = tostring(AdditionalDetails[0].value),
    SPObjectID = addedAccessPolicy_ObjectId_g,
    Actor = identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_name_s,
    AddedKeyPolicy = addedAccessPolicy_Permissions_keys_s,
    AddedSecretPolicy = addedAccessPolicy_Permissions_secrets_s,
    AddedCertPolicy = addedAccessPolicy_Permissions_certificates_s
//
// ----- Part 4: Apply Filters for Escalation and Optional Targeting -----
// Filters to only include escalations involving meaningful access grants.
//
| where isnotempty(SPObjectID)
| where isnotempty(AddedKeyPolicy) or isnotempty(AddedSecretPolicy) or isnotempty(AddedCertPolicy)
| where (array_length(TargetSPs) == 0 or SPObjectID in (TargetSPs))
| where (array_length(TargetActors) == 0 or Actor in (TargetActors))
//
// ----- Part 5: Final Output -----
//
| distinct TimeGenerated, KeyVaultName = Resource, SPName, SPObjectID, AppID, Actor, IPAddressofActor = CallerIPAddress, AddedSecretPolicy, AddedKeyPolicy, AddedCertPolicy
| sort by TimeGenerated desc
| take 50"
EL0,01,AU,01,05,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Entra,AuditLogs,OperationName,Add member to role completed (PIM activation),https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"// Objective: Identifies PIM role or group activations occurring outside standard working hours to support investigation of after-hours privileged access.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all results.
let TargetIdentities = dynamic([]); // Example: dynamic([""user@domain.com""])
let TargetRoles = dynamic([]);      // Example: dynamic([""Global Administrator"", ""Privileged Role Administrator""])
//
// ----- Part 1: Filter for After-Hours PIM Activations -----
// Adjust the UTC offset below to reflect your local timezone (e.g., -4h for Eastern Time).
// NOTE: This assumes your Log Analytics workspace is set to display timestamps in UTC.
// If it's set to local time already, you may need to REMOVE the offset to avoid double-shifting.
//
AuditLogs
| extend LocalTime = TimeGenerated - 4h  // Adjust offset to match your regional timezone
| where LocalTime > ago(30d)
| where hourofday(LocalTime) !between (6 .. 18)  // After-hours = before 6 AM or after 6 PM local time
//
// ----- Part 2: Filter for PIM Role Activation Events -----
//
| where OperationName == ""Add member to role completed (PIM activation)""
//
// ----- Part 3: Extract Actor and Role/Group Context -----
// Identifies the user performing the action and the activated role or group.
//
| extend 
    Identity = tostring(parse_json(tostring(InitiatedBy.user)).displayName),
    PIMGroupUpdated = case(
        tostring(TargetResources[3].type) == ""Other"", tostring(TargetResources[3].displayName), """"
    ),
    PIMRoleUpdated = case(
        tostring(TargetResources[3].type) == ""Directory"", tostring(TargetResources[0].displayName), """"
    )
//
// ----- Part 4: Normalize Output Labels -----
// Adds ""Member"" or ""Role"" suffixes to distinguish between PIM Groups and Roles.
//
| extend 
    PIMRoleUpdated = case(isnotempty(PIMGroupUpdated), strcat(PIMRoleUpdated, "" Member""), PIMRoleUpdated),
    PIMGroupUpdated = case(isnotempty(PIMRoleUpdated), strcat(PIMGroupUpdated, "" Role""), PIMGroupUpdated)
//
// ----- Part 5: Apply Targeting and Return Output -----
//
| where (array_length(TargetIdentities) == 0 or Identity in (TargetIdentities))
| where (array_length(TargetRoles) == 0 or PIMRoleUpdated in (TargetRoles))
| distinct LocalTime, Identity, PIMRoleUpdated, PIMGroupUpdated, ResultReason
| sort by LocalTime desc
| take 50"
EL0,01,AU,01,06,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Entra,AuditLogs,OperationName,"""""",https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"// Objective: Detects anomalous privileged operations by surfacing new AuditLogs operation names not observed in baseline windows for early detection of suspicious changes.
// Detects new/first-time AuditLogs operation names that were not seen in the past 14–30 days but appear in the last 7 days.
// Used for anomaly detection in privileged or sensitive changes.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all results.
let TargetUPNs = dynamic([]);         // Example: dynamic([""admin@domain.com""])
let TargetActorAppIds = dynamic([]);  // Example: dynamic([""00000003-0000-0000-c000-000000000000""])
//
// ----- Part 1: Historical Baseline (14–30 Days Ago) -----
// Captures expected/known operations during the baseline window.
let existingoperations = 
    AuditLogs
    | where TimeGenerated between (ago(30d) .. ago(14d))
    | distinct OperationName;
//
// ----- Part 2: Detect New Operations in the Past 7 Days -----
// Filters for operations not seen in the baseline window.
//
AuditLogs
| where TimeGenerated > ago(7d)
| where OperationName !in (existingoperations)
//
// ----- Part 3: Extract Actor and Target Context -----
// Includes fallback logic for app-based actions and null values.
//
| extend
    ActorUPN = case(
        isnotempty(tostring(InitiatedBy.user.userPrincipalName)), tostring(InitiatedBy.user.userPrincipalName),
        isnotempty(tostring(InitiatedBy.app.displayName)), strcat(""App: "", tostring(InitiatedBy.app.displayName)),
        ""Unknown""
    ),
    ActorAppId = tostring(InitiatedBy.app.appId),
    IPAddress = coalesce(tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress)),
    Target = tostring(TargetResources[0].displayName),
    Result = Result
//
// ----- Part 4: Apply Targeting Filters -----
// Optionally filters on UPNs or App IDs for focused review.
//
| where (array_length(TargetUPNs) == 0 or ActorUPN in (TargetUPNs))
| where (array_length(TargetActorAppIds) == 0 or ActorAppId in (TargetActorAppIds))
//
// ----- Part 5: Summarize and Output Results -----
// Returns high-level overview of new operations with minimal duplication.
//
| summarize Count = count(), SampleTime = arg_max(TimeGenerated, Target, Result, IPAddress)
    by OperationName, Category, ActorUPN, ActorAppId
| project OperationName, Category, ActorUPN, ActorAppId, Target, Result, IPAddress, Count, SampleTime
| sort by Count desc
| take 50"
EL0,01,AU,01,07,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Entra,AADServicePrincipalSignInLogs,ResultType,0,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-sign-ins,"// Objective: Alerts on successful service principal sign-ins from new IP addresses not seen in historical baselines, highlighting potential compromise or misuse.
// Detects when a Service Principal signs in successfully (ResultType == \""0\"") from a new IP address in the last 7 days compared to prior 90-day baseline.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
let TargetServicePrincipals = dynamic([]); // Example: dynamic([""MyAppServicePrincipal""])
// ----- Part 1: Define Timeframes -----
let BaselinePeriod = 30d;
let DetectionPeriod = 7d;
// ----- Part 2: Establish Historical IP Baseline -----
// Captures known AppId/IP pairs in the baseline window.
let HistoricalIPs =
    AADServicePrincipalSignInLogs
    | where TimeGenerated between (ago(BaselinePeriod) .. ago(DetectionPeriod))
    | distinct AppId, IPAddress;
// ----- Part 3: Detect New Service Principal IP Usage in Last 7 Days -----
// Finds new AppId/IP pairs, filtered for success and optional targeting.
AADServicePrincipalSignInLogs
| where TimeGenerated > ago(DetectionPeriod)
| where ResultType == ""0""
| where array_length(TargetServicePrincipals) == 0 or ServicePrincipalName in (TargetServicePrincipals)
| join kind=leftanti HistoricalIPs on AppId, IPAddress
| project TimeGenerated, ServicePrincipalName, AppId, IPAddress
| sort by TimeGenerated desc
| take 50"
EL0,01,AU,01,08,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Entra,AADManagedIdentitySignInLogs,ResultType,0,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-sign-ins,"// Objective: Summarizes all resources accessed by each managed identity over the past 90 days to support assessment of privilege spread and blast radius.
// The higher the resource count, the higher the potential blast radius.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave array empty to return all results.
let TargetManagedIdentities = dynamic([]); // Example: dynamic([""my-managed-identity""])
//
// ----- Part 1: Summarize Resource Accesses -----
// Collects unique resource names accessed by each managed identity.
//
AADManagedIdentitySignInLogs
| where TimeGenerated > ago(30d)
| where ResultType == 0
| where array_length(TargetManagedIdentities) == 0 or ServicePrincipalName in (TargetManagedIdentities)
| summarize ResourcesAccessed = make_set(ResourceDisplayName), ResourceCount = dcount(ResourceDisplayName) by ServicePrincipalName
| sort by ResourceCount desc
| take 50"
EL0,01,AU,01,09,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Entra,AADManagedIdentitySignInLogs,ResultType,0,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/concept-sign-ins,"// Objective: Flags managed identities accessing new resources in the last 7 days that were not accessed previously, identifying privilege expansion or lateral movement.
// Useful for identifying sudden “blast radius” expansion or lateral movement.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave array empty to return all results.
let TargetManagedIdentities = dynamic([]); // Example: dynamic([""my-managed-identity-guid""])
//
// ----- Part 1: Build 30-Day Resource Baseline -----
// List each Service Principal and resource accessed in the 30–7 day baseline window.
//
let HistoricalAccess =
    AADManagedIdentitySignInLogs
    | where TimeGenerated > ago(30d) and TimeGenerated < ago(7d)
    | where ResultType == ""0""
    | distinct ServicePrincipalId, ResourceIdentity;
//
// ----- Part 2: Detect New Resource Accesses in Last 7 Days -----
// Find new ServicePrincipalId/ResourceIdentity pairs.
//
AADManagedIdentitySignInLogs
| where TimeGenerated > ago(7d)
| where ResultType == ""0""
| where array_length(TargetManagedIdentities) == 0 or ServicePrincipalId in (TargetManagedIdentities)
| join kind=leftanti HistoricalAccess on ServicePrincipalId, ResourceIdentity
| project TimeGenerated, ServicePrincipalId, ServicePrincipalName, ResourceIdentity, ResourceDisplayName
| sort by TimeGenerated desc
| take 50"
EL0,01,AU,01,10,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Entra,AuditLogs,OperationName,Consent to application,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-integrate-activity-logs-with-azure-monitor-logs,https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities,"// Objective: Reviews all Entra application consent grants—including admin and delegated consent—to surface high-risk app permissions and audit privilege delegation.
//   - IsAdminConsent: ""True"" if the consent was granted by an admin (often for all users), ""False"" otherwise.
//   - IsAppOnly: ""True"" if the consent was granted for application-only (client credentials) flows—no user context required. Example: service-to-service automation, background daemons, etc.
//                ""False"" means the consent is delegated—app acts on behalf of a signed-in user.
//   - OnBehalfOfAll: ""True"" means the consent applies to all users in the tenant; ""False"" means it applies to a specific user.
//   - AppDisplayName: The name of the application being granted consent.
//   - ConsentedAppId: The Application (Client) ID of the app receiving consent.
//   - PermissionsList: List of permission scopes/roles granted (e.g., ""Directory.Read.All"", ""User.ReadWrite.All"").
// Reviews all consent grants by Entra Audit Logs (OperationName = ""Consent to application"").
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all results.
let TargetUPNs = dynamic([]); // Example: dynamic([""admin@domain.com""])
let TargetApps = dynamic([]); // Example: dynamic([""Microsoft Graph Command Line Tools""])
//
// ----- Part 1: Filter for Consent Grant Events -----
AuditLogs
| where TimeGenerated > ago(30d)
| where OperationName == ""Consent to application""
| extend InitiatedByUPN = tostring(InitiatedBy.user.userPrincipalName)
| extend AppDisplayName = tostring(TargetResources[0].displayName)
| where (array_length(TargetUPNs) == 0 or InitiatedByUPN in (TargetUPNs))
| where (array_length(TargetApps) == 0 or AppDisplayName in (TargetApps))
//
// ----- Part 2: Parse Key Consent Properties -----
| extend MP = parse_json(tostring(parse_json(tostring(parse_json(TargetResources)[0].modifiedProperties))))
| extend
    IsAdminConsent = tostring(MP[0].newValue),
    IsAppOnly = tostring(MP[1].newValue),
    OnBehalfOfAll = tostring(MP[2].newValue),
    PermissionsRaw = tostring(MP[4].newValue),
    ConsentedAppId = tostring(MP[5].newValue)
//
// ----- Part 3: Extract Scopes from PermissionsRaw -----
| extend PermissionsMatch = extract(@'Scope: ([^,]+)', 1, PermissionsRaw)
| extend PermissionsList = split(PermissionsMatch, "" "")
| project TimeGenerated, InitiatedByUPN, AppDisplayName, ConsentedAppId, IsAdminConsent, IsAppOnly, OnBehalfOfAll, PermissionsList
| sort by TimeGenerated desc
| take 50"
EL0,01,AU,06,11,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Microsoft Defender for Endpoint,DeviceEvents,AdditionalFields.Command,Consent to application,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDE#connect-events,https://learn.microsoft.com/en-us/defender-xdr/advanced-hunting-deviceevents-table,"// Objective: Detects device-based application consent grants reported by Microsoft Defender for Endpoint, highlighting endpoint-initiated app permissions.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all results.
let TargetDevices = dynamic([]);     // Example: dynamic([""DESKTOP-1234""])
let TargetAccounts = dynamic([]);    // Example: dynamic([""adminuser""])
//
// ----- Part 1: Filter for Device Consent Events -----
// Captures device events indicating consent grants.
//
DeviceEvents
| where TimeGenerated > ago(30d)
| where AdditionalFields.Command has ""Consent to application""
//
// ----- Part 2: Apply Targeting Filters -----
// Optionally filters on device name or process account name.
//
| where (array_length(TargetDevices) == 0 or DeviceName in (TargetDevices))
| where (array_length(TargetAccounts) == 0 or InitiatingProcessAccountName in (TargetAccounts))
//
// ----- Part 3: Project and Output Results -----
// Returns key context on device, account, process, and the consent command.
//
| project TimeGenerated, DeviceName, InitiatingProcessAccountName, InitiatingProcessParentFileName, ConsentCommand = tostring(AdditionalFields.Command)
| sort by TimeGenerated desc
| take 50"
EL0,01,AU,04,12,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Sentinel,BehaviorAnalytics,ActionType,Consent to application,https://learn.microsoft.com/en-us/azure/sentinel/enable-entity-behavior-analytics?tabs=azure,https://docs.azure.cn/en-us/sentinel/ueba-reference,"// Objective: Detects and contextualizes high-priority consent grant events in Sentinel Behavior Analytics, enriched with app and user context for triage.
// InvestigationPriority Reference Table:
// | Value Range | Severity | Description                                            |
// |-------------|----------|--------------------------------------------------------|
// | 0           | None     | No anomaly detected or not significant.                |
// | 1–29        | Low      | Minor anomaly, likely benign.                          |
// | 30–69       | Medium   | Suspicious activity, worth monitoring.                 |
// | 70–100      | High     | Strong indicators of compromise or risky behavior.     |
//
// Detects high-priority consent grants in Sentinel BehaviorAnalytics and enriches with app context from AuditLogs.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all results.
let TargetUPNs = dynamic([]); // Example: dynamic([""admin@domain.com""])
//
// ----- Part 1: Collect Consent Events from BehaviorAnalytics -----
// Only those with InvestigationPriority > 0.
//
let ConsentEvents =
    BehaviorAnalytics
    | where TimeGenerated > ago(30d)
    | where ActionType == ""Consent to application""
    | where InvestigationPriority > 0
    | where (array_length(TargetUPNs) == 0 or UserPrincipalName in (TargetUPNs))
    | project TimeGenerated, UserPrincipalName, InvestigationPriority, UserName, ActivityType, EventSource, SourceIPAddress, SourceIPLocation;
//
// ----- Part 2: Get Consent Grant Details from AuditLogs -----
// Filter AuditLogs for consent events and core context.
//
let AuditConsent =
    AuditLogs
    | where TimeGenerated > ago(30d)
    | where OperationName == ""Consent to application""
    | extend AuditTime = TimeGenerated
    | project AuditTime, UserPrincipalName = tostring(InitiatedBy.user.userPrincipalName), AppDisplayName = tostring(TargetResources[0].displayName), ConsentedAppId = tostring(parse_json(tostring(parse_json(TargetResources)[0].modifiedProperties))[5].newValue);
//
// ----- Part 3: Join Behavior Analytics with AuditLogs for App Context -----
// Join on UserPrincipalName within 5 minutes.
//
ConsentEvents
| join kind=leftouter (
    AuditConsent
) on UserPrincipalName
| where abs(datetime_diff('minute', TimeGenerated, AuditTime)) <= 5
| project TimeGenerated, UserPrincipalName, UserName, AppDisplayName, ConsentedAppId, InvestigationPriority, ActivityType, EventSource, SourceIPAddress, SourceIPLocation
| sort by TimeGenerated desc
| take 500"
EL0,01,AU,05,13,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Microsoft Defender for Cloud Apps,CloudAppEvents,ActionType,Consent to application.,https://learn.microsoft.com/en-us/azure/sentinel/connect-microsoft-365-defender?tabs=MDCA#connect-events,https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/cloudappevents,"// Objective: Surfaces all consent grants to Entra applications via Defender for Cloud Apps, providing visibility into cross-platform consent activity.
// Detects consent grants to Entra applications via Microsoft Defender for Cloud Apps (CloudAppEvents).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all results.
let TargetAccountIds = dynamic([]);     // Example: dynamic([""5f393b07-1a40-433b-bd74-b598f256b85d""])
let TargetObjectNames = dynamic([]);    // Example: dynamic([""Microsoft Graph Command Line Tools""])
let TargetAccountTypes = dynamic([]);   // Example: dynamic([""Admin""])
//
// ----- Part 1: Filter for Consent Grant Actions -----
// Captures CloudAppEvents consent events.
//
CloudAppEvents
| where TimeGenerated > ago(30d)
| where ActionType == ""Consent to application.""
//
// ----- Part 2: Apply Targeting Filters -----
// Optionally filters on account ID, object/app name, or account type.
//
| where (array_length(TargetAccountIds) == 0 or AccountId in (TargetAccountIds))
| where (array_length(TargetObjectNames) == 0 or ObjectName in (TargetObjectNames))
| where (array_length(TargetAccountTypes) == 0 or AccountType in (TargetAccountTypes))
//
// ----- Part 3: Project and Output Results -----
// Surfaces all relevant context for consent grants.
//
| project TimeGenerated, AccountDisplayName, AccountId, AccountType, ObjectId, ObjectName, Application, ActionType, DeviceType, UserAgent, OSPlatform
| sort by TimeGenerated desc
| take 50"
EL0,01,AU,02,14,Identity,Privileged Identity & Credential Management,Escalation and Delegation Monitoring,Track Privilege Escalation & Delegation,Windows,SecurityEvent,Activity," (4728, 4729, 4732, 4756)",https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/audit-security-group-management,"// Objective: Detects adds or removes to/from sensitive groups in Windows environments, flagging changes that may indicate privilege escalation or delegation.
// Focuses on critical/sensitive groups (customizable).
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// List sensitive groups, actions, or actors to target. Leave arrays empty for all.
let SensitiveGroups = dynamic([
    ""Domain Admins"",
    ""Enterprise Admins"",
    ""Administrators"",
    ""Account Operators"",
    ""Server Operators"",
    ""Backup Operators"",
    ""Schema Admins""
    // Add others as needed
]);
let TargetActions = dynamic([]); // Example: dynamic([""Add to Global Group""])
let TargetActors = dynamic([]);  // Example: dynamic([""username""])
//
// ----- Part 1: Filter for Security-Impactful Events -----
// GPO Path: To capture group membership changes (4728, 4729, 4732, 4756), you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Account Management > Audit Security Group Management (Success/Failure)
// Only group membership change event IDs.
//
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID in (4728, 4729, 4732, 4756)
//
// ----- Part 2: Parse and Clean Output -----
// Handles machine/service accounts, user accounts, and filters for sensitive groups.
//
| extend
    Action = case(
        EventID == 4728, ""Add to Global Group"",
        EventID == 4729, ""Remove from Global Group"",
        EventID == 4732, ""Add to Local Group"",
        EventID == 4756, ""Add to Universal Group"",
        ""Other""
    ),
    Group = TargetUserName,
    MemberClean = iff(MemberName == ""-"" or isnull(MemberName), ""N/A"", MemberName),
    IsTargetedAction = TargetUserName in (SensitiveGroups)
//
// ----- Part 3: Apply Targeting Filters -----
// Optionally filters for action or actor.
//
| where (array_length(SensitiveGroups) == 0 or Group in (SensitiveGroups))
| where (array_length(TargetActions) == 0 or Action in (TargetActions))
| where (array_length(TargetActors) == 0 or SubjectAccount in (TargetActors))
//
// ----- Part 4: Output Review-Ready Results -----
// Surfaces key context for each group membership change event.
//
| project TimeGenerated, IsTargetedAction, Action, Group, Member = MemberClean, Actor = SubjectAccount, EventID, Computer, Activity
| sort by TimeGenerated desc
| take 50"
EL0,01,AV,04,01,Identity,Privileged Identity & Credential Management,Behavorial Analytics,"Monitor, Alert and Respond",Sentinel,IdentityInfo,SourceSystem,summarize,https://learn.microsoft.com/en-us/azure/sentinel/enable-entity-behavior-analytics?tabs=azure,https://docs.azure.cn/en-us/sentinel/ueba-reference,"// Objective: Surfaces the most recent identity information for each source system, providing up-to-date context for behavioral monitoring and investigations.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave array empty to return all results.
let TargetSourceSystems = dynamic([]); // Example: dynamic([""OpsManager""])
//
// ----- Part 1: Summarize Latest Identity Records per SourceSystem -----
// Returns the latest record (by TimeGenerated) for each SourceSystem.
//
IdentityInfo
| where TimeGenerated > ago(30d)
| where (array_length(TargetSourceSystems) == 0 or SourceSystem in (TargetSourceSystems))
| summarize arg_max(TimeGenerated, *) by SourceSystem
//
// ----- Part 2: Project Review-Ready Fields -----
// Surfaces key identity fields for review.
//
| project TimeGenerated, SourceSystem, AccountName, AccountUPN, AccountDisplayName, GivenName, Surname, AccountDomain, AccountSID, AccountTenantId, IsAccountEnabled, UserType, GroupMembership, AssignedRoles, AdditionalMailAddresses, ChangeSource, AccountCreationTime, UserAccountControl
| sort by TimeGenerated desc
| take 50"
EL0,01,AV,04,02,Identity,Privileged Identity & Credential Management,Behavorial Analytics,"Monitor, Alert and Respond",Sentinel,BehaviorAnalytics,SourceSystem,summarize,https://learn.microsoft.com/en-us/azure/sentinel/enable-entity-behavior-analytics?tabs=azure,https://docs.azure.cn/en-us/sentinel/ueba-reference,"// Objective: Surfaces the latest behavioral analytics records by event source and activity type to support ongoing detection of identity-related anomalies.
// Provides optional targeting on EventSource or ActivityType.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Leave arrays empty to return all results.
let TargetEventSources = dynamic([]);    // Example: dynamic([""Azure AD"",""Azure""])
let TargetActivityTypes = dynamic([]);   // Example: dynamic([""LogOn"",""Administrative""])
//
// ----- Part 1: Summarize Latest BehaviorAnalytics per EventSource & ActivityType -----
// Returns the latest event (by TimeGenerated) for each EventSource/ActivityType.
//
BehaviorAnalytics
| where TimeGenerated > ago(90d)
| where (array_length(TargetEventSources) == 0 or EventSource in (TargetEventSources))
| where (array_length(TargetActivityTypes) == 0 or ActivityType in (TargetActivityTypes))
| summarize arg_max(TimeGenerated, *) by EventSource, ActivityType
//
// ----- Part 2: Project Review-Ready Fields -----
// Analyst-focused fields from your schema.
//
| project TimeGenerated, EventSource, ActivityType, ActionType, UserName, UserPrincipalName, SourceIPAddress, SourceIPLocation, InvestigationPriority, UsersInsights, DevicesInsights, ActivityInsights, Type
| sort by TimeGenerated desc
| take 50"
EL0,01,AV,04,03,Identity,Privileged Identity & Credential Management,Behavorial Analytics,"Monitor, Alert and Respond",Sentinel,UserPeerAnalytics,SourceSystem,summarize,https://learn.microsoft.com/en-us/azure/sentinel/enable-entity-behavior-analytics?tabs=azure,https://docs.azure.cn/en-us/sentinel/ueba-reference,"// Objective: Presents the latest peer-based analytics for identities with detected anomalies, clearly labeling user and peer context for insider risk investigations.
// - AnalyzedUserId: The primary user for whom peer analytics is calculated (the ""subject"" of analysis).
// - PeerUserId: The unique identifier of a peer (someone with a relationship to the analyzed user, e.g., shared group, collaboration, etc.).
// - UserDisplayName/UserUPN: Friendly display details for the analyzed user.
// - PeerDisplayName/PeerUPN: Friendly display details for the peer.
//
// Rank Reference Table:
// | Value Range | Severity | Description                                            |
// |-------------|----------|--------------------------------------------------------|
// | 0           | None     | No anomaly or not significant.                         |
// | 1–29        | Low      | Minor anomaly, likely benign.                          |
// | 30–69       | Medium   | Suspicious activity, worth monitoring.                 |
// | 70–100      | High     | Strong indicators of compromise or risky behavior.     |
//
// Surfaces the most recent UserPeerAnalytics record per SourceSystem (Rank > 0), clearly labeling subject/peer context.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
let TargetSourceSystems = dynamic([]); // Example: dynamic([""Azure"",""OpsManager""])
//
// ----- Part 1: Summarize Latest UserPeerAnalytics per SourceSystem -----
let PeerEvents =
    UserPeerAnalytics
    | where TimeGenerated > ago(30d)
    | where (array_length(TargetSourceSystems) == 0 or SourceSystem in (TargetSourceSystems))
    | where Rank > 0
    | summarize arg_max(TimeGenerated, *) by SourceSystem;
//
// ----- Part 2: Resolve User and Peer Details from IdentityInfo -----
let Identity =
    IdentityInfo
    | summarize arg_max(TimeGenerated, *) by AccountObjectId
    | project AccountObjectId, AccountDisplayName, AccountUPN;
//
// ----- Part 3: Join Peer Events to Identities (Labeled) -----
PeerEvents
| join kind=leftouter (Identity) on $left.UserId == $right.AccountObjectId
| join kind=leftouter (Identity) on $left.PeerUserId == $right.AccountObjectId
| project TimeGenerated, SourceSystem, AnalyzedUserId = UserId, AnalyzedUserDisplayName = AccountDisplayName, AnalyzedUserUPN = AccountUPN, PeerUserId, PeerDisplayName = AccountDisplayName1, PeerUPN = AccountUPN1, Rank,
    TenantId, AADTenantId,Type
| sort by TimeGenerated desc
| take 50"
EL0,02,,,,Email,,,,,,,,,,
EL0,03,,,,Network,,,,,,,,,,
EL0,05,,,,Cloud,,,,,,,,,,
EL0,04,AA,02,01,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,4656 - A handle to an object was requested,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4656,"// Objective: Tracks Event ID 4656 (""A handle to an object was requested"") from Windows SecurityEvent logs, focusing on user-initiated object access (file, registry, etc.). Enables targeted filtering by user SID and filters out system/service accounts for cleaner analysis.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Define SIDs of interest for focused analysis. Leave empty to return all users.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4656 Events -----
// GPO Path: To capture 4656 events, enable the relevant subcategory, e.g.:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File System
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit Registry
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4656
| where Activity == ""4656 - A handle to an object was requested.""
| extend EventData_xml = parse_xml(EventData)
| extend SubjectUserSid = tostring(EventData_xml.EventData.Data[0]['#text']),
         SubjectUserName = tostring(EventData_xml.EventData.Data[1]['#text']),
         ObjectType = tostring(EventData_xml.EventData.Data[5]['#text']),
         ObjectName = tostring(EventData_xml.EventData.Data[6]['#text']),
         ProcessName = tostring(EventData_xml.EventData.Data[10]['#text']),
         AccessList = tostring(EventData_xml.EventData.Data[12]['#text'])
// ----- Part 2: Exclude Service & System Accounts -----
// Filter out built-in accounts and common service naming patterns.
| where not(SubjectUserName has_any ('svc', 'MSOL', '$'))
| where not(SubjectUserSid in (""S-1-5-18"", ""S-1-5-19"", ""S-1-5-20""))
// ----- Part 3: Apply Dynamic SID Filtering (If Set) -----
// Only include specific users if Targeted_User_SIDs is populated.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
// ----- Part 4: Enrichment & Flag Targeted Users -----
// Mark events belonging to targeted users for quick review.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
// ----- Part 5: Final Output -----
// Clean, deduplicated, and sorted for analyst review.
| distinct TimeGenerated, IsTargetedUser, Computer, Actor=SubjectUserName, SubjectUserSid, ObjectType, ObjectName, ProcessName, AccessList, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,02,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,4657 - A registry value was modified,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4657,"// Objective: Tracks Event ID 4657 (""A registry value was modified"") from Windows SecurityEvent logs, focusing on registry changes by user accounts. Enables targeted filtering by user SID and filters out system/service accounts for analyst clarity.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Define SIDs of interest for focused analysis. Leave empty to return all users.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4657 Events -----
// GPO Path: To capture 4657 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit Registry (Success)
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4657
| where Activity == ""4657 - A registry value was modified.""
| extend EventData_xml = parse_xml(EventData)
| extend SubjectUserSid = tostring(EventData_xml.EventData.Data[0]['#text']),
         SubjectUserName = tostring(EventData_xml.EventData.Data[1]['#text']),
         ObjectName = tostring(EventData_xml.EventData.Data[5]['#text']),
         ObjectValueName = tostring(EventData_xml.EventData.Data[6]['#text']),
         OldValue = tostring(EventData_xml.EventData.Data[8]['#text']),
         NewValue = tostring(EventData_xml.EventData.Data[10]['#text']),
         ProcessName = tostring(EventData_xml.EventData.Data[12]['#text'])
// ----- Part 2: Exclude Service & System Accounts -----
// Filter out built-in accounts and common service naming patterns.
| where not(SubjectUserName has_any ('svc', 'MSOL', '$'))
// ----- Part 3: Apply Dynamic SID Filtering (If Set) -----
// Only include specific users if Targeted_User_SIDs is populated.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
// ----- Part 4: Enrichment & Flag Targeted Users -----
// Mark events belonging to targeted users for quick review.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
// ----- Part 5: Final Output -----
// Clean, deduplicated, and sorted for analyst review.
| distinct TimeGenerated, IsTargetedUser, Computer, Actor=SubjectUserName, SubjectUserSid, ProcessName, RegistryKey=ObjectName, RegistryValue=ObjectValueName, OldValue, NewValue, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,03,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,4658 - The handle to an object was closed,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4658,"// Objective: Tracks Event ID 4658 (""The handle to an object was closed"") from Windows SecurityEvent logs, focusing on handle closures by user accounts. Enables targeted filtering by user SID and filters out system/service accounts for analyst clarity.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Define SIDs of interest for focused analysis. Leave empty to return all users.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4658 Events -----
// GPO Path: To capture 4658 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit Handle Manipulation (Success)
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4658
| where Activity == ""4658 - The handle to an object was closed.""
| extend EventData_xml = parse_xml(EventData)
| extend SubjectUserSid = tostring(EventData_xml.EventData.Data[0]['#text']),
         SubjectUserName = tostring(EventData_xml.EventData.Data[1]['#text']),
         ObjectName = tostring(EventData_xml.EventData.Data[6]['#text']),
         HandleId = tostring(EventData_xml.EventData.Data[7]['#text']),
         ProcessName = tostring(EventData_xml.EventData.Data[9]['#text'])
// ----- Part 2: Exclude Service & System Accounts -----
// Filter out built-in accounts and common service naming patterns.
| where not(SubjectUserName has_any ('svc', 'MSOL', '$'))
// ----- Part 3: Apply Dynamic SID Filtering (If Set) -----
// Only include specific users if Targeted_User_SIDs is populated.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
// ----- Part 4: Enrichment & Flag Targeted Users -----
// Mark events belonging to targeted users for quick review.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
// ----- Part 5: Final Output -----
// Clean, deduplicated, and sorted for analyst review.
| distinct TimeGenerated, IsTargetedUser, Computer, Actor=SubjectUserName, SubjectUserSid, ProcessName, ObjectName, HandleId, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,04,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,4660 - An object was deleted,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4660,"// ----- Precursor Query: Find a Deletion Event ----- 
// RUN THIS SECTION FIRST, put cursor on line 16 run and pull HandleId and/or SID to continue with next section on line 18.
// This section finds recent deletion events. Run this first to find a HandleId to investigate.
// GPO Path: To capture this event, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File System (Success)
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4660
| extend EventData_xml = parse_xml(EventData)
| project TimeGenerated, Computer, Activity,
    SubjectUserSid = tostring(EventData_xml.EventData.Data[0]['#text']),
    SubjectUserName = tostring(EventData_xml.EventData.Data[1]['#text']),
    HandleId = tostring(EventData_xml.EventData.Data[5]['#text']),
    ProcessId = tostring(EventData_xml.EventData.Data[6]['#text']),
    ProcessName = tostring(EventData_xml.EventData.Data[7]['#text'])
| sort by TimeGenerated desc

// Objective: Investigates file deletion events (Event ID 4660) in Windows SecurityEvent logs, allowing analysts to pivot on HandleId and user SIDs for forensic investigation, and join with file access events for additional detail.
// 
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To investigate specific users, add their SIDs to this list. Leave empty to ignore.
let targetedSids = dynamic([""""]); // Example: dynamic([""S-1-5-...""])
// To investigate a specific deletion event, paste the HandleId here. Leave empty to ignore. Focus on HandleId first.
let targetedHandleId = """"; // Example: ""0x1a4""
//
// ----- Part 1: Gather Deletion Events (4660) -----
// GPO Path: To capture this event, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File System (Success)
let DeletionConfirmations = SecurityEvent
| where TimeGenerated > ago(7d)
| where EventID == 4660
| extend EventData_xml = parse_xml(EventData)
| extend
    SubjectUserSid = tostring(EventData_xml.EventData.Data[0]['#text']),
    SubjectUserName = tostring(EventData_xml.EventData.Data[1]['#text']),
    HandleId = tostring(EventData_xml.EventData.Data[5]['#text']),
    ProcessId = tostring(EventData_xml.EventData.Data[6]['#text']),
    ProcessName = tostring(EventData_xml.EventData.Data[7]['#text'])
| where not(ProcessName has_any (""SenseIR.exe"", ""MsSense.exe""));
//
// ----- Part 2: Gather Object Access Details (4663) -----
// GPO Path: To capture this event, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File System (Success, Failure)
let FileDetails = SecurityEvent
| where TimeGenerated > ago(7d)
| where EventID == 4663 and isnotempty(ObjectName)
| project
    ObjectName, SubjectUserSid_4663 = SubjectUserSid, Computer_4663 = Computer,
    ProcessId_4663 = ProcessId, HandleId_4663 = HandleId;
//
// ----- Part 3: Joining, Filtering, and Final Output -----
// Apply filters based on the parameters set in Part 0. Join with file details to get the ObjectName.
DeletionConfirmations
| where (array_length(targetedSids) == 0 or SubjectUserSid in (targetedSids))
| where (isempty(targetedHandleId) or HandleId == targetedHandleId)
| join kind=inner (FileDetails) on $left.Computer == $right.Computer_4663 and
     $left.ProcessId == $right.ProcessId_4663 and $left.HandleId == $right.HandleId_4663 and
     $left.SubjectUserSid == $right.SubjectUserSid_4663
| extend 
    IsTargetedSid = SubjectUserSid in (targetedSids),
    IsTargetedHandleId = not(isempty(targetedHandleId)) and HandleId == targetedHandleId
//
// ----- Part 4: Final Output -----
// Clean, deduplicated, and sorted for analyst review.
| summarize arg_max(TimeGenerated, SubjectUserName, Computer, ProcessName, ObjectName, HandleId, Activity, IsTargetedSid, IsTargetedHandleId) by SubjectUserSid, ObjectName
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,05,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,4663 - An attempt was made to access an object,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4663,"// Objective: Tracks object access attempts (Event ID 4663) from Windows SecurityEvent logs, enabling targeted filtering by user SID and focusing on user account activity. GPO and SACL requirements are noted for comprehensive audit coverage.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4663 Events -----
// GPO Path: To capture 4663 events, enable the relevant subcategories, e.g.:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File System
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit Registry
// Note: This event also requires SACLs (System Access Control Lists) to be configured on the specific objects you want to monitor.
SecurityEvent
| where TimeGenerated > ago(30d)
| where EventID == 4663
| where Activity has ""An attempt was made to access an object.""
//
// ----- Part 2: Custom Filtering -----
// This filter focuses only on actions taken by user accounts.
| where AccountType == 'User'
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// This flag is useful for identifying a targeted user when viewing all results.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// This section presents the unique access events, sorted by the most recent time.
| distinct TimeGenerated, IsTargetedUser, Account, SubjectUserSid, ObjectName, ObjectType, Computer, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,06,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,4670 - Permissions on an object were changed,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4670,"// Objective: Tracks permission changes (Event ID 4670) in Windows SecurityEvent logs, with targeted filtering by user SID. Includes GPO requirements and all key enrichment fields for tracking security descriptor changes.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4670 Events -----
// GPO Path: To capture all 4670 events, enable the relevant subcategories:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File System
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit Registry
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Policy Change > Audit Authentication Policy Change
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Policy Change > Audit Authorization Policy Change
// Note: This event is critical for tracking permission changes on sensitive objects like files, folders, and registry keys.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4670
| where Activity == ""4670 - Permissions on an object were changed.""
//
// ----- Part 2: Data Parsing -----
// This section parses the XML to extract the most valuable fields, including the Security Descriptors.
| extend EventData_xml = parse_xml(EventData)
| extend
    SubjectUserSid = tostring(EventData_xml.EventData.Data[0]['#text']),
    SubjectUserName = tostring(EventData_xml.EventData.Data[1]['#text']),
    ObjectName = tostring(EventData_xml.EventData.Data[5]['#text']),
    ObjectType = tostring(EventData_xml.EventData.Data[6]['#text']),
    OldSd = tostring(EventData_xml.EventData.Data[8]['#text']),
    NewSd = tostring(EventData_xml.EventData.Data[9]['#text']),
    ProcessName = tostring(EventData_xml.EventData.Data[11]['#text'])
//
// ----- Part 3: Custom Filtering -----
// This line allows analysts to easily filter out system or service accounts.
| where not(SubjectUserName has_any ('svc', 'MSOL', '$'))
| where not(SubjectUserSid in (""S-1-5-18"", ""S-1-5-19"", ""S-1-5-20""))
//
// ----- Part 4: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Analysis & Enrichment -----
// This flag explicitly confirms that the permissions were modified.
// This flag is useful for identifying a targeted user when viewing all results.
| extend
    PermissionsModified = (OldSd != NewSd),
    IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 6: Final Output -----
// This section presents the unique permission change events, sorted by the most recent time.
| distinct TimeGenerated, IsTargetedUser, Computer, Account = SubjectUserName, SubjectUserSid, ObjectName, ObjectType, ProcessName, PermissionsModified, OldSd, NewSd, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,07,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,4907 - Audit settings on an object were changed,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4907,"// Objective: Tracks audit policy changes (Event ID 4907) in Windows SecurityEvent logs, enabling targeted filtering by user SID and focusing on detection of audit tampering attempts.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4907 Events -----
// GPO Path: To capture 4907 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Policy Change > Audit Policy Change (Success)
// Note: This event is critical for detecting audit tampering. An attacker may modify a SACL on an object to prevent their actions from being logged.
SecurityEvent
| where TimeGenerated > ago(14d) // Look for events in the last 90 days
| where EventID == 4907 // Filter specifically for ""Auditing settings on object were changed""
| where Activity == ""4907 - Auditing settings on object were changed.""
//
// ----- Part 2: Data Parsing -----
// This query relies on the pre-parsed fields from the SecurityEvent table. No manual parsing is performed.
// To see the specific audit setting that was changed, the 'OldSd' and 'NewSd' fields from the raw EventData would need to be parsed.
//
// ----- Part 3: Custom Filtering -----
// This is the filter from your original query to focus only on user accounts.
| where AccountType == 'User'
//
// ----- Part 4: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Analysis & Enrichment -----
// Flag events where the user is in the analyst's targeted list.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 6: Final Output -----
// This section creates a descriptive activity column and presents the unique audit setting change events, as originally requested.
| distinct TimeGenerated, IsTargetedUser, Account, SubjectUserSid, ObjectName, ObjectType, ProcessName, Computer, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,08,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,4985 - The state of a transaction has changed,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4985,"// Objective: Tracks file system transaction state changes (Event ID 4985) in Windows SecurityEvent logs, enabling targeted filtering by user SID and focusing on informational activity from the Transaction Manager.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4985 Events -----
// GPO Path: To capture all 4985 events, enable one of the relevant subcategories:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File System
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Privilege Use > Audit Non Sensitive Privilege Use
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Privilege Use > Audit Other Privilege Use Events
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Privilege Use > Audit Sensitive Privilege Use
// Note: This is an informational event from the file system Transaction Manager and typically has no security relevance. It's primarily used for troubleshooting.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4985
| where Activity == ""4985 - The state of a transaction has changed.""
//
// ----- Part 2: Custom Filtering -----
// This is the filter from your original query to focus only on user accounts.
| where AccountType == 'User'
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Flag events where the user is in the analyst's targeted list.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// This section presents the unique transaction state change events, as originally requested.
| distinct TimeGenerated, IsTargetedUser, SubjectAccount, SubjectUserSid, Computer, ProcessId, ProcessName, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,09,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,5140 - A network share object was accessed,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5140,"// Objective: Tracks network share access events (Event ID 5140) in Windows SecurityEvent logs, enabling targeted filtering by user SID and hunting for access to high-value administrative shares.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 5140 Events -----
// GPO Path: To capture 5140 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File Share (Success, Failure)
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5140
| where Activity == ""5140 - A network share object was accessed.""
//
// ----- Part 2: Custom Filtering -----
// This section now filters for high-value shares and can be edited to exclude known safe IP ranges.
// The documentation recommends monitoring for access to sensitive shares.
| where ShareName has_any (""C$"", ""ADMIN$"") // <-- EDIT THIS LIST for sensitive shares
// The documentation also recommends monitoring for access from unexpected IP addresses.
// | where not(ipv4_is_in_range(IpAddress, ""192.168.1.0/24"", ""10.0.0.0/8"")) // <-- UNCOMMENT AND EDIT with your internal IP ranges
| where AccountType == 'User'
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Flag events where the user is in the analyst's targeted list.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// This section presents the filtered list of potentially suspicious share access events.
| distinct TimeGenerated, IsTargetedUser, SubjectUserName, SubjectUserSid, Computer, IpAddress, IpPort, ObjectType, ShareName, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,10,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,5142 - A network share object was added,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5142,"// Objective: Tracks new network share creation events (Event ID 5142) in Windows SecurityEvent logs, enabling targeted filtering by user SID and surfacing high-risk shares for potential unauthorized data exposure or malware staging.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 5142 Events -----
// GPO Path: To capture 5142 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File Share (Success, Failure)
// Note: This event is critical for detecting potentially unauthorized data sharing or malware staging areas.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5142
| where Activity == ""5142 - A network share object was added.""
//
// ----- Part 2: Custom Filtering -----
// This section now actively hunts for high-risk shares based on the documentation's recommendations.
| where ShareLocalPath has_any (""C:\\"", ""C:\\Windows"", ""C:\\Windows\\System32"") // Alert on shares pointing to the root drive or system folders 
or ShareName matches regex @""\w+\$$"" // Also alert on recreation of hidden administrative shares (e.g., C$, ADMIN$)
| where not(SubjectUserName has_any ('svc', 'MSOL', '$')) // <-- EDIT THIS LIST to exclude known service accounts
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Flag events where the user is in the analyst's targeted list.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// This section creates a clean, readable table of high-risk share creation events.
| distinct TimeGenerated, IsTargetedUser, Computer, Actor=SubjectUserName, SubjectUserSid, ShareName, SharePath=ShareLocalPath, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,11,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,5143 - A network share object was modified,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5143,"// Objective: Tracks network share modification events (Event ID 5143) in Windows SecurityEvent logs, enabling targeted filtering by user SID and surfacing potentially unauthorized changes to high-value shares.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 5143 Events -----
// GPO Path: To capture 5143 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File Share (Success, Failure)
// Note: This event is critical for tracking permission changes or other modifications to sensitive shares, which could be an attempt to weaken security.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5143
| where Activity == ""5143 - A network share object was modified.""
//
// ----- Part 2: Custom Filtering -----
// This section actively hunts for modifications to high-value shares, per documentation recommendations.
// | where ShareName has_any (""SYSVOL"", ""NETLOGON"") or ShareName matches regex @""\w+\$$"" // <-- Focus on critical and administrative shares
| where not(SubjectUserName has_any ('svc', 'MSOL', '$')) // <-- EDIT THIS LIST to exclude known service accounts
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Flag events where the user is in the analyst's targeted list.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// This section creates a clean, readable table of high-risk share modification events.
| distinct TimeGenerated, IsTargetedUser, Actor=SubjectUserName, SubjectUserSid, Computer, ShareName, SharePath=ShareLocalPath, Activity
| sort by TimeGenerated desc
| take 50
"
EL0,04,AA,02,12,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,5144 - A network share object was deleted,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5144,"// Objective: Tracks network share deletion events (Event ID 5144) in Windows SecurityEvent logs, enabling targeted filtering by user SID and surfacing administrative or potentially malicious deletions.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 5144 Events -----
// GPO Path: To capture 5144 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File Share (Success, Failure)
// Note: This event is critical for tracking when network shares are removed. This could be an expected administrative action or a malicious attempt to disrupt services or hide activity.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5144
| where Activity == ""5144 - A network share object was deleted.""
//
// ----- Part 2: Custom Filtering -----
// This section can be used to filter for specific users or computers.
// | where SubjectUserName has 'unwanted_user'
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Flag events where the user is in the analyst's targeted list.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// This section presents the unique network share deletion events, as originally requested.
| distinct TimeGenerated, IsTargetedUser, SubjectUserName, SubjectUserSid, Computer, ShareLocalPath, ShareName, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AA,02,12,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,File & Object Access,Windows,SecurityEvent,Activity,5145 - A network share object was checked to see whether the client can be granted desired access,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5145,"// Objective: Tracks detailed network share access events (Event ID 5145) in Windows SecurityEvent logs, enabling targeted filtering by user SID and hunting for non-service account file/folder accesses within network shares.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 5145 Events -----
// GPO Path: To capture 5145 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit Detailed File Share (Success, Failure)
// Note: This event generates each time a file or folder within a network share is accessed. It can be very high volume.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5145
| where Activity == ""5145 - A network share object was checked to see whether the client can be granted desired access.""
//
// ----- Part 2: Custom Filtering -----
// This section now includes a filter to exclude common service or system accounts.
| where not(SubjectUserName has_any (""svc"", ""$"")) // <-- EDIT THIS LIST to exclude accounts by name
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Flag events where the user is in the analyst's targeted list.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// This section presents the unique detailed share access events, as originally requested.
| distinct TimeGenerated, IsTargetedUser, SubjectUserName, SubjectUserSid, Computer, IpAddress, IpPort, ObjectType, ShareLocalPath, ShareName, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AB,02,01,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Audit Log Access (Success/Failure),Windows,SecurityEvent,Activity,1100 - The event logging service has shut down,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-1100,"// Objective: Detects system event log shutdowns (Event ID 1100) in Windows SecurityEvent logs, enabling targeted filtering by computer name and highlighting unexpected or suspicious log shutdowns.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Filter by Computer. Leave array empty to include all computers.
let TargetComputers = dynamic([]); // Example: dynamic([""SERVER01"",""SERVER02""])
// 
// ----- Part 1: Data & Custom Filtering -----
// GPO Path: To capture 1100 events, enable:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > System > Audit Other System Events (Success)
// Note: This event is logged during normal system shutdowns, but an unexpected occurrence can be a sign of malicious action to cover tracks.
SecurityEvent
| where TimeGenerated > ago(30d)
| where EventID == 1100
| where Activity == ""1100 - The event logging service has shut down.""
| where array_length(TargetComputers) == 0 or Computer in (TargetComputers)
//
// ----- Part 2: Analysis & Enrichment -----
// Flag events where the computer is in the analyst's targeted list.
| extend IsTargetedComputer = Computer in (TargetComputers)
//
// ----- Part 3: Final Output -----
// Returns shutdown events per computer, sorted for review.
| distinct TimeGenerated, IsTargetedComputer, Computer, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AB,02,02,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Audit Log Access (Success/Failure),Windows,SecurityEvent,Activity,1102 - The audit log was cleared,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-1102,"// Objective: Tracks audit log clear events (Event ID 1102) in Windows SecurityEvent logs, enabling targeted filtering by computer. Clearing the audit log is a high-severity event that can indicate attempts to erase evidence of attacker activity.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Filter by Computer. Leave array empty to include all computers.
let TargetComputers = dynamic([]); // Example: dynamic([""SERVER01"",""SERVER02""])
// 
// ----- Part 1: Filter for Relevant 1102 Events & Parse Data -----
// GPO Path: To capture 1102 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > System > Audit Other System Events (Success)
// Note: This is a high-severity event that can indicate an attacker is trying to erase evidence of their activity.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 1102
| where Activity == ""1102 - The audit log was cleared.""
| extend EventData_xml = parse_xml(EventData)
| extend
    SubjectUserSid = tostring(EventData_xml.UserData.LogFileCleared.SubjectUserSid),
    SubjectUserName = tostring(EventData_xml.UserData.LogFileCleared.SubjectUserName)
//
// ----- Part 2: Flexible Filtering for Targeted Computers -----
// This applies the filter ONLY if the TargetComputers list is not empty.
| where array_length(TargetComputers) == 0 or Computer in (TargetComputers)
//
// ----- Part 3: Analysis & Enrichment -----
// This flag is useful for identifying a targeted computer when viewing all results.
| extend IsTargetedComputer = Computer in (TargetComputers)
//
// ----- Part 4: Final Output -----
// Unique audit log clear events, sorted for review.
| distinct TimeGenerated, IsTargetedComputer, Computer, Actor=SubjectUserName, ActorSid=SubjectUserSid, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AB,02,03,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Audit Log Access (Success/Failure),Windows,SecurityEvent,Activity,1104 - The security log is now full,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-1104,"// Objective: Detects when the security log is full (Event ID 1104) in Windows SecurityEvent logs, enabling targeted filtering by computer. This event may indicate log flooding, misconfiguration, or other conditions that prevent new security event logging.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Filter by Computer. Leave array empty to include all computers.
let TargetComputers = dynamic([]); // Example: dynamic([""SERVER01"",""SERVER02""])
// 
// ----- Part 1: Data & Enrichment -----
// GPO Path: To capture 1104 events, enable:
//  - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > System > Audit Other System Events (Success)
// Note: This event can indicate a log flooding attack or misconfiguration.
SecurityEvent
| where TimeGenerated > ago(30d)
| where EventID == 1104
| where array_length(TargetComputers) == 0 or Computer in (TargetComputers)
| extend Activity = ""1104 - The security log is now full.""
//
// ----- Part 2: Analysis & Enrichment -----
// Flag events where the computer is in the analyst's targeted list.
| extend IsTargetedComputer = Computer in (TargetComputers)
//
// ----- Part 3: Final Output -----
// Table of unique log full events.
| distinct TimeGenerated, IsTargetedComputer, Computer, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AB,02,04,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Audit Log Access (Success/Failure),Windows,SecurityEvent,Activity,1105 - Event log automatic backup,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-1105,"// Objective: Detects automatic log backup events (Event ID 1105) in Windows SecurityEvent logs, enabling targeted filtering by computer. Confirms that event log was automatically backed up when full, which is critical for audit continuity.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Filter by Computer. Leave array empty to include all computers.
let TargetComputers = dynamic([]); // Example: dynamic([""SERVER01"",""SERVER02""])
// 
// ----- Part 1: Filter for Relevant 1105 Events & Parse Data -----
// GPO Path: To capture 1105 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > System > Audit Other System Events (Success)
// Note: This event confirms that a log file was automatically backed up when it reached its maximum size.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 1105
| where array_length(TargetComputers) == 0 or Computer in (TargetComputers)
| where Activity == ""1105 - Event log automatic backup.""
| extend EventData_xml = parse_xml(EventData)
| extend AutoBackupData = EventData_xml.UserData.AutoBackup
| extend
    BackupChannel = tostring(AutoBackupData.Channel),
    BackupPath = tostring(AutoBackupData.BackupPath)
//
// ----- Part 2: Analysis & Enrichment -----
// Flag events where the computer is in the analyst's targeted list.
| extend IsTargetedComputer = Computer in (TargetComputers)
//
// ----- Part 3: Final Output -----
// Table of unique log backup events for review.
| distinct TimeGenerated, IsTargetedComputer, Computer, Activity, BackupChannel, BackupPath
| sort by TimeGenerated desc
| take 50"
EL0,04,AB,02,05,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Audit Log Access (Success/Failure),Windows,SecurityEvent,Activity,1108 - The event logging service encountered an error,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-1108,"// Objective: Detects event logging service errors (Event ID 1108) in Windows SecurityEvent logs, enabling targeted filtering by computer. This event is critical because it means an audit event was dropped, which can indicate log tampering or system instability.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific computers, add their names inside the brackets.
let Targeted_Computers = dynamic([]); // Example: dynamic([""SERVER01"", ""SERVER02""])
// 
// ----- Part 1: Filter for Relevant 1108 Events -----
// GPO Path: To capture 1108 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > System > Audit Other System Events (Success)
// Note: This event is critical because it means an audit event was dropped. This can indicate log tampering or system instability.
SecurityEvent
| where TimeGenerated > ago(30d)
| where EventID == 1108
| where Activity == ""1108 - The event logging service encountered an error.""
//
// ----- Part 2: Flexible Filtering for Targeted Computers -----
// This applies the filter ONLY if the Targeted_Computers list is not empty.
| where array_length(Targeted_Computers) == 0 or Computer in (Targeted_Computers)
//
// ----- Part 3: Data Parsing & Enrichment -----
// This section parses the XML data to extract details about the logging failure.
| extend EventData_xml = parse_xml(EventData)
| extend EventProcessingFailureData = EventData_xml.UserData.EventProcessingFailure
| extend
    PublisherID = tostring(EventProcessingFailureData.PublisherID),
    DroppedEventID = tostring(EventProcessingFailureData.EventID),
    ErrorCode = tostring(EventProcessingFailureData.ErrorCode),
    IsTargetedComputer = Computer in (Targeted_Computers)
//
// ----- Part 4: Final Output -----
// This section creates a table of unique event processing failures.
| distinct TimeGenerated, IsTargetedComputer, Computer, Activity, PublisherID, DroppedEventID, ErrorCode
| sort by TimeGenerated desc
| take 50"
EL0,04,AC,02,01,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,System Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4624 - An account was successfully logged on,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4624,"// Objective: Tracks all successful user logon activity (Event ID 4624) in Windows SecurityEvent logs, enabling targeted filtering by user SID and highlighting anonymous logons.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4624 Events -----
// GPO Path: To capture 4624 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logon (Success)
// Note: This is the primary event for tracking all successful user logon activity.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4624
| where Activity == ""4624 - An account was successfully logged on.""
| where AccountType == ""User""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service accounts by name.
| where not(TargetUserName has_any ('svc', 'MSOL', '$'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Add logon type, authentication protocol, and analyst targeting/anonymous flags.
| extend 
    LogonTypeName = case(
        LogonType == 2, ""Interactive (Console)"",
        LogonType == 3, ""Network"",
        LogonType == 4, ""Batch"",
        LogonType == 5, ""Service"",
        LogonType == 7, ""Unlock"",
        LogonType == 8, ""NetworkCleartext"",
        LogonType == 9, ""NewCredentials"",
        LogonType == 10, ""RemoteInteractive (RDP)"",
        LogonType == 11, ""CachedInteractive"",
        ""Other""
    ),
    AuthenticationProtocol = case(
        TargetUserName == ""ANONYMOUS LOGON"", ""N/A (Anonymous Logon)"",
        AuthenticationPackageName == ""NTLM"" and PackageName == ""LM"", ""LM (Legacy)"",
        AuthenticationPackageName == ""NTLM"" and PackageName == ""NTLM V1"", ""NTLMv1"",
        AuthenticationPackageName == ""NTLM"" and PackageName == ""NTLM V2"", ""NTLMv2"",
        AuthenticationPackageName
    ),
    IsTargetedUser = TargetUserSid in (Targeted_User_SIDs),
    IsAnonymousLogon = (TargetUserName == ""ANONYMOUS LOGON"")
//
// ----- Part 5: Final Output -----
// Output distinct, sorted, and enriched logon activity.
| distinct TimeGenerated, IsTargetedUser, IsAnonymousLogon, TargetUserName, TargetUserSid, Computer, LogonTypeName, AuthenticationProtocol, IpAddress, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AC,02,02,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,System Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4625 - An account failed to log on,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4625,"// Objective: Tracks all failed user logon activity (Event ID 4625) in Windows SecurityEvent logs, enabling targeted filtering by user name and surfacing potential brute-force, password spray, and user enumeration attacks.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their user names inside the brackets.
let Targeted_User_Names = dynamic([]); // Example: dynamic([""administrator"", ""testuser""])
// 
// ----- Part 1: Filter for Relevant 4625 Events -----
// GPO Path: To capture 4625 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logon (Failure)
// Note: This is a critical event for detecting brute-force, password spray, and user enumeration attacks.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4625
| where Activity == ""4625 - An account failed to log on.""
| where AccountType == ""User""
//
// ----- Part 2: RDP & Custom Filtering -----
// Temporarily disabled this filter to see all logon types.
//| where LogonType == 10
// Exclude common service accounts and known system accounts.
| where not(TargetUserName has_any ('svc', 'MSOL', '$', 'himds'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_Names list is not empty.
| where array_length(Targeted_User_Names) == 0 or TargetUserName in (Targeted_User_Names)
//
// ----- Part 4: Analysis & Enrichment -----
// Add logon type, failure reason, and analyst targeting flags.
| extend
    LogonTypeName = case(
        LogonType == 2, ""Interactive (Console)"",
        LogonType == 3, ""Network"",
        LogonType == 4, ""Batch"",
        LogonType == 5, ""Service"",
        LogonType == 7, ""Unlock"",
        LogonType == 8, ""NetworkCleartext"",
        LogonType == 9, ""NewCredentials"",
        LogonType == 10, ""RemoteInteractive (RDP)"",
        LogonType == 11, ""CachedInteractive"",
        ""Other""
    ),
    FailureReason = case(
        SubStatus == ""0xc000006a"", ""Bad Password"",
        SubStatus == ""0xc0000064"", ""Bad Username"",
        SubStatus == ""0xc0000234"", ""Account Locked Out"",
        SubStatus == ""0xc0000072"", ""Account Disabled"",
        SubStatus == ""0xc000006f"", ""Logon Outside Authorized Hours"",
        SubStatus == ""0xc0000070"", ""Unauthorized Workstation"",
        ""Other Failure""
    ),
    IsTargetedUser = TargetUserName in (Targeted_User_Names)
//
// ----- Part 5: Final Output -----
// Output distinct, sorted, and enriched failed logon activity.
| distinct TimeGenerated, IsTargetedUser, TargetUserName, Computer, LogonProcessName, LogonTypeName, LogonType, FailureReason, IpAddress, Status, SubStatus, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AC,02,03,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,System Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4634 - An account was logged off,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4634,"// Objective: Tracks user logoff events (Event ID 4634) in Windows SecurityEvent logs, enabling targeted filtering by user SID and reporting on session termination for user activity auditing.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4634 Events -----
// GPO Path: To capture 4634 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logoff (Success)
// Note: This event is generated when a logon session is terminated and is used to track when users log off.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4634
| where Activity == ""4634 - An account was logged off.""
| where AccountType == ""User""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service and system accounts.
| where not(TargetUserName has_any ('MSOL', 'svc', '$'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Add logon type and analyst targeting flag.
| extend
    LogonTypeName = case(
        LogonType == 2, ""Interactive (Console)"",
        LogonType == 3, ""Network"",
        LogonType == 4, ""Batch"",
        LogonType == 5, ""Service"",
        LogonType == 10, ""RemoteInteractive (RDP)"",
        ""Other""
    ),
    IsTargetedUser = TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// Output distinct, sorted, and enriched logoff activity.
| distinct TimeGenerated, IsTargetedUser, TargetUserName, TargetUserSid, Computer, LogonTypeName, LogonProcessName, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AC,02,04,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,System Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4647 - User initiated logoff,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4647,"// Objective: Tracks user-initiated logoff events (Event ID 4647) in Windows SecurityEvent logs, enabling targeted filtering by user SID and reporting on explicit user logoff actions.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4647 Events -----
// GPO Path: To capture 4647 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logoff (Success)
// Note: This event is generated when a user actively initiates a logoff (e.g., clicks 'Log Off').
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4647
| where Activity == ""4647 - User initiated logoff.""
| where AccountType == ""User""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service and system accounts.
| where not(TargetUserName has_any ('MSOL', 'svc', '$'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Add analyst targeting flag.
| extend IsTargetedUser = TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// Output distinct, sorted, and enriched logoff activity.
| distinct TimeGenerated, IsTargetedUser, Computer, Actor=TargetUserName, ActorSid=TargetUserSid, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AC,02,05,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,System Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4768 - A Kerberos authentication ticket (TGT) was requested,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4768,"// Objective: Tracks Kerberos authentication ticket requests (Event ID 4768) in Windows SecurityEvent logs, enabling targeted filtering by user SID and detecting Kerberoasting, AS-REP Roasting, and other Kerberos-based attacks.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4768 Events & Data Parsing -----
// GPO Path: To capture 4768 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Account Logon > Audit Kerberos Authentication Service (Success, Failure)
// Note: This event is critical for detecting Kerberoasting, AS-REP Roasting, and other Kerberos-based attacks.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4768
| where Activity == ""4768 - A Kerberos authentication ticket (TGT) was requested.""
| extend EventData_xml = parse_xml(EventData)
| extend
    TargetUserSid = tostring(EventData_xml.EventData.Data[2]['#text']),
    TargetUserName = tostring(EventData_xml.EventData.Data[0]['#text']),
    ResultCode = tostring(EventData_xml.EventData.Data[6]['#text']),
    TicketOptions = tostring(EventData_xml.EventData.Data[5]['#text']),
    TicketEncryptionType = tostring(EventData_xml.EventData.Data[7]['#text']),
    PreAuthType = tostring(EventData_xml.EventData.Data[8]['#text']),
    IpAddress = tostring(EventData_xml.EventData.Data[9]['#text']),
    AccountSupportedEncryption = tostring(EventData_xml.EventData.Data[15]['#text'])
//
// ----- Part 2: Custom & Targeted Filtering -----
// Exclude common service and system accounts. Apply analyst-driven SID filtering if used.
| where not(TargetUserName has_any ('svc', 'MSOL', '$'))
| where array_length(Targeted_User_SIDs) == 0 or TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 3: Analysis & Enrichment -----
// Enrichment flags for investigation, lateral movement, and Kerberos attack techniques.
| extend
    IsTargetedUser = TargetUserSid in (Targeted_User_SIDs),
    IsSmartCardLogon = PreAuthType in (""15"", ""16"", ""17""),
    IsWeakEncryptionUsed = TicketEncryptionType in (""0x1"", ""0x3"", ""0x17""),
    IsNoPreAuthUsed = PreAuthType == ""0"",
    IsSuspiciousResultCode = ResultCode in (""0x6"", ""0xC"", ""0x12"", ""0x18""),
    AccountSupportsWeakCrypto = AccountSupportedEncryption has ""RC4"",
    IsForwardableTicket = TicketOptions has ""0x40000000"",
    IsRenewableTicket = TicketOptions has ""0x8000000"",
    FailureReason = case(
        ResultCode == ""0x0"", ""Success"",
        ResultCode == ""0x6"", ""Username does not exist"",
        ResultCode == ""0x12"", ""Account disabled, expired, or locked out"",
        ResultCode == ""0x18"", ""Bad password"",
        ""Other""
    )
//
// ----- Part 4: Final Output -----
// Output distinct, sorted, and enriched Kerberos ticket request activity.
| distinct TimeGenerated, IsTargetedUser, Computer, TargetUserName, TargetUserSid, IpAddress, FailureReason, IsSmartCardLogon, IsWeakEncryptionUsed, IsNoPreAuthUsed, IsSuspiciousResultCode, AccountSupportsWeakCrypto, IsForwardableTicket, IsRenewableTicket, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AC,02,06,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,System Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4771 - Kerberos pre-authentication failed,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4771,"// Objective: Tracks failed Kerberos authentication attempts (Event ID 4771) in Windows SecurityEvent logs, enabling targeted filtering by user SID and surfacing Kerberos-based password spray and brute-force attacks.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4771 Events -----
// GPO Path: To capture 4771 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Account Logon > Audit Kerberos Authentication Service (Failure)
// Note: This event is a key indicator for Kerberos-based password spray and brute-force attacks.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4771
| where Activity == ""4771 - Kerberos pre-authentication failed.""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service and system accounts.
| where not(TargetUserName has_any ('svc', 'MSOL', '$')) // <-- EDIT THIS LIST to exclude accounts
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or TargetSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Enrichment fields and analyst-driven targeting flag.
| extend
    ErrorCode = tostring(Status),
    FailureReason = case(
        ErrorCode == ""0x0"", ""No error"",
        ErrorCode == ""0x1"", ""Client's entry in database has expired"",
        ErrorCode == ""0x2"", ""Server's entry in database has expired"",
        ErrorCode == ""0x3"", ""Requested protocol version not supported"",
        ErrorCode == ""0x4"", ""Client key encrypted in old master key"",
        ErrorCode == ""0x5"", ""Server key encrypted in old master key"",
        ErrorCode == ""0x6"", ""Client not found in Kerberos database"",
        ErrorCode == ""0x7"", ""Server not found in Kerberos database"",
        ErrorCode == ""0x8"", ""Multiple principal entries in database"",
        ErrorCode == ""0x9"", ""Null key for client or server"",
        ErrorCode == ""0xa"", ""Ticket not eligible for postdating"",
        ErrorCode == ""0xb"", ""Start time is later than end time"",
        ErrorCode == ""0xc"", ""KDC policy rejected request"",
        ErrorCode == ""0xd"", ""KDC cannot accommodate requested option"",
        ErrorCode == ""0xe"", ""Unsupported encryption type"",
        ErrorCode == ""0xf"", ""Unsupported checksum type"",
        ErrorCode == ""0x10"", ""No support for PADATA type (likely smart card cert issue)"",
        ErrorCode == ""0x11"", ""Unsupported transited type"",
        ErrorCode == ""0x12"", ""Account Disabled/Locked/Revoked"",
        ErrorCode == ""0x13"", ""Server credentials revoked"",
        ErrorCode == ""0x14"", ""TGT revoked"",
        ErrorCode == ""0x15"", ""Client not yet valid"",
        ErrorCode == ""0x16"", ""Server not yet valid"",
        ErrorCode == ""0x17"", ""Password Expired"",
        ErrorCode == ""0x18"", ""Bad Password"",
        ErrorCode == ""0x19"", ""Additional pre-auth required"",
        ErrorCode == ""0x1b"", ""Server is user-to-user only"",
        ErrorCode == ""0x1d"", ""Service unavailable"",
        ErrorCode == ""0x34"", ""Response too big for UDP — retry with TCP"",
        ErrorCode == ""0x3c"", ""Generic error"",
        ""Unknown or undocumented status code""
    ),
    IsAdminUser = (TargetUserName == ""Administrator""),
    IsHighPriorityFailure = ErrorCode in (""0x6"", ""0x12"", ""0x18""),
    IsTargetedUser = TargetSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// Output distinct, sorted, and enriched failed Kerberos authentication activity.
| distinct TimeGenerated, IsTargetedUser, Computer, TargetUserName, TargetSid, IpAddress, ErrorCode, FailureReason, IsAdminUser, IsHighPriorityFailure, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AC,02,07,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,System Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4776 - The computer attempted to validate the credentials for an account,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4776,"// Objective: Tracks NTLM credential validation events (Event ID 4776) in Windows SecurityEvent logs, enabling targeted filtering by user name and surfacing NTLM-based brute-force, password spray, and user enumeration attacks.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their user names inside the brackets.
let Targeted_User_Names = dynamic([]); // Example: dynamic([""administrator"", ""testuser""])
// 
// ----- Part 1: Filter for Relevant 4776 Events & Data Parsing -----
// GPO Path: To capture 4776 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Account Logon > Audit Credential Validation (Failure)
// Note: This event is critical for detecting NTLM-based brute-force, password spray, and user enumeration attacks.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4776
| where Activity == ""4776 - The domain controller attempted to validate the credentials for an account.""
| extend EventData_xml = parse_xml(EventData)
| extend
    TargetUserName = tostring(EventData_xml.EventData.Data[1]['#text']),
    SourceWorkstation = tostring(EventData_xml.EventData.Data[2]['#text']),
    ErrorCode = tostring(EventData_xml.EventData.Data[3]['#text'])
//
// ----- Part 2: Custom & Targeted Filtering -----
// Exclude common service accounts or other noise from the results. Apply analyst-driven username filtering if used.
| where not(TargetUserName has_any ('svc', 'MSOL', '$'))
| where array_length(Targeted_User_Names) == 0 or TargetUserName in (Targeted_User_Names)
//
// ----- Part 3: Analysis & Enrichment -----
// Enrichment fields for investigation, attack type detection, and analyst-driven targeting.
| extend
    FailureReason = case(
        ErrorCode == ""0x0"", ""Success"",
        ErrorCode == ""0xc000006a"", ""Bad Password"",
        ErrorCode == ""0xc0000064"", ""Bad Username (Potential Enumeration)"",
        ErrorCode == ""0xc0000234"", ""Account Locked Out"",
        ErrorCode == ""0xc0000072"", ""Account Disabled"",
        ErrorCode == ""0xc0000070"", ""Unauthorized Workstation"",
        ""Other Failure""
    ),
    IsHighPriorityFailure = ErrorCode in (""0xc000006a"", ""0xc0000064"", ""0xc0000234"", ""0xc0000072"", ""0xc0000070""),
    IsTargetedUser = TargetUserName in (Targeted_User_Names)
//
// ----- Part 4: Final Output -----
// Output distinct, sorted, and enriched NTLM credential validation activity.
| distinct TimeGenerated, IsTargetedUser, Computer, TargetUserName, SourceWorkstation, ErrorCode, FailureReason, IsHighPriorityFailure, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AC,02,08,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,System Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4800 - The workstation was locked,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4800,"// Objective: Tracks workstation lock events (Event ID 4800) in Windows SecurityEvent logs, enabling targeted filtering by user SID and monitoring when users lock their workstations.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4800 Events -----
// GPO Path: To capture 4800 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Other Logon/Logoff Events (Success)
// Note: This event tracks when a user locks their workstation.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4800
| where Activity == ""4800 - The workstation was locked.""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service accounts or other noise from the results.
| where not(TargetUserName has_any ('svc', 'MSOL', '$')) // <-- EDIT THIS LIST to exclude accounts
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Analyst targeting flag.
| extend IsTargetedUser = TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// Unique workstation lock events, sorted for review.
| distinct TimeGenerated, IsTargetedUser, Computer, Actor=TargetUserName, ActorSid=TargetUserSid, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AC,02,09,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,System Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4801 - The workstation was unlocked,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4801,"// Objective: Tracks workstation unlock events (Event ID 4801) in Windows SecurityEvent logs, enabling targeted filtering by user SID and monitoring when users resume interactive sessions.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4801 Events -----
// GPO Path: To capture 4801 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Other Logon/Logoff Events (Success)
// Note: This event tracks when a user unlocks their workstation, indicating they have resumed an interactive session.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4801
| where Activity == ""4801 - The workstation was unlocked.""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service accounts or other noise from the results.
| where not(TargetUserName has_any ('svc', 'MSOL', '$')) // <-- EDIT THIS LIST to exclude accounts
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Analyst targeting flag.
| extend IsTargetedUser = TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// Unique workstation unlock events, sorted for review.
| distinct TimeGenerated, IsTargetedUser, Computer, Actor=TargetUserName, ActorSid=TargetUserSid, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AD,02,01,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Privilege Access & Log Off (Success /Failure),Windows,SecurityEvent,Activity,4624 - An account was successfully logged on,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4624,"// Objective: Tracks successful logons (Event ID 4624) by privileged accounts in Windows SecurityEvent logs, enabling targeted filtering by SID and reporting on privileged user logon activity.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Define privileged account SIDs for focused analysis. Leave empty to include all accounts.
let Privileged_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4624 Events -----
// GPO Path: To capture 4624 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logon (Success)
// Note: This query focuses on successful logons by defined privileged accounts.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4624
| where Activity == ""4624 - An account was successfully logged on.""
| where AccountType == ""User""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service accounts and ANONYMOUS LOGON.
| where not(TargetUserName has_any ('svc', 'MSOL', '$', 'ANONYMOUS LOGON'))
//
// ----- Part 3: Flexible Filtering for Privileged Accounts -----
// Apply analyst-driven SID filtering if used.
| where array_length(Privileged_User_SIDs) == 0 or TargetUserSid in (Privileged_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Enrichment fields for investigation and privileged logon flag.
| extend
    IsPrivilegedLogon = TargetUserSid in (Privileged_User_SIDs),
    LogonTypeName = case(
        LogonType == 2, ""Interactive (Console)"",
        LogonType == 3, ""Network"",
        LogonType == 4, ""Batch"",
        LogonType == 5, ""Service"",
        LogonType == 10, ""RemoteInteractive (RDP)"",
        ""Other""
    ),
    AuthenticationProtocol = case(
        AuthenticationPackageName == ""NTLM"" and PackageName == ""LM"", ""LM (Legacy)"",
        AuthenticationPackageName == ""NTLM"" and PackageName == ""NTLM V1"", ""NTLMv1"",
        AuthenticationPackageName == ""NTLM"" and PackageName == ""NTLM V2"", ""NTLMv2"",
        AuthenticationPackageName
    )
//
// ----- Part 5: Final Output -----
// Unique privileged logon events, sorted for review.
| distinct TimeGenerated, IsPrivilegedLogon, TargetUserName, TargetUserSid, Computer, LogonTypeName, AuthenticationProtocol, IpAddress, Activity
| sort by TimeGenerated desc
| take 50
"
EL0,04,AD,02,02,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Privilege Access & Log Off (Success /Failure),Windows,SecurityEvent,Activity,4634 - An account was logged off,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4634,"// Objective: Tracks logoff events (Event ID 4634) by privileged accounts in Windows SecurityEvent logs, enabling targeted filtering by SID and reporting on privileged user session terminations.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Define privileged account SIDs for focused analysis. Leave empty to include all accounts.
let Privileged_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4634 Events -----
// GPO Path: To capture 4634 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logoff (Success)
// Note: This event is generated when a logon session is terminated.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4634
| where Activity == ""4634 - An account was logged off.""
| where AccountType == ""User""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service and system accounts.
| where not(TargetUserName has_any ('MSOL', 'svc', '$'))
//
// ----- Part 3: Flexible Filtering for Privileged Accounts -----
// Apply analyst-driven SID filtering if used.
| where array_length(Privileged_User_SIDs) == 0 or TargetUserSid in (Privileged_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Enrichment fields for investigation and privileged logoff flag.
| extend
    IsPrivilegedLogoff = TargetUserSid in (Privileged_User_SIDs),
    LogonTypeName = case(
        LogonType == 2, ""Interactive (Console)"",
        LogonType == 3, ""Network"",
        LogonType == 10, ""RemoteInteractive (RDP)"",
        LogonType == 4, ""Batch"",
        LogonType == 5, ""Service"",
        ""Other""
    )
//
// ----- Part 5: Final Output -----
// Unique privileged logoff events, sorted for review.
| distinct TimeGenerated, IsPrivilegedLogoff, TargetUserName, TargetUserSid, Computer, LogonTypeName, LogonProcessName, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AD,02,03,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Privilege Access & Log Off (Success /Failure),Windows,SecurityEvent,Activity,4647 - User initiated logoff,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4647,"// Objective: Tracks user-initiated logoff events (Event ID 4647) by privileged accounts in Windows SecurityEvent logs, enabling targeted filtering by SID and reporting on explicit privileged logoff actions.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Define privileged account SIDs for focused analysis. Leave empty to include all accounts.
let Privileged_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4647 Events -----
// GPO Path: To capture 4647 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logoff (Success)
// Note: This event is generated when a user actively initiates a logoff (e.g., clicks 'Log Off').
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4647
| where Activity == ""4647 - User initiated logoff.""
| where AccountType == ""User""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service and system accounts.
| where not(SubjectUserName has_any ('MSOL', 'svc', '$'))
//
// ----- Part 3: Flexible Filtering for Privileged Accounts -----
// Apply analyst-driven SID filtering if used.
| where array_length(Privileged_User_SIDs) == 0 or SubjectUserSid in (Privileged_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Enrichment field for privileged logoff flag.
| extend IsPrivilegedLogoff = SubjectUserSid in (Privileged_User_SIDs)
//
// ----- Part 5: Final Output -----
// Unique privileged logoff events, sorted for review.
| distinct TimeGenerated, IsPrivilegedLogoff, Computer, Actor=TargetUserName, ActorSid=TargetUserSid, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AD,02,04,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Privilege Access & Log Off (Success /Failure),Windows,SecurityEvent,Activity,4648 - A logon was attempted using explicit credentials,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4648,"// Objective: Tracks 'Run As' activity (Event ID 4648) in Windows SecurityEvent logs, enabling targeted filtering by target user name and highlighting cross-user explicit credential usage by privileged accounts.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Define privileged user names for focused analysis. Leave empty to include all accounts.
// This is directed at the TARGET user for cross-user activity.
let Privileged_User_Names = dynamic([]); // Example: dynamic([""administrator"", ""xadmin""])
// 
// ----- Part 1: Filter for Relevant 4648 Events -----
// GPO Path: To capture 4648 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logon (Success)
// Note: This event is critical for tracking 'Run As' activity. We must target by name as the Target SID is not available.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4648
| where Activity == ""4648 - A logon was attempted using explicit credentials.""
| where AccountType == ""User""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service and system accounts.
| where not(TargetUserName has_any ('svc', 'MSOL', '$'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// Apply analyst-driven user name filtering if used.
| where array_length(Privileged_User_Names) == 0 or TargetUserName in (Privileged_User_Names)
//
// ----- Part 4: Analysis & Enrichment -----
// Flags for privileged logons and cross-user explicit credential usage.
| extend
    IsPrivilegedLogon = TargetUserName in (Privileged_User_Names),
    IsCrossUserActivity = (SubjectUserName != TargetUserName)
//
// ----- Part 5: Final Output -----
// Unique explicit credential usage events, sorted for review.
| distinct TimeGenerated, IsPrivilegedLogon, IsCrossUserActivity, SubjectUserName, TargetUserName, Computer, ProcessName, IpAddress, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AD,02,05,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Privilege Access & Log Off (Success /Failure),Windows,SecurityEvent,Activity,4672 - Special privileges assigned to new logon,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4672,"// Objective: Tracks assignment of sensitive privileges to new logon sessions (Event ID 4672) in Windows SecurityEvent logs, enabling targeted filtering by SID and reporting on privileged user logon events.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// Define privileged account SIDs for focused analysis. Leave empty to include all accounts.
let Privileged_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4672 Events -----
// GPO Path: To capture 4672 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Special Logon (Success)
// Note: This event shows when sensitive privileges are assigned to a new logon session.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4672
| where Activity == ""4672 - Special privileges assigned to new logon.""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service and system accounts.
| where not(SubjectUserName has_any ('MSOL', 'svc', '$'))
//
// ----- Part 3: Flexible Filtering for Privileged Accounts -----
// Apply analyst-driven SID filtering if used.
| where array_length(Privileged_User_SIDs) == 0 or SubjectUserSid in (Privileged_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Enrichment field for privileged logon flag.
| extend IsPrivilegedLogon = SubjectUserSid in (Privileged_User_SIDs)
//
// ----- Part 5: Final Output -----
// Unique privileged logon events, sorted for review.
| distinct TimeGenerated, IsPrivilegedLogon, SubjectUserName, SubjectUserSid, Computer, PrivilegeList, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AD,02,06,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Privilege Access & Log Off (Success /Failure),Windows,SecurityEvent,Activity,4673 - A privileged service was called,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4673,"// Objective: Tracks privileged service calls (Event ID 4673) in Windows SecurityEvent logs, enabling targeted filtering by privileged user SID, and highlighting potentially suspicious privilege use and attack surface activity.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// This list should be customized with the SIDs of user accounts you consider privileged.
let Privileged_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// This list contains privileges that are often abused by attackers (e.g., for credential dumping).
let SuspiciousPrivileges = dynamic([
    ""SeDebugPrivilege"",
    ""SeLoadDriverPrivilege"",
    ""SeTcbPrivilege""
]);
// 
// ----- Part 1: Filter for Relevant 4673 Events & Data Parsing -----
// GPO Path: To capture 4673 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Privilege Use > Audit Sensitive Privilege Use
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4673
| where Activity == ""4673 - A privileged service was called.""
| extend EventData_xml = parse_xml(EventData)
| extend
    SubjectUserSid = tostring(EventData_xml.EventData.Data[0]['#text']),
    SubjectUserName = tostring(EventData_xml.EventData.Data[1]['#text']),
    SubjectDomainName = tostring(EventData_xml.EventData.Data[2]['#text']),
    SubjectLogonId = tostring(EventData_xml.EventData.Data[3]['#text']),
    Service = tostring(EventData_xml.EventData.Data[4]['#text']),
    ServiceName = tostring(EventData_xml.EventData.Data[5]['#text']),
    PrivilegeList = tostring(EventData_xml.EventData.Data[6]['#text']),
    ProcessId = tostring(EventData_xml.EventData.Data[7]['#text']),
    ProcessName = tostring(EventData_xml.EventData.Data[8]['#text'])
//
// ----- Part 2: Custom & Privileged Filtering -----
// Exclude common service accounts or other noise from the results.
| where not(SubjectUserName has_any ('svc', 'MSOL', '$')) // <-- EDIT THIS LIST to exclude accounts
//
// ----- Part 3: Flexible Filtering for Privileged Accounts -----
// Apply analyst-driven SID filtering if used.
| where array_length(Privileged_User_SIDs) == 0 or SubjectUserSid in (Privileged_User_SIDs)
//
// ----- Part 4: Analysis & Threat Hunting -----
// Enrichment flags for privilege use and suspicious privilege hunting.
| extend
    IsPrivilegedUse = true,
    IsTargetedUser = SubjectUserSid in (Privileged_User_SIDs),
    IsHighlySuspiciousUse = (PrivilegeList has_any (SuspiciousPrivileges) and not(ProcessName has_any (""C:\\Windows\\System32\\lsass.exe"", ""C:\\Windows\\System32\\wininit.exe"")))
//
// ----- Part 5: Final Output -----
// Unique privileged service call events, sorted for review.
| distinct TimeGenerated, IsTargetedUser, IsPrivilegedUse, IsHighlySuspiciousUse, SubjectUserName, SubjectUserSid, Computer, Service, ProcessName, PrivilegeList, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AD,02,07,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Privilege Access & Log Off (Success /Failure),Windows,SecurityEvent,Activity,4674 - An operation was attempted on a privileged object,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4674,"// Objective: Tracks privileged object operations (Event ID 4674) in Windows SecurityEvent logs, enabling targeted filtering by privileged user SID, and highlighting potentially suspicious privileged activity.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// This list should be customized with the SIDs of user accounts you consider privileged.
let Privileged_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// This list contains privileges that are often abused by attackers.
let SuspiciousPrivileges = dynamic([
    ""SeDebugPrivilege"",
    ""SeLoadDriverPrivilege"",
    ""SeSecurityPrivilege""
]);
// 
// ----- Part 1: Filter for Relevant 4674 Events -----
// GPO Path: To capture 4674 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Privilege Use > Audit Sensitive Privilege Use
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4674
| where Activity == ""4674 - An operation was attempted on a privileged object.""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service accounts or other noise from the results.
| where not(SubjectUserName has_any ('svc', 'MSOL', '$')) // <-- EDIT THIS LIST to exclude accounts
//
// ----- Part 3: Flexible Filtering for Privileged Accounts -----
// Apply analyst-driven SID filtering if used.
| where array_length(Privileged_User_SIDs) == 0 or SubjectUserSid in (Privileged_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Enrichment flags for privilege operation, targeting, and suspicious use.
| extend
    IsPrivilegedOperation = true,
    IsTargetedUser = SubjectUserSid in (Privileged_User_SIDs),
    IsHighlySuspiciousUse = (PrivilegeList has_any (SuspiciousPrivileges) and not(ProcessName has_any (""C:\\Windows\\System32\\lsass.exe"", ""C:\\Windows\\System32\\wininit.exe"")))
//
// ----- Part 5: Final Output -----
// Unique privileged object operation events, sorted for review.
| distinct TimeGenerated, IsTargetedUser, IsPrivilegedOperation, IsHighlySuspiciousUse, SubjectUserName, SubjectUserSid, Computer, ObjectServer, ObjectName, ProcessName, PrivilegeList, Activity
| sort by TimeGenerated desc
| take 50
"
EL0,04,AE,02,01,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,RDP Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4624 - An account was successfully logged on,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4624,"// Objective: Tracks successful RDP logons (Event ID 4624, LogonType 10) in Windows SecurityEvent logs, enabling targeted filtering by user SID and reporting on interactive remote logons.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-..."", ""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 4624 Events (RDP Only) -----
// GPO Path: To capture 4624 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logon (Success)
// Note: This query filters for LogonType == 10 to specifically track successful RDP logons.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4624
| where Activity == ""4624 - An account was successfully logged on.""
| where LogonType == 10 and AccountType == ""User""
//
// ----- Part 2: Custom Filtering -----
// Exclude common service and system accounts, including ANONYMOUS LOGON.
| where not(TargetUserName has_any ('svc', 'MSOL', '$', 'ANONYMOUS LOGON'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This line correctly applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Enrichment for protocol and analyst targeting.
| extend 
    LogonTypeName = ""RemoteInteractive (RDP)"",
    AuthenticationProtocol = case(
        AuthenticationPackageName == ""NTLM"" and PackageName == ""LM"", ""LM (Legacy)"",
        AuthenticationPackageName == ""NTLM"" and PackageName == ""NTLM V1"", ""NTLMv1"",
        AuthenticationPackageName == ""NTLM"" and PackageName == ""NTLM V2"", ""NTLMv2"",
        AuthenticationPackageName
    ),
    IsTargetedUser = TargetUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// Unique RDP logon events, sorted for review.
| distinct TimeGenerated, IsTargetedUser, TargetUserName, TargetUserSid, Computer, LogonTypeName, AuthenticationProtocol, IpAddress, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AE,02,02,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,RDP Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4625 - An account failed to log on,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4625,"// Objective: Tracks failed RDP logon attempts (Event ID 4625, LogonType 10) in Windows SecurityEvent logs, enabling targeted filtering by user name and reporting on brute-force or password spray attacks via RDP.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their user names inside the brackets.
let Targeted_User_Names = dynamic([]); // Example: dynamic([""administrator"", ""xadmin""])
// 
// ----- Part 1: Filter for Relevant 4625 Events (RDP Only) -----
// GPO Path: To capture 4625 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logon (Failure)
// Note: This query filters for LogonType == 10 to specifically track failed RDP logons, which is key for detecting brute-force attacks.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4625
| where Activity == ""4625 - An account failed to log on.""
| where AccountType == ""User""
//
// ----- Part 2: RDP & Custom Filtering -----
// Focus on failed RDP logons, exclude common service accounts.
| where LogonType == 10
| where not(TargetUserName has_any ('svc', 'MSOL', '$', 'himds'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// Apply analyst-driven name filtering if used.
| where array_length(Targeted_User_Names) == 0 or TargetUserName in (Targeted_User_Names)
//
// ----- Part 4: Analysis & Enrichment -----
// Enrichment for failure reason, targeting, and context.
| extend
    LogonTypeName = ""RemoteInteractive (RDP)"",
    FailureReason = case(
        SubStatus == ""0xc000006a"", ""Bad Password"",
        SubStatus == ""0xc0000064"", ""Bad Username"",
        SubStatus == ""0xc0000234"", ""Account Locked Out"",
        SubStatus == ""0xc0000072"", ""Account Disabled"",
        SubStatus == ""0xc000006f"", ""Logon Outside Authorized Hours"",
        SubStatus == ""0xc0000070"", ""Unauthorized Workstation"",
        ""Other Failure""
    ),
    IsTargetedUser = TargetUserName in (Targeted_User_Names),
    FailureContext = iff(IpAddress == ""0.0.0.0"", ""Failure at Network Level Authentication (NLA)"", """")
//
// ----- Part 5: Final Output -----
// Unique failed RDP logon events, sorted for review.
| distinct TimeGenerated, IsTargetedUser, TargetUserName, Computer, LogonProcessName, LogonTypeName, FailureReason, IpAddress, FailureContext, Status, SubStatus, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AE,02,04,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,RDP Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4778 - A session was reconnected to a Window Station,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4778,"// Objective: Tracks RDP session reconnections (Event ID 4778) in Windows SecurityEvent logs, enabling targeted filtering by user name and reporting on external vs. internal reconnects.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their user names inside the brackets.
let Targeted_User_Names = dynamic([]); // Example: dynamic([""r.finn"", ""xadmin""])
// 
// ----- Part 1: Filter for Relevant 4778 Events -----
// GPO Path: To capture 4778 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Other Logon/Logoff Events (Success)
// Note: This event tracks when a user reconnects to an existing RDP session.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4778
| where Activity == ""4778 - A session was reconnected to a Window Station.""
//
// ----- Part 2: RDP & Custom Filtering -----
// Focus on RDP sessions and exclude common service accounts.
| where SessionName has ""RDP""
| where not(AccountName has_any ('svc', 'MSOL', '$'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// Apply analyst-driven name filtering if used.
| where array_length(Targeted_User_Names) == 0 or AccountName in (Targeted_User_Names)
//
// ----- Part 4: Analysis & Enrichment -----
// Flags for external reconnections and analyst targeting.
| extend
    IsExternalReconnect = not(ipv4_is_private(ClientAddress)),
    IsTargetedUser = AccountName in (Targeted_User_Names)
//
// ----- Part 5: Final Output -----
// Unique RDP reconnection events, sorted for review.
| distinct TimeGenerated, IsTargetedUser, AccountName, AccountDomain, Computer, SessionName, ClientName, ClientAddress, IsExternalReconnect, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AE,02,05,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,RDP Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4779 - A session was disconnected from a Window Station,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4779,"// Objective: Tracks RDP session disconnects (Event ID 4779) in Windows SecurityEvent logs, enabling targeted filtering by user name and reporting on external vs. internal disconnects.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their user names inside the brackets.
let Targeted_User_Names = dynamic([]); // Example: dynamic([""r.finn"", ""xadmin""])
// 
// ----- Part 1: Filter for Relevant 4779 Events -----
// GPO Path: To capture 4779 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Other Logon/Logoff Events (Success)
// Note: This event tracks when a user disconnects an RDP session without fully logging off.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4779
| where Activity == ""4779 - A session was disconnected from a Window Station.""
//
// ----- Part 2: RDP & Custom Filtering -----
// Focus on RDP sessions and exclude common service accounts.
| where SessionName has ""RDP""
| where not(AccountName has_any ('svc', 'MSOL', '$'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// Apply analyst-driven name filtering if used.
| where array_length(Targeted_User_Names) == 0 or AccountName in (Targeted_User_Names)
//
// ----- Part 4: Analysis & Enrichment -----
// Flags for external disconnects and analyst targeting.
| extend
    IsExternalDisconnect = not(ipv4_is_private(ClientAddress)),
    IsTargetedUser = AccountName in (Targeted_User_Names)
//
// ----- Part 5: Final Output -----
// Unique RDP disconnect events, sorted for review.
| distinct TimeGenerated, IsTargetedUser, AccountName, AccountDomain, Computer, SessionName, ClientName, ClientAddress, IsExternalDisconnect, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AE,02,03,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,RDP Access & Log Off (Success/Failure),Windows,SecurityEvent,Activity,4634 - An account was logged off,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4634,"// Objective: Correlates RDP logon/logoff events (4624/4634, LogonType 10) in Windows SecurityEvent logs to build user session timelines and durations, with flexible filtering by user SID.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Gather RDP Logoff Events -----
// GPO Path: To capture 4634 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logon (Success) and Audit Logoff (Success)
let RDP_Logoffs =
    SecurityEvent
    | where TimeGenerated > ago(14d)
    | where EventID == 4634
    | where LogonType == 10
    | project LogoffTime = TimeGenerated, Computer, TargetUserName, TargetUserSid, TargetLogonId, LogoffActivity = Activity;
//
// ----- Part 2: Gather RDP Logon Events -----
// GPO Path: To capture 4624 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Logon/Logoff > Audit Logon (Success) and Audit Logoff (Success)
let RDP_Logons =
    SecurityEvent
    | where TimeGenerated > ago(14d)
    | where EventID == 4624
    | where LogonType == 10
    | project LogonTime = TimeGenerated, Source_IP = IpAddress, Source_Computer = ClientName, TargetLogonId, LogonActivity = Activity;
//
// ----- Part 3: Join, Filter, and Enrich Data -----
// Join logons to logoffs and enrich with session duration and targeting.
RDP_Logoffs
| join kind=inner RDP_Logons on TargetLogonId
| summarize
    LogonTime = min(LogonTime),
    LogoffTime = max(LogoffTime),
    LogonActivity = take_any(LogonActivity),
    LogoffActivity = take_any(LogoffActivity)
    by User = TargetUserName, UserSid = TargetUserSid, RDP_Server = Computer, Source_Computer, Source_IP
| extend SessionDuration = LogoffTime - LogonTime
| where array_length(Targeted_User_SIDs) == 0 or UserSid in (Targeted_User_SIDs)
| extend IsTargetedUser = UserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Final Output -----
// Clean, deduplicated session table for review.
| project LogonTime, LogoffTime, SessionDuration, User, UserSid, IsTargetedUser, RDP_Server, Source_Computer, Source_IP, LogonActivity, LogoffActivity
| sort by LogonTime desc
| take 50"
EL0,04,AF,02,01,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,SMB Access,Windows,SecurityEvent,Activity,5140 - A network share object was accessed,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5140,"// Objective: Tracks initial network share connections (Event ID 5140) in Windows SecurityEvent logs, enabling filtering by user SID, flagging external access and admin share connections.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 5140 Events -----
// GPO Path: To capture 5140 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File Share (Success, Failure)
// Note: This event tracks the initial connection to a network share.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5140
| where Activity == ""5140 - A network share object was accessed.""
//
// ----- Part 2: Custom Filtering -----
// Exclude common system/service accounts.
| where not(SubjectUserName has_any ('MSOL', '$'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// Only include SIDs in the analyst list, if set.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Analyst enrichment flags for targeting, external access, and admin shares.
| extend
    IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs),
    IsExternalAccess = not(ipv4_is_private(IpAddress)),
    IsAdminShareAccess = ShareName endswith ""$""
//
// ----- Part 5: Final Output -----
// Unique share access events, sorted for review.
| distinct TimeGenerated, SubjectUserName, SubjectUserSid, IsTargetedUser, Computer, ShareName, ShareLocalPath, IpAddress, IsExternalAccess, IsAdminShareAccess, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AF,02,02,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,SMB Access,Windows,SecurityEvent,Activity,5142 - A network share object was added,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5142,"// Objective: Tracks creation of new network shares (Event ID 5142) in Windows SecurityEvent logs, enabling filtering by user SID, and flagging hidden admin shares and sensitive system paths.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 5142 Events -----
// GPO Path: To capture 5142 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File Share (Success, Failure)
// Note: This event is critical for detecting potentially unauthorized data sharing or malware staging areas.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5142
| where Activity == ""5142 - A network share object was added.""
//
// ----- Part 2: Custom Filtering -----
// Exclude common system/service accounts.
| where not(SubjectUserName has_any ('MSOL', '$'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// Only include SIDs in the analyst list, if set.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Flags for targeting, admin shares, and risky paths.
| extend
    IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs),
    IsAdminShare = ShareName endswith ""$"",
    IsRiskyPath = (ShareLocalPath in~ (""C:\\"", ""C:\\Windows"", ""C:\\Windows\\System32""))
//
// ----- Part 5: Final Output -----
// Unique share creation events, sorted for review.
| distinct TimeGenerated, SubjectUserName, SubjectUserSid, IsTargetedUser, Computer, ShareName, ShareLocalPath, IsAdminShare, IsRiskyPath, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AF,02,03,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,SMB Access,Windows,SecurityEvent,Activity,5143 - A network share object was modified,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5143,"// Objective: Tracks modifications to network shares (Event ID 5143) in Windows SecurityEvent logs, enabling filtering by user SID, and flagging admin shares and permission changes.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 5143 Events and Parse Data -----
// GPO Path: To capture 5143 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File Share (Success)
// Note: This event is critical for tracking permission changes or other modifications to sensitive shares.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5143
| where Activity == ""5143 - A network share object was modified.""
| extend EventData_xml = parse_xml(EventData)
| extend
    SubjectUserSid = tostring(EventData_xml.EventData.Data[0]['#text']),
    SubjectUserName = tostring(EventData_xml.EventData.Data[1]['#text']),
    ShareName = tostring(EventData_xml.EventData.Data[4]['#text']),
    ShareLocalPath = tostring(EventData_xml.EventData.Data[5]['#text']),
    OldSD = tostring(EventData_xml.EventData.Data[11]['#text']),
    NewSD = tostring(EventData_xml.EventData.Data[12]['#text'])
//
// ----- Part 2: Custom Filtering -----
// Exclude common system/service accounts.
| where not(SubjectUserName has_any ('MSOL', '$'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// Only include SIDs in the analyst list, if set.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Flags for targeting, admin shares, and permission changes.
| extend
    IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs),
    PermissionsChanged = (OldSD != NewSD),
    IsAdminShare = ShareName endswith ""$""
//
// ----- Part 5: Final Output -----
// Unique share modification events, sorted for review.
| distinct TimeGenerated, SubjectUserName, SubjectUserSid, IsTargetedUser, Computer, ShareName, IsAdminShare, PermissionsChanged, OldSD, NewSD, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AF,02,04,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,SMB Access,Windows,SecurityEvent,Activity,5144 - A network share object was deleted,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5144,"// Objective: Tracks network share deletions (Event ID 5144) in Windows SecurityEvent logs, with filtering by user SID, and flags for admin shares and risky system paths.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 5144 Events -----
// GPO Path: To capture 5144 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit File Share (Success)
// Note: This event is critical for tracking when network shares are removed, which could be a malicious attempt to disrupt services.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5144
| where Activity == ""5144 - A network share object was deleted.""
//
// ----- Part 2: Custom Filtering -----
// Exclude common system/service accounts.
| where not(SubjectUserName has_any ('MSOL', '$'))
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// Only include SIDs in the analyst list, if set.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Flags for targeting, admin shares, and risky paths.
| extend
    IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs),
    IsAdminShare = ShareName endswith ""$"",
    IsRiskyPath = (ShareLocalPath in~ (""C:\\"", ""C:\\Windows"", ""C:\\Windows\\System32""))
//
// ----- Part 5: Final Output -----
// Unique share deletion events, sorted for review.
| distinct TimeGenerated, SubjectUserName, SubjectUserSid, IsTargetedUser, Computer, ShareName, ShareLocalPath, IsAdminShare, IsRiskyPath, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AF,02,05,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,SMB Access,Windows,SecurityEvent,Activity,5145 - A network share object was checked to see whether the client can be granted desired access,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5145,"// Objective: Detects detailed network share access events (Event ID 5145), enables filtering by user SID, and flags high-risk access types and sensitive file extensions.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// This list contains access rights that are critical to monitor.
let HighRiskActions = dynamic([""DELETE"", ""WRITE_DAC"", ""WRITE_OWNER""]);
// This list contains file extensions that might be used for malware staging or data exfiltration.
let SensitiveExtensions = dynamic(["".ps1"", "".bat"", ""exe"", "".zip"", "".rar"", "".7z""]);
// 
// ----- Part 1: Filter for Relevant 5145 Events -----
// GPO Path: To capture 5145 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit Detailed File Share (Success, Failure)
// Note: This event generates an entry for every file/folder access and can be very high volume.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5145
| where Activity == ""5145 - A network share object was checked to see whether the client can be granted desired access.""
//
// ----- Part 2: Custom & Targeted Filtering -----
// Exclude common system/service accounts.
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where not(SubjectUserName has_any ('MSOL', '$'))
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 3: Analysis & Enrichment -----
// Flags for targeting, high-risk actions, and sensitive file types.
| extend
    IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs),
    IsHighRiskAccess = AccessList has_any (HighRiskActions),
    IsSensitiveFileAccess = RelativeTargetName has_any (SensitiveExtensions)
//
// ----- Part 4: Final Output -----
// Unique share access events, sorted for review.
| distinct TimeGenerated, SubjectUserName, IsTargetedUser, SubjectUserSid, Computer, ShareName, RelativeTargetName, AccessList, IpAddress, IsHighRiskAccess, IsSensitiveFileAccess, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AF,02,06,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,SMB Access,Windows,SecurityEvent,Activity,5168 - SPN check for SMB & SMB2 failed,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-5168,"// Objective: Detects legacy authentication attempts (Event ID 5168) indicating failed SPN checks for SMB/SMB2, often tied to NTLMv1 usage.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 5168 Events -----
// GPO Path: To capture 5168 events, it's recommended to enable NTLM auditing policies, e.g.:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Local Policies > Security Options > Network security: Restrict NTLM: Audit NTLM authentication in this domain
// Note: This event is a strong indicator that a client is attempting to use weak, legacy authentication like NTLMv1.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 5168
| where Activity == ""5168 - SPN check for SMB/SMB2 failed.""
//
// ----- Part 2: Data Parsing -----
// Extract key details from the XML payload.
| extend EventData_xml = parse_xml(EventData)
| extend
    SubjectUserSid = tostring(EventData_xml.EventData.Data[0]['#text']),
    SubjectUserName = tostring(EventData_xml.EventData.Data[1]['#text']),
    IpAddress = tostring(EventData_xml.EventData.Data[4]['#text']),
    TargetAccountName = tostring(EventData_xml.EventData.Data[7]['#text']),
    Status = tostring(EventData_xml.EventData.Data[8]['#text'])
//
// ----- Part 3: Custom & Targeted Filtering -----
// Exclude noise and apply analyst-driven targeting if needed.
| where not(SubjectUserName has_any ('MSOL', '$'))
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Human-readable reason, legacy auth flag, and targeting flag.
| extend
    FailureReason = case(
        Status == ""0xc00000df"", ""No Such Domain or Computer Name"",
        ""Other""
    ),
    IsLegacyAuthIndicated = true,
    IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// Unique legacy auth attempts for review.
| distinct TimeGenerated, IsTargetedUser, SubjectUserName, SubjectUserSid, Computer, TargetAccountName, IpAddress, FailureReason, IsLegacyAuthIndicated, Status, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AF,02,07,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,SMB Access,Windows,SecurityEvent,Activity,6416 - A new external device was recognized by the System,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-6416,"// Objective: Detects new external device connections (Event ID 6416) to support DLP and investigation of unauthorized removable media usage.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// ----- Part 1: Filter for Relevant 6416 Events -----
// GPO Path: To capture 6416 events, you must enable the following subcategory:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit Removable Storage (Success)
// Note: This is a critical event for Data Loss Prevention (DLP) and tracking unauthorized device connections.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 6416
| where Activity == ""6416 - A new external device was recognized by the System""
//
// ----- Part 2: Custom Filtering -----
// This line allows analysts to easily filter out any SubjectUserName containing the specified strings.
| where not(SubjectUserName has_any ('MSOL', '$')) // <-- EDIT THIS LIST to exclude accounts
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// Flag USB storage devices and targeted users.
| extend
    IsUsbStorageDevice = (ClassName == ""USB"" or DeviceDescription has ""USB Mass Storage""),
    IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// This section creates a table of device connection events.
| distinct TimeGenerated, SubjectUserName, SubjectUserSid, IsTargetedUser, Computer, DeviceDescription, ClassName, VendorIds, HardwareIds, IsUsbStorageDevice, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AG,02,02,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Installation or Removal of Storage Volumes or Removeable Media,Windows,SecurityEvent,EventID,6416 - A new external device was recognized by the System,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-6416,"// Objective: Audit and investigate the installation or removal of storage volumes/removable media (Event ID 6416) for compliance and operations.
//
// ----- Part 0: Analyst-Driven Targeting (Optional) -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
//
// ----- Part 1: Filter for 6416 Events -----
// GPO Path: To capture 6416 events, you must enable:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit Removable Storage (Success)
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 6416
| where Activity == ""6416 - A new external device was recognized by the System""
//
// ----- Part 2: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 3: Analysis & Enrichment -----
// Adds flags for USB storage, targeted users, and anomalous actors.
| extend
    IsUsbStorageDevice = (ClassName == ""USB"" or DeviceDescription has ""USB Mass Storage""),
    IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs),
    IsAnomalousActor = (SubjectUserSid != ""S-1-5-18"")
//
// ----- Part 4: Final Output -----
// This section creates a table of device connection events with all flags.
| distinct TimeGenerated, IsTargetedUser, IsAnomalousActor, SubjectUserName, SubjectUserSid, Computer, DeviceDescription, ClassName, VendorIds, HardwareIds, IsUsbStorageDevice, Activity
| sort by TimeGenerated desc
| take 50"
EL0,04,AG,02,01,Operating Systems,Windows Infrastructure,User and Administrator Access to OS Components and Applications,Installation or Removal of Storage Volumes or Removeable Media,Windows,SecurityEvent,EventID,4663 - An attempt was made to access an object,https://github.com/Cyberlorians/M-21-31/blob/main/EL0/OperatingSystems/Windows/DCR/Security.md,https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4663,"// Objective: Audits access to objects on removable storage devices using Event ID 4663, focusing on actions performed by user accounts on drives D:–Z: (typically removable media).
//
// ----- Part 1: Define Targeted Users -----
// To see all activity, leave the list empty: dynamic([])
// To target specific users, add their SIDs inside the brackets.
let Targeted_User_SIDs = dynamic([]); // Example: dynamic([""S-1-5-...""])
// 
// GPO Path: To capture this event for removable storage, you must enable:
// - Computer Configuration > Policies > Windows Settings > Security Settings > Advanced Audit Policy Configuration > Object Access > Audit Removable Storage (Success, Failure)
// Note: This event requires a SACL on the files/folders to be audited.
SecurityEvent
| where TimeGenerated > ago(14d)
| where EventID == 4663
| where Activity == ""4663 - An attempt was made to access an object.""
//
// ----- Part 2: Custom Filtering -----
// This filter focuses only on actions taken by user accounts.
| where AccountType == 'User'
// ADDED: This filter focuses only on objects on drives other than C:, which typically represent removable media.
| where ObjectName matches regex @""^[D-Z]:\\""
//
// ----- Part 3: Flexible Filtering for Targeted Accounts -----
// This applies the filter ONLY if the Targeted_User_SIDs list is not empty.
| where array_length(Targeted_User_SIDs) == 0 or SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 4: Analysis & Enrichment -----
// This flag is useful for identifying a targeted user when viewing all results.
| extend IsTargetedUser = SubjectUserSid in (Targeted_User_SIDs)
//
// ----- Part 5: Final Output -----
// This section presents the unique access events, sorted by the most recent time.
| distinct TimeGenerated, IsTargetedUser, Account, SubjectUserSid, ObjectName, ObjectType, Computer, Activity
| sort by TimeGenerated desc
| take 50"
